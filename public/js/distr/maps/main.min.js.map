{"version":3,"sources":["ajax.js","auth.js","authenticate.js","breadcrumps.js","performances.js","skedjs.js"],"names":["request","method","url","query","cb","xhttp","XMLHttpRequest","onreadystatechange","this","readyState","status","onerror","e","currentTarget","open","setRequestHeader","send","Auth","_this","authBt","document","getElementById","login","pass","onclick","value","alert","res","window","location","href","Authenticate","pass1","pass2","authenBt","style","borderColor","q","console","log","statusText","updateBreadcrump","mainBreadcrump","currPage","pathname","textContent","/","/materials","/performances","Performance","pointsData","leftSide","rightSide","totalPointsNum","addPerfBtn","preloader","searchInpt","backgroundModal","closeAddPerf","savePerfBtn","perfName","perfType","perfUrl","perfActs","perfPoints","perfNotes","addActBtn","searchResults","closeCardPerf","backgroundCard","addPointsBtn","addRightPointBtn","addLeftPointBtn","backgroundPoints","closeEditPointsBtn","userPointsBack","closeUserPoints","cardPerfName","cardPerfImg","cardPerfType","cardPerfActs","cardPerfPoints","cardPerfNotes","totalPointsSpan","getActsEnding","actsNum","ending","showPerformanceCard","display","scrollTo","showUsualPointsTable","fillCardPerformanceActs","type","acts","length","clearDomElement","actLine","createElement","span1","span2","setAttribute","appendChild","fillCardPerformancePoints","points","childNodes","removeChild","totalPoints","countPointsNum","fillUserPointsTable","btn","userPerfCardBack","height","offsetHeight","i","fillPerformanceCard","performance","name","imgUrl","src","notes","innerHTML","admin","editBt","openEdit","rmBt","confirm","save","_id","parentElement","remove","elem","firstChild","fillSearchResults","results","srchResults","el","b","oninput","srchQuery","test","queryStr","JSON","parse","responseText","perfs","setTimeout","sp","ip","rm","add","addAct","target","em","fillEditCardPointsDiv","fillPointsEditModal","nSp","openEditTable","isEmpty","obj","prop","hasOwnProperty","stringify","leftTable","rightTable","trLeft","trRight","td2","td3","td4","numTotal","key1","inpt1","brSp","inpt2","stalls","split","inptMeters","meters","inptMach","machine","delsp","key2","totalNum","leftUsrTable","rightUsrTable","saveEditingPoints","leftPoints","getElementsByClassName","rightPoints","line1","line2","lastChild","backgroundColor","addPoint","childNum","nextChildNum","spanAct","timeInpt","delBtn","insertBefore","checkActs","children","inputsValid","perfId","action","includes","push","reload","perfData","side","tr","brSpan","td","inpt","delSp","SkedApp","wdays","init","addEventListener","new","weekdates","todayISODate","Date","now","todayDate","getDate","todayWeekday","getDay","getFullYear","getMonth","dates","from","date"],"mappings":"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","file":"../main.min.js","sourcesContent":["function request(method, url, query, cb) {\n  const xhttp = new XMLHttpRequest();\n  xhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n      cb(\"success\", this);\n    } else if (this.readyState == 4 && this.status == 500) {\n      cb(\"error\", this);\n    }\n  };\n \n  xhttp.onerror = function(e) {\n    if(e.currentTarget.status == 0) {\n      // console.log(\"error of net\");\n      cb(\"econn\");\n    }\n  };\n  xhttp.open(method, url, true);\n\n  if(query !== false) {\n    xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n    xhttp.send(query);\n  } else {\n    xhttp.send();\n  }\n}","function Auth() {\n  const _this = this;\n  this.authBt = document.getElementById(\"auth-bt\");\n  this.login = document.getElementById(\"login\");\n  this.pass = document.getElementById(\"pass\");\n\n  this.authBt.onclick = function() {\n    let login = _this.login.value;\n    let pass = _this.pass.value;\n\n    if(!login || !pass) {\n      return alert(\"Отсутствует логин или пароль\");\n    }\n    request(\"POST\", \"/auth\", `login=${login}&pass=${pass}`, function(status, res) {\n      if(status == \"success\") {\n        alert(\"Авторизация успешна и будет действительна в течение 30 дней\");\n        return window.location.href = \"/\";\n      } else if(status == \"error\") {\n        alert(\"Ошибка авторизации, проверьте введённые Вами данные\");\n        return;\n      }\n    });\n  }\n}","function Authenticate() {\n  const _this = this;\n\n  this.login = document.getElementById(\"login\");\n  this.pass1 = document.getElementById(\"pass1\");\n  this.pass2 = document.getElementById(\"pass2\");\n  this.authenBt = document.getElementById(\"authenticate-bt\");\n\n  this.login.onclick = function() {\n    _this.login.style.borderColor = \"initial\";\n  };\n  this.pass1.onclick = function() {\n    _this.pass1.style.borderColor = \"initial\";\n  };\n  this.pass2.onclick = function() {\n    _this.pass2.style.borderColor = \"initial\";\n  };\n  \n  this.authenBt.onclick = function() {\n    // check inputs \n    if(!_this.login.value) {\n      return _this.login.style.borderColor = \"red\";\n    } else if(!_this.pass1.value) {\n      return _this.pass1.style.borderColor = \"red\";\n    } else if(!_this.pass2.value) {\n      return _this.pass2.style.borderColor = \"red\";\n    }\n\n    let login = _this.login.value;\n    let pass1 = _this.pass1.value;\n    let pass2 = _this.pass2.value;\n    let q = `login=${login}&pass1=${pass1}&pass2=${pass2}`;\n\n    // check passes match\n    if(pass1 !== pass2) {\n      return alert(\"Введённые пароли не совпадают\");\n    }\n\n    request(\"POST\", \"/authenticate\", q, function(status, res) {\n      if(status == \"success\") {\n        alert(\"Аутентификация успешна, сейчас вы будете перенаправлены на страницу логина\");\n        return window.location.href = \"/auth\";\n      } else if(status == \"error\") {\n        console.log(res.statusText);\n        alert(\"Ошибка аутентификации, проверьте все поля\");\n        return;\n      }\n    });\n  };\n } ","function updateBreadcrump() {\n  const mainBreadcrump = document.getElementById(\"bread-crump\");\n  const currPage = window.location.pathname;\n  const pagesMap = {\n    \"/\": \"Главная\",\n    \"/materials\": \"Материалы\",\n    \"/performances\": \"Спектакли\",\n  };\n  mainBreadcrump.textContent = pagesMap[currPage];\n}","function Performance() {\n\n  const _this = this;\n\n  this.pointsData = {\n    leftSide: {},\n    rightSide: {}\n  };\n  // \n  this.totalPointsNum = 0;\n  this.addPerfBtn = document.getElementById(\"add-performance-btn\");\n\n  this.preloader = document.getElementById(\"preloader\");\n  this.searchInpt = document.getElementById(\"search-perfs\");\n  this.backgroundModal = document.getElementById(\"background-modal\");\n  this.closeAddPerf = document.getElementById(\"close-adding-perf\");\n  this.savePerfBtn = document.getElementById(\"save-perf-btn\");\n  this.perfName = document.getElementById(\"perf-name\");\n  this.perfType = document.getElementById(\"perf-type\");\n  this.perfUrl = document.getElementById(\"perf-pic-url\");\n  this.perfActs = document.getElementById(\"perf-acts\");\n  this.perfPoints = document.getElementById(\"perf-points\");\n  this.perfNotes = document.getElementById(\"perf-notes\");\n  this.addActBtn = document.getElementById(\"add-act\");\n  this.searchResults = document.getElementById(\"search-results\");\n  this.closeCardPerf = document.getElementById(\"close-card-perf\");\n  this.backgroundCard = document.getElementById(\"card-back\");\n  this.addPointsBtn = document.getElementById(\"add-points\");\n  this.addRightPointBtn = document.getElementById(\"add-right-pt-btn\");\n  this.addLeftPointBtn = document.getElementById(\"add-left-pt-btn\");\n  this.backgroundPoints = document.getElementById(\"points-back\");\n  this.closeEditPointsBtn = document.getElementById(\"close-points-perf\");\n  this.userPointsBack = document.getElementById(\"user-points-back\");\n  this.closeUserPoints = document.getElementById(\"close-user-points\");\n\n  this.cardPerfName = document.getElementById(\"card-perf-name\");\n  this.cardPerfImg = document.getElementById(\"card-perf-img\");\n  this.cardPerfType = document.getElementById(\"card-perf-type\");\n  this.cardPerfActs = document.getElementById(\"card-perf-acts\");\n  this.cardPerfPoints = document.getElementById(\"card-perf-points\");\n  this.cardPerfNotes = document.getElementById(\"card-perf-notes\");\n\n  this.totalPointsSpan = document.getElementById(\"total-points-num\");\n\n  this.getActsEnding = function (actsNum) {\n    let ending;\n    if (actsNum == 1) {\n      ending = actsNum + \" акт\";\n    } else if (actsNum > 1 && actsNum < 5) {\n      ending = actsNum + \" акта\";\n    } else {\n      ending = actsNum + \"актов\";\n    }\n    return ending;\n  };\n\n  this.showPerformanceCard = function () {\n    // show usual performance card and scroll top\n    _this.backgroundCard.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.showUsualPointsTable = function () {\n    // show usual performance table and scroll top\n    _this.userPointsBack.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.fillCardPerformanceActs = function (type, acts) {\n    const cardPerfType = _this.cardPerfType;\n    const cardPerfActs = _this.cardPerfActs;\n\n    // fill usual performance card with acts\n    if (type === \"ballet\") {\n      cardPerfType.textContent = `Балет, ${_this.getActsEnding(acts.length)}`;\n    }\n    else if (type === \"opera\") {\n      cardPerfType.textContent = `Опера, ${_this.getActsEnding(acts.length)}`;\n    }\n\n    // clear act's element before filling it\n    _this.clearDomElement(cardPerfActs, function () {\n      // create and fill element for each act\n      for (let e = 0; e < acts.length; e++) {\n        let actLine = document.createElement(\"div\");\n        let span1 = document.createElement(\"span\");\n        let span2 = document.createElement(\"span\");\n\n        actLine.setAttribute(\"class\", \"act-line\");\n        span1.textContent = `${e + 1} Акт:`;\n        span2.textContent = `${acts[e]}`;\n\n        actLine.appendChild(span1);\n        actLine.appendChild(span2);\n        cardPerfActs.appendChild(actLine);\n      }\n    });\n  };\n\n  this.fillCardPerformancePoints = function (points) {\n    const cardPerfPoints = _this.cardPerfPoints;\n\n    // if there is no points \n    if (!points) {\n      // show that points is absent\n      if (cardPerfPoints.childNodes.length == 3) {\n        // clear old elements before filling\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n        // add 'absent' message \n        const i = document.createElement(\"i\");\n        i.textContent = \"– Отсутствуют\";\n        cardPerfPoints.appendChild(i);\n      }\n    }\n    else {\n      // if there IS points\n      if (cardPerfPoints.childNodes.length == 2) {\n        // clear user card points div before filling\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n      } else if (cardPerfPoints.childNodes.length == 3) {\n        // clear old elements before filling\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n      }\n\n      // fill performance card with number of points total\n      const totalPoints = document.createElement(\"p\");\n      totalPoints.setAttribute(\"class\", \"total-points-usr\");\n      totalPoints.textContent = `Всего: ${_this.countPointsNum(points)} шт.`;\n      cardPerfPoints.appendChild(totalPoints);\n\n      // fill usual table itself with points\n      _this.fillUserPointsTable(points);\n\n      // add show usual points button\n      const btn = document.createElement(\"button\");\n      btn.setAttribute(\"class\", \"showPoints-btn\");\n      btn.textContent = \"Просмотр\";\n      btn.onclick = function () {\n        let userPointsBack = _this.userPointsBack;\n        let userPerfCardBack = _this.backgroundCard;\n\n        // set point table's background height as much as performance card background\n        userPointsBack.style.height = userPerfCardBack.offsetHeight + \"px\";\n\n        // show usual table on click\n        _this.showUsualPointsTable();\n      };\n      // append above button to usual card if it is absent\n      cardPerfPoints.appendChild(btn);\n    }\n  };\n\n  this.fillPerformanceCard = function (performance) {\n    // filling usual performance card\n    const cardPerfName = _this.cardPerfName;\n    const cardPerfImg = _this.cardPerfImg;\n    const cardPerfNotes = _this.cardPerfNotes;\n\n    // fill permormance name\n    cardPerfName.textContent = performance.name;\n\n    // show performance img if exists\n    if (performance.imgUrl) {\n      cardPerfImg.src = \"/static/imgs/performance-imgs/\" + performance.imgUrl;\n      cardPerfImg.style.display = \"inline-block\";\n    } else {\n      cardPerfImg.src = \"/static/imgs/performance-imgs/no-photo.png\";\n      cardPerfImg.style.display = \"inline-block\";\n    }\n\n    // fill performance acts\n    _this.fillCardPerformanceActs(performance.type, performance.acts);\n\n    // fill performance card itself with existing points\n    _this.fillCardPerformancePoints(performance.points);\n\n    // fill notes\n    if (performance.notes != \"\") {\n      cardPerfNotes.innerHTML = performance.notes;\n    } else {\n      cardPerfNotes.textContent = \"– Отсутствуют\";\n    }\n\n    // if user is admin, add editing buttons\n    if (admin === \"true\") {\n      // add edit performance button\n      let editBt = document.createElement(\"button\");\n      editBt.setAttribute(\"class\", \"edit-btn\");\n      editBt.textContent = \"Редактировать\";\n      editBt.onclick = function () {\n        _this.openEdit(performance);\n      };\n      // add remove performance button\n      let rmBt = document.createElement(\"button\");\n      rmBt.setAttribute(\"class\", \"rm-perf-btn\");\n      rmBt.textContent = \"Удалить\";\n      rmBt.onclick = function () {\n        if (confirm(`Вы действительно хотите удалить спектакль \"${performance.name}\" из базы?`)) {\n          _this.save(performance._id, \"remove\");\n        }\n      };\n\n      // add edit and remove buttons if no ones\n      const cardElemCount = cardPerfName.parentElement.childNodes.length;\n      if (cardElemCount == 5) {\n        cardPerfName.parentElement.appendChild(editBt);\n        cardPerfName.parentElement.appendChild(rmBt);\n      }\n      else {\n        // if there is ones, replace them with new ones\n        cardPerfName.parentElement.childNodes[5].remove();\n        cardPerfName.parentElement.childNodes[5].remove();\n        cardPerfName.parentElement.appendChild(editBt);\n        cardPerfName.parentElement.appendChild(rmBt);\n      }\n    }\n    // update function of save performance button of usual card\n    _this.savePerfBtn.onclick = function () {\n      _this.save(performance._id, \"update\");\n    };\n  };\n\n  this.clearDomElement = function (elem, cb) {\n    // safe and fast way to clear dom element\n    while (elem.firstChild) {\n      elem.removeChild(elem.firstChild);\n    }\n    return cb();\n  };\n\n  // filling search results div with found performanes\n  this.fillSearchResults = function (results) {\n\n    const srchResults = _this.searchResults;\n\n    // if nothing found\n    if (results.length == 0) {\n      const el = document.createElement(\"div\");\n      el.setAttribute(\"class\", \"perf-name-found nothing-found\");\n      el.textContent = \"Ничего не найдено\";\n      if (!srchResults.childNodes[0]) {\n        srchResults.appendChild(el);\n      }\n    }\n    else {\n      // fill search div with elements with performance's names\n      for (let i = 0; i < results.length; i++) {\n        let el = document.createElement(\"div\");\n        el.setAttribute(\"class\", \"perf-name-found\");\n        el.textContent = results[i].name;\n\n        // on click -> fill and show perfrormance card modal\n        el.onclick = function () {\n          _this.fillPerformanceCard(results[i]);\n          _this.showPerformanceCard();\n        };\n        for (let b = 0; b < srchResults.childNodes.length; b++) {\n          if (srchResults.childNodes[b].textContent == el.textContent) {\n            return;\n          }\n        }\n        srchResults.appendChild(el);\n      }\n    }\n  };\n\n  this.searchInpt.oninput = function () {\n    if (_this.searchInpt.value && _this.searchInpt.value != \"\") {\n      // clear search results div \n      _this.clearDomElement(_this.searchResults, function () {\n        const srchQuery = _this.searchInpt.value;\n        const rgx = /^\\s*$/;\n        const rgx2 = /^\\.+/;\n\n        // regex test if query does not start with empty value\n        if (!rgx.test(srchQuery) && !rgx2.test(srchQuery)) {\n          const queryStr = `query=${srchQuery}`;\n          _this.preloader.style.display = \"block\";\n          // send the above query to the server\n          request(\"POST\", \"/perf-search\", queryStr, function (status, res) {\n            if (status === \"success\") {\n              const results = JSON.parse(res.responseText).perfs;\n\n              // fill search div with results found \n              _this.fillSearchResults(results);\n              _this.preloader.style.display = \"none\";\n            }\n            else if (status == \"error\") {\n              _this.preloader.style.display = \"none\";\n              return;\n            } else if (status == \"econn\") {\n              _this.preloader.style.display = \"none\";\n              const el = document.createElement(\"div\");\n              el.setAttribute(\"class\", \"perf-name-found nothing-found\");\n              el.textContent = \"Проверьте интернет соединение\";\n              if (!_this.searchResults.childNodes[0]) {\n                _this.searchResults.appendChild(el);\n              }\n            }\n          });\n        }\n      });\n    } else {\n      setTimeout(function () {\n        // clear search results div \n        _this.clearDomElement(_this.searchResults, function () { });\n      }, 100);\n    }\n  };\n\n  this.openEdit = function (performance) {\n    _this.pointsData = performance.points;\n\n    _this.backgroundCard.style.display = \"none\";\n    _this.backgroundModal.style.display = \"block\";\n\n    this.perfName.value = performance.name;\n    this.perfType.value = performance.type;\n    this.perfUrl.value = performance.imgUrl;\n\n    // fill editing window with acts\n\n    if (performance.acts.length > 0) {\n      this.perfActs.innerHTML = \"\";\n\n      let actLine, sp, ip, rm, add;\n      for (let i = 0; i < performance.acts.length; i++) {\n        actLine = document.createElement(\"actLine\");\n        actLine.setAttribute(\"class\", \"act-line\");\n\n        sp = document.createElement(\"span\");\n        sp.setAttribute(\"class\", \"perf-act\");\n        sp.textContent = (i + 1) + \":\";\n        actLine.appendChild(sp);\n        ip = document.createElement(\"input\");\n        ip.setAttribute(\"class\", \"act-time\");\n        ip.setAttribute(\"type\", \"text\");\n        ip.setAttribute(\"placeholder\", \"1ч 15мин\");\n        ip.value = performance.acts[i];\n        actLine.appendChild(ip);\n        if (i == 0) {\n          add = document.createElement(\"button\");\n          add.setAttribute(\"class\", \"add-mini-btn\");\n          add.textContent = \"+\";\n          add.onclick = function () {\n            _this.addAct();\n          };\n          actLine.appendChild(add);\n        } else {\n          rm = document.createElement(\"span\");\n          rm.setAttribute(\"class\", \"del-act-btn\");\n          rm.textContent = \"X\";\n          rm.onclick = function (e) {\n            e.target.parentElement.remove();\n          };\n          actLine.appendChild(rm);\n        }\n        em = document.createElement(\"button\");\n        sp.setAttribute(\"class\", \"perf-act\");\n        this.perfActs.appendChild(actLine);\n      }\n\n    }\n    _this.fillEditCardPointsDiv(performance.points);\n    _this.fillPointsEditModal(performance.points);\n    this.perfNotes.value = performance.notes;\n\n    // change text of save button\n    this.savePerfBtn.textContent = \"Сохранить изменения\";\n    this.savePerfBtn.onclick = function () {\n      _this.save(performance._id, \"update\");\n    };\n  };\n\n  this.fillEditCardPointsDiv = function (points) {\n    // fill editing table with points\n    if (points) {\n      // fill preview modal\n      _this.perfPoints.childNodes[0].remove();\n      _this.perfPoints.childNodes[0].remove();\n      let nSp = document.createElement(\"span\");\n      nSp.setAttribute(\"class\", \"points-number\");\n      nSp.textContent = _this.countPointsNum(points) + \" шт.\";\n      let openEditTable = document.createElement(\"span\");\n      openEditTable.setAttribute(\"class\", \"showPoints-btn\");\n      openEditTable.textContent = \"Редактор\";\n      openEditTable.onclick = function () {\n        _this.fillPointsEditModal(points);\n        // set edit points' background height as much as edit card background\n        _this.backgroundPoints.style.height = _this.backgroundModal.offsetHeight + \"px\";\n        _this.backgroundPoints.style.display = \"block\";\n        window.scrollTo(0, 0);\n      }\n      _this.perfPoints.appendChild(nSp);\n      _this.perfPoints.appendChild(openEditTable);\n    }\n  };\n\n  this.isEmpty = function (obj) {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n    return JSON.stringify(obj) === JSON.stringify({});\n  };\n\n  this.fillPointsEditModal = function (points) {\n    if (!points) {\n      points = {};\n    }\n\n    let leftTable = document.getElementById(\"left-table\");\n    let rightTable = document.getElementById(\"right-table\");\n\n    // clear before filling\n    while (leftTable.childNodes.length != 1) {\n      leftTable.childNodes[leftTable.childNodes.length - 1].remove();\n    }\n    while (rightTable.childNodes.length != 1) {\n      rightTable.childNodes[rightTable.childNodes.length - 1].remove();\n    }\n\n    _this.totalPointsNum = _this.countPointsNum(points);\n\n    let numTotal = document.getElementById(\"total-points-num\");\n    numTotal.textContent = _this.countPointsNum(points) + \" шт.\";\n\n    let trLeft, trRight, td2, td3, td4;\n    for (key1 in points.leftSide) {\n      if (_this.isEmpty(points.leftSide[key1])) {\n        continue;\n      }\n\n      trLeft = document.createElement(\"tr\");\n      trLeft.setAttribute(\"class\", \"left-point-rope\");\n      trLeft.appendChild(document.createElement(\"td\"));\n\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      // fill them with inputs\n      let inpt1, brSp, inpt2;\n      inpt1 = document.createElement(\"input\");\n      inpt1.setAttribute(\"type\", \"number\");\n      inpt1.setAttribute(\"class\", \"lines\");\n      inpt1.value = points.leftSide[key1].stalls.split('/')[0];\n      brSp = document.createElement(\"span\");\n      brSp.textContent = \"/\";\n      inpt2 = document.createElement(\"input\");\n      inpt2.setAttribute(\"type\", \"number\");\n      inpt2.setAttribute(\"class\", \"lines\");\n      inpt2.value = points.leftSide[key1].stalls.split('/')[1];\n      td2.appendChild(inpt1);\n      td2.appendChild(brSp);\n      td2.appendChild(inpt2);\n\n      let inptMeters = document.createElement(\"input\");\n      inptMeters.setAttribute(\"type\", \"number\");\n      inptMeters.setAttribute(\"class\", \"meters\");\n      inptMeters.value = points.leftSide[key1].meters;\n      td3.appendChild(inptMeters);\n\n      let inptMach = document.createElement(\"input\");\n      inptMach.setAttribute(\"type\", \"number\");\n      inptMach.setAttribute(\"class\", \"machine\");\n      inptMach.value = points.leftSide[key1].machine;\n      td4.appendChild(inptMach);\n      let delsp = document.createElement(\"span\");\n      delsp.setAttribute(\"class\", \"del-point-rope\");\n      delsp.textContent = \"X\";\n      delsp.onclick = function (e) {\n        if (confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          _this.totalPointsNum--;\n          _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n        }\n      };\n      td4.appendChild(delsp);\n\n      trLeft.appendChild(td2);\n      trLeft.appendChild(td3);\n      trLeft.appendChild(td4);\n      leftTable.appendChild(trLeft);\n    }\n\n    for (key2 in points.rightSide) {\n      if (_this.isEmpty(points.rightSide[key2])) {\n        continue;\n      }\n      trRight = document.createElement(\"tr\");\n      trRight.setAttribute(\"class\", \"right-point-rope\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      // fill them with inputs\n      let inpt1, brSp, inpt2;\n      inpt1 = document.createElement(\"input\");\n      inpt1.setAttribute(\"type\", \"number\");\n      inpt1.setAttribute(\"class\", \"lines\");\n      inpt1.value = points.rightSide[key2].stalls.split('/')[0];\n      brSp = document.createElement(\"span\");\n      brSp.textContent = \"/\";\n      inpt2 = document.createElement(\"input\");\n      inpt2.setAttribute(\"type\", \"number\");\n      inpt2.setAttribute(\"class\", \"lines\");\n      inpt2.value = points.rightSide[key2].stalls.split('/')[1];\n      td2.appendChild(inpt1);\n      td2.appendChild(brSp);\n      td2.appendChild(inpt2);\n\n      let inptMeters = document.createElement(\"input\");\n      inptMeters.setAttribute(\"type\", \"number\");\n      inptMeters.setAttribute(\"class\", \"meters\");\n      inptMeters.value = points.rightSide[key2].meters;\n      td3.appendChild(inptMeters);\n\n      let inptMach = document.createElement(\"input\");\n      inptMach.setAttribute(\"type\", \"number\");\n      inptMach.setAttribute(\"class\", \"machine\");\n      inptMach.value = points.rightSide[key2].machine;\n      td4.appendChild(inptMach);\n      let delsp = document.createElement(\"span\");\n      delsp.setAttribute(\"class\", \"del-point-rope\");\n      delsp.textContent = \"X\";\n      delsp.onclick = function (e) {\n        if (confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          _this.totalPointsNum--;\n          _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n        }\n      };\n      td4.appendChild(delsp);\n      trRight.appendChild(td2);\n      trRight.appendChild(td3);\n      trRight.appendChild(td4);\n      rightTable.appendChild(trRight);\n    }\n  };\n\n  this.countPointsNum = function (points) {\n    let totalNum = 0;\n    if (!points) {\n      return 0;\n    }\n    for (key1 in points.leftSide) {\n      if (!_this.isEmpty(points.leftSide[key1])) {\n        totalNum++;\n      }\n    }\n    for (key1 in points.rightSide) {\n      if (!_this.isEmpty(points.rightSide[key1])) {\n        totalNum++;\n      }\n    }\n    return totalNum;\n  };\n\n  this.closeUserPoints.onclick = function () {\n    // close user table points\n    _this.userPointsBack.style.display = \"none\";\n  };\n\n  this.fillUserPointsTable = function (points) {\n    let leftUsrTable = document.getElementById(\"left-usr-table\");\n    let rightUsrTable = document.getElementById(\"right-usr-table\");\n\n    // clear before filling\n    while (leftUsrTable.childNodes[1]) {\n      leftUsrTable.childNodes[1].remove();\n    }\n    while (rightUsrTable.childNodes[1]) {\n      rightUsrTable.childNodes[1].remove();\n    }\n\n    let numTotal = document.getElementById(\"total-user-points\");\n    numTotal.textContent = _this.countPointsNum(points) + \" шт.\";\n\n    let trLeft, trRight, td2, td3, td4;\n    for (key1 in points.leftSide) {\n      trLeft = document.createElement(\"tr\");\n      trLeft.appendChild(document.createElement(\"td\"));\n\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      td2.textContent = points.leftSide[key1].stalls;\n      trLeft.appendChild(td2);\n      td3.textContent = points.leftSide[key1].meters;\n      trLeft.appendChild(td3);\n      td4.textContent = points.leftSide[key1].machine;\n      trLeft.appendChild(td4);\n      leftUsrTable.appendChild(trLeft);\n    }\n\n    for (key2 in points.rightSide) {\n      trRight = document.createElement(\"tr\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      td2.textContent = points.rightSide[key2].stalls;\n      trRight.appendChild(td2);\n      td3.textContent = points.rightSide[key2].meters;\n      trRight.appendChild(td3);\n      td4.textContent = points.rightSide[key2].machine;\n      trRight.appendChild(td4);\n      rightUsrTable.appendChild(trRight);\n    }\n  };\n\n  this.saveEditingPoints = function () {\n    // save points\n    let leftPoints = document.getElementsByClassName(\"left-point-rope\");\n    let rightPoints = document.getElementsByClassName(\"right-point-rope\");\n\n    // clear points data before filling it\n    _this.pointsData = {\n      leftSide: {},\n      rightSide: {}\n    };\n\n    if (leftPoints.length == 0 && rightPoints.length == 0) {\n      _this.backgroundPoints.style.display = \"none\";\n      return;\n    }\n\n    for (let i = 0; i < leftPoints.length; i++) {\n      _this.pointsData.leftSide[\"point\" + (i + 1)] = {};\n      for (let b = 1; b < leftPoints[i].childNodes.length; b++) {\n        if (b == 1) {\n          let line1 = leftPoints[i].childNodes[b].firstChild;\n          let line2 = leftPoints[i].childNodes[b].lastChild;\n          // check if empty\n          if (!line1.value) {\n            line1.parentElement.style.backgroundColor = \"red\";\n            line1.onclick = function () {\n              line1.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          } else if (!line2.value) {\n            line2.parentElement.style.backgroundColor = \"red\";\n            line2.onclick = function () {\n              line2.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.leftSide[\"point\" + (i + 1)].stalls = line1.value + \"/\" + line2.value;\n        } else if (b == 2) {\n          // check if empty\n          if (!leftPoints[i].childNodes[b].firstChild.value) {\n            leftPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"red\";\n            leftPoints[i].childNodes[b].firstChild.onclick = function () {\n              leftPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"initial\";\n            }\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.leftSide[\"point\" + (i + 1)].meters = leftPoints[i].childNodes[b].firstChild.value;\n        } else if (b == 3) {\n          _this.pointsData.leftSide[\"point\" + (i + 1)].machine = leftPoints[i].childNodes[b].firstChild.value;\n        }\n      }\n    }\n    for (let i = 0; i < rightPoints.length; i++) {\n      _this.pointsData.rightSide[\"point\" + (i + 1)] = {};\n      for (let b = 1; b < rightPoints[i].childNodes.length; b++) {\n        if (b == 1) {\n          let line1 = rightPoints[i].childNodes[b].firstChild;\n          let line2 = rightPoints[i].childNodes[b].lastChild;\n\n          // check if empty\n          if (!line1.value) {\n            line1.parentElement.style.backgroundColor = \"red\";\n            line1.onclick = function () {\n              line1.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          } else if (!line2.value) {\n            line2.parentElement.style.backgroundColor = \"red\";\n            line2.onclick = function () {\n              line2.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n\n          _this.pointsData.rightSide[\"point\" + (i + 1)].stalls = line1.value + \"/\" + line2.value;\n        } else if (b == 2) {\n          // check if empty\n          if (!rightPoints[i].childNodes[b].firstChild.value) {\n            rightPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"red\";\n            rightPoints[i].childNodes[b].firstChild.onclick = function () {\n              rightPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"initial\";\n            }\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.rightSide[\"point\" + (i + 1)].meters = rightPoints[i].childNodes[b].firstChild.value;\n        } else if (b == 3) {\n          _this.pointsData.rightSide[\"point\" + (i + 1)].machine = rightPoints[i].childNodes[b].firstChild.value;\n        }\n      }\n    }\n\n    // fill editing card points div\n    _this.fillEditCardPointsDiv(_this.pointsData);\n    _this.backgroundPoints.style.display = \"none\";\n  };\n\n  this.closeEditPointsBtn.onclick = function () {\n    _this.saveEditingPoints();\n  };\n\n  this.addPointsBtn.onclick = function () {\n    _this.backgroundPoints.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.closeCardPerf.onclick = function () {\n    _this.savePerfBtn.onclick = function () {\n      _this.save(false, \"create\");\n    };\n\n    _this.backgroundCard.style.display = \"none\";\n  };\n\n  if (admin === \"true\") {\n    this.addPerfBtn.onclick = function () {\n      _this.backgroundModal.style.display = \"block\";\n    };\n  }\n\n  this.closeAddPerf.onclick = function () {\n    _this.backgroundModal.style.display = \"none\";\n  };\n\n  this.savePerfBtn.onclick = function () {\n    _this.save(false, \"create\");\n  };\n\n  this.perfName.onclick = function () {\n    _this.perfName.style.borderColor = \"initial\";\n  };\n\n  this.perfType.onclick = function () {\n    _this.perfType.style.borderColor = \"initial\";\n  }\n\n  this.addActBtn.onclick = function () {\n    _this.addAct();\n  };\n\n  this.addRightPointBtn.onclick = function () {\n    _this.addPoint(\"right\");\n  }\n\n  this.addLeftPointBtn.onclick = function () {\n    _this.addPoint(\"left\");\n  }\n\n  this.addAct = function () {\n    // num of childnodes without button\n    let childNum = _this.perfActs.childNodes.length;\n    let nextChildNum = childNum + 1;\n\n    // create elements\n    let actLine = document.createElement(\"div\");\n    let spanAct = document.createElement(\"span\");\n    let timeInpt = document.createElement(\"input\");\n    let delBtn = document.createElement(\"span\");\n\n\n    // set attributes on them\n    actLine.setAttribute(\"class\", \"act-line\")\n    spanAct.setAttribute(\"class\", \"perf-act\");\n    spanAct.setAttribute(\"id\", \"perf-act\" + nextChildNum);\n    spanAct.textContent = nextChildNum + \":\";\n    timeInpt.setAttribute(\"type\", \"text\");\n    timeInpt.setAttribute(\"class\", \"act-time\");\n    timeInpt.setAttribute(\"id\", \"act-time\" + nextChildNum);\n    timeInpt.setAttribute(\"placeholder\", \"1ч 15мин\");\n    delBtn.setAttribute(\"id\", \"del-act-btn\" + nextChildNum);\n    delBtn.setAttribute(\"class\", \"del-act-btn\");\n    delBtn.textContent = \"X\";\n    delBtn.onclick = function () {\n      delBtn.parentElement.remove();\n    };\n\n    // add\n    actLine.appendChild(spanAct);\n    actLine.appendChild(timeInpt);\n    actLine.appendChild(delBtn);\n    _this.perfActs.insertBefore(actLine, _this.perfActs.childNodes[childNum]);\n  };\n\n  this.checkActs = function () {\n    // num of childnodes\n    let childNum = _this.perfActs.childNodes.length;\n    let children = _this.perfActs.childNodes;\n    for (let i = 0; i < childNum; i++) {\n\n      // check if act time exists for all children\n      if (!children[i].childNodes[1].value) {\n        children[i].childNodes[1].style.borderColor = \"red\";\n        children[i].childNodes[1].onclick = function () { return children[i].childNodes[1].style.borderColor = \"initial\"; };\n        return false;\n        break;\n      }\n    }\n    return true;\n  };\n\n  this.inputsValid = function () {\n    // check all inputs\n    if (!_this.perfName.value) {\n      _this.perfName.style.borderColor = \"red\";\n      return false;\n    }\n    else if (!_this.perfType.value) {\n      _this.perfType.style.borderColor = \"red\";\n      return false;\n    }\n    else if (!_this.checkActs()) {\n      _this.perfActs.borderColor = \"red\";\n      return false;\n    }\n    return true;\n  };\n\n  this.save = function (perfId, action) {\n    if (action === \"update\" || action === \"create\") {\n      // check for empty inputs\n      if (_this.inputsValid()) {\n        let name = _this.perfName.value;\n        let type = _this.perfType.value;\n        let imgUrl = _this.perfUrl.value;\n        let perfActs = [];\n        let perfNotes = _this.perfNotes.value;\n\n        // check if acts do not include commas\n        for (let i = 0; i < _this.perfActs.childNodes.length; i++) {\n          if (_this.perfActs.childNodes[i].childNodes[1].value.includes(\",\")) {\n            _this.perfActs.childNodes[i].childNodes[1].style.borderColor = \"red\";\n            return;\n          }\n          // add act to perfActs to save if validation passed\n          perfActs.push(_this.perfActs.childNodes[i].childNodes[1].value);\n        }\n\n        if (perfId && action === \"update\") {\n          let perfData = `name=${name}&type=${type}&imgUrl=${imgUrl}&acts=${perfActs}&points=${JSON.stringify(_this.pointsData)}&notes=${perfNotes}&perfId=${perfId}&action=${action}`;\n\n          // send data to Server\n          request(\"post\", \"/performances\", perfData, function (status, res) {\n            if (status == \"success\") {\n              alert(\"Спектакль обновлен успешно\");\n              _this.backgroundModal.style.display = \"none\";\n              window.location.reload();\n            }\n            else if (status == \"err\") {\n              return;\n            }\n          });\n        } else if (!perfId && action == \"create\") {\n          let perfData = `name=${name}&type=${type}&imgUrl=${imgUrl}&acts=${perfActs}&points=${JSON.stringify(_this.pointsData)}&notes=${perfNotes}&action=${action}`;\n          // send data to Server\n          request(\"post\", \"/performances\", perfData, function (status, res) {\n            if (status == \"success\") {\n              alert(\"Новый спектакль успешно добавлен\");\n              _this.backgroundModal.style.display = \"none\";\n              window.location.reload();\n            }\n            else if (status == \"err\") {\n              return;\n            }\n          });\n        }\n      }\n    }\n    else if (action === \"remove\") {\n      perfData = `perfId=${perfId}&action=${action}`;\n      // send data to Server\n      request(\"post\", \"/performances\", perfData, function (status, res) {\n        if (status == \"success\") {\n          alert(\"Спектакль успешно удалён\");\n          _this.backgroundModal.style.display = \"none\";\n          window.location.reload();\n        }\n        else if (status == \"err\") {\n          return;\n        }\n      });\n    }\n  };\n\n  this.addPoint = function (side) {\n    let tr = document.createElement(\"tr\");\n    let brSpan = document.createElement(\"span\");\n    brSpan.textContent = \"/\";\n\n    for (let i = 0; i < 4; i++) {\n      let td = document.createElement(\"td\");\n      if (i == 1) {\n        for (let b = 0; b < 2; b++) {\n          let inpt = document.createElement(\"input\");\n          inpt.setAttribute(\"type\", \"number\");\n          inpt.setAttribute(\"class\", \"lines\");\n          (b == 1 ? td.appendChild(brSpan) : null);\n          td.appendChild(inpt);\n        }\n      } else if (i == 2) {\n        let inpt = document.createElement(\"input\");\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"meters\");\n        td.appendChild(inpt);\n      } else if (i == 3) {\n        let inpt = document.createElement(\"input\");\n        let delSp = document.createElement(\"span\");\n        delSp.textContent = \"X\";\n        delSp.setAttribute(\"class\", \"del-point-rope\");\n        delSp.onclick = function (e) {\n          if (confirm(\"Удалить эту точку подвеса?\")) {\n            e.target.parentElement.parentElement.remove();\n            _this.totalPointsNum--;\n            _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n          }\n        };\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"machine\");\n        td.appendChild(inpt);\n        td.appendChild(delSp);\n      }\n      tr.appendChild(td);\n    }\n    // add\n    tr.setAttribute(\"class\", side + \"-point-rope\");\n    document.getElementById(side + \"-table\").appendChild(tr);\n\n    // increment total points\n    _this.totalPointsNum++;\n    _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n  };\n}","function SkedApp() {\n  const _this = this;\n  const wdays = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"];\n\n  this.init = function() {\n    document.getElementById(\"new-sked\").addEventListener(\"click\", function() {\n      _this.new();\n    });\n    const weekdates = document.getElementsByClassName(\"weekdate\");\n    const todayISODate = new Date(Date.now());\n    const todayDate = todayISODate.getDate();\n    const todayWeekday = todayISODate.getDay();\n\n    request(\"POST\", \"/sked\", `year=${todayISODate.getFullYear()}&month=${todayISODate.getMonth()}`, function (status, res) {\n      if (status == \"success\") {\n        const dates = JSON.parse(res.responseText);\n\n        let b = todayDate-1;\n        let from = todayWeekday;\n        for(let i=0; i< weekdates.length; i++) {\n          weekdates[i].textContent = dates[b].date+ \" \"+wdays[from];\n          b++;\n          if(from <7) {\n            from++;\n          } else {\n            from = 0;\n          }\n        }\n      }\n      else if (status == \"error\") {\n        return;\n      }\n    });\n  };\n\n  this.new = function() {\n   \n  };\n};"]}