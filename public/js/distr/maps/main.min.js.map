{"version":3,"sources":["authenticate.js","authorisate.js","calendars.js","ical.js","performances.js","repertuar.js","request.js"],"names":["Authenticate","[object Object]","this","login","document","getElementById","pass1","pass2","authBtn","onclick","style","borderColor","authenticate","value","alert","authData","resp","request","statusText","window","location","href","Authorisate","loginInpt","passInpt","authorise","pass","Calendars","stageEvTime","stageEvMsg","tehEvTime","tehEvMsg","loadEvTime","loadEvMsg","stagePreloader","tehPreloader","loadPreloader","stageEvURL","tehEvURL","loadEvURL","onload","updateAllEvents","display","url","status","console","error","json","evts","events","todayDate","Date","now","today","getDate","month","getMonth","year","getFullYear","todayEvents","key","evStart","start","push","i","length","getTime","evEnd","end","currTime","summary","showStagePreloader","allStageEvents","getCalEvents","showTehPreloader","allTehEvents","showLoadPreloader","allLoadEvents","todayStageEvents","getTodayEvents","currStageEvent","getCurrentEvent","setStageEvent","hideStagePreloader","todayTehEvents","currTehEvent","setTehEvent","hideTehPreloader","todayLoadEvents","currLoadEvent","setLoadEvent","hideLoadPreloader","evt","textContent","undefined","getRusTime","time","timeStr","getHours","minutes","getMinutes","toString","iCal","intId","nowOnStage","nowOrNext","startPreloader","startUpdatingStageEvents","updateStageEvent","setInterval","allEvents","currMonthEvents","getCurrMonthEvents","currEvent","getCurrEvent","setEvent","clearInterval","currYearEvents","calDataStart","hour","b","str","Performance","e","edit","pointsData","leftSide","rightSide","totalPointsNum","addPerfBtn","preloader","searchInpt","backgroundModal","closeAddPerf","savePerfBtn","perfName","perfType","perfUrl","perfActs","perfPoints","perfNotes","addActBtn","searchResults","closeCardPerf","backgroundCard","addPointsBtn","addRightPointBtn","addLeftPointBtn","backgroundPoints","closeEditPointsBtn","userPointsBack","closeUserPoints","cardPerfName","cardPerfImg","cardPerfType","cardPerfActs","cardPerfPoints","cardPerfNotes","totalPointsSpan","save","addAct","addPoint","saveEditingPoints","scrollTo","oninput","clearDomElement","async","test","fillSearchResults","query","data","perfs","div","createElement","setAttribute","childNodes","appendChild","setTimeout","num","element","cb","firstChild","remove","acts","getActsEnding","s1","s2","points","p","countPointsNum","fillUserPointsTable","btn","height","offsetHeight","showUsualPointsTable","perf","name","imgUrl","src","origin","fillCardPerformanceActs","type","fillCardPerformancePoints","notes","innerHTML","openEdit","delBtn","confirm","_id","parentElement","results","fillPerformanceCard","showPerformanceCard","actLine","sp1","inpt","sp2","target","fillEditCardPointsDiv","fillPointsEditModal","span","span2","obj","prop","hasOwnProperty","JSON","stringify","trLeft","trRight","td1","td2","td3","leftTableFirstChild","rightTableFirstChild","leftPoint","isEmpty","input","sp","input2","stalls","split","input3","meters","input4","machine","delSpan","rightPoint","thenextContent","t","left","getElementsByClassName","right","o","first","last","lastChild","backgroundColor","insertBefore","childLen","children","checkActs","perfId","action","inputsValid","includes","reload","dt","point","tr","td","Repertuar","rollLine","todaySquare","offsetLeft","startAnimatingScroll","d","id","scrollLeft","method","fetch","headers","Content-Type","body"],"mappings":"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","file":"../main.min.js","sourcesContent":["\r\nclass Authenticate {\r\n\r\n  constructor() {\r\n    this.login = document.getElementById(\"login\");\r\n    this.pass1 = document.getElementById(\"pass1\");\r\n    this.pass2 = document.getElementById(\"pass2\");\r\n    this.authBtn = document.getElementById(\"authenticate-bt\");\r\n\r\n    this.login.onclick = () => {\r\n      this.login.style.borderColor = \"transparent\";\r\n    };\r\n\r\n    this.pass1.onclick = () => {\r\n      this.pass1.style.borderColor = \"transparent\";\r\n    };\r\n\r\n    this.pass2.onclick = () => {\r\n      this.pass2.style.borderColor = \"transparent\";\r\n    };\r\n\r\n    this.authBtn.onclick = () => {\r\n      this.authenticate();\r\n    }\r\n  }\r\n\r\n  async authenticate () {\r\n    if (!this.login.value) {\r\n      alert('Поле \"Логин\" пусто. Придумайте себе логин, чтобы продолжить.');\r\n      this.login.style.borderColor = \"#f26a6a\";\r\n      return;\r\n    }\r\n    else if (!this.pass1.value) {\r\n      alert('Поле \"Пароль\" пусто. Придумайте себе пароль, чтобы продолжить.');\r\n      this.pass1.style.borderColor = \"#f26a6a\";\r\n      return;\r\n    }\r\n    else if (!this.pass2.value) {\r\n        alert('Поле \"Пароль повторно\" пусто. Введите пароль повторно, чтобы продолжить.');\r\n        this.pass2.style.borderColor = \"#f26a6a\";\r\n        return;\r\n    }\r\n\r\n    if (this.pass1.value !== this.pass2.value) {\r\n      alert(\"Введённые Вами пароли не совпадают\");\r\n      return;\r\n    } \r\n\r\n    const authData = {\r\n      login: this.login.value,\r\n      pass1: this.pass1.value,\r\n      pass2: this.pass2.value,\r\n    }\r\n    \r\n    const resp = await request(\"/authenticate\", \"POST\", authData);\r\n    \r\n    if (resp.statusText == \"Inconsistent data\") {\r\n      alert(\"Отсутсвует логин или пароль\");\r\n      return;\r\n    } if (resp.statusText == \"Duplicate\") {\r\n      alert(\"Такой логин уже занят, придумайте другой\");\r\n      return;\r\n    } else if (resp.statusText == \"Passwords mismatch\")  {\r\n      alert(\"Пароли не совпадают\");\r\n      return;\r\n    } else if(resp.statusText == \"Authenticated\") {\r\n      alert(\"Аутентификация успешна, сейчас вы будете перенаправлены на страницу логина\");\r\n      window.location.href = \"/auth\";\r\n      return;\r\n    }\r\n    else {\r\n      alert(\"Ошибка аутентификации\");\r\n      return;\r\n    }\r\n    \r\n  };\r\n\r\n}","class Authorisate {\r\n\r\n  constructor() {\r\n    this.authBtn = document.getElementById(\"auth-bt\");\r\n    this.loginInpt = document.getElementById(\"login\");\r\n    this.passInpt = document.getElementById(\"pass\");\r\n\r\n    this.authBtn.onclick = () => {\r\n      this.authorise();\r\n    };\r\n  }\r\n\r\n\r\n  async authorise() {\r\n\r\n    if (!this.loginInpt.value || !this.passInpt.value) {\r\n      return alert(\"Отсутствует логин или пароль\");\r\n    }\r\n\r\n    const authData = {\r\n      login: this.loginInpt.value,\r\n      pass: this.passInpt.value\r\n    }\r\n\r\n    const resp = await request(\"/auth\", \"POST\", authData);\r\n    \r\n    if (resp.statusText == \"Check login and password\") {\r\n      alert(\"Неверный логин или пароль\");\r\n      return;\r\n    } else if (resp.statusText == \"Authorised\") {\r\n      alert(\"Авторизация успешна и будет действительна в течение 30 дней\");\r\n      window.location.href = \"/performances\";\r\n      return;\r\n    } else {\r\n      alert(\"Произошла ошибка во время авторизации\");\r\n      return;\r\n    }\r\n\r\n  }\r\n}","class Calendars {\r\n    constructor() {\r\n        this.stageEvTime = document.getElementById(\"stage-ev-time\");\r\n        this.stageEvMsg = document.getElementById(\"stage-ev-msg\");\r\n\r\n        this.tehEvTime = document.getElementById(\"teh-ev-time\");\r\n        this.tehEvMsg = document.getElementById(\"teh-ev-msg\");\r\n\r\n        this.loadEvTime = document.getElementById(\"load-ev-time\");\r\n        this.loadEvMsg = document.getElementById(\"load-ev-msg\");\r\n\r\n        this.stagePreloader = document.getElementById(\"stage-preloader\");\r\n        this.tehPreloader = document.getElementById(\"teh-preloader\");\r\n        this.loadPreloader = document.getElementById(\"load-preloader\");\r\n\r\n\r\n        this.stageEvURL = \"/api/ical/stage\";\r\n        this.tehEvURL = \"/api/ical/teh-job\";\r\n        this.loadEvURL = \"/api/ical/load\";\r\n\r\n        window.onload = () => {\r\n            this.updateAllEvents();\r\n        };\r\n    }\r\n\r\n    showTehPreloader() {\r\n        this.tehPreloader.style.display = \"block\";\r\n    }\r\n\r\n    showStagePreloader() {\r\n        this.stagePreloader.style.display = \"block\";\r\n    }\r\n\r\n    showLoadPreloader() {\r\n        this.loadPreloader.style.display = \"block\";\r\n    }\r\n\r\n    hideTehPreloader() {\r\n        this.tehPreloader.style.display = \"none\";\r\n    }\r\n\r\n    hideLoadPreloader() {\r\n        this.loadPreloader.style.display = \"none\";\r\n    }\r\n\r\n    hideStagePreloader() {\r\n        this.stagePreloader.style.display = \"none\";\r\n\r\n    }\r\n\r\n    // \"/api/ical/stage\"\r\n    async getCalEvents(url) {\r\n        const resp = await request(url, \"GET\");\r\n        if (resp.status !== 200) {\r\n            console.error(\"Error uploading calendar events\");\r\n        }\r\n        const data = await resp.json();\r\n        const evts = data.evts;\r\n        return evts;\r\n    }\r\n\r\n    getTodayEvents(events) {\r\n\r\n        const todayDate = new Date(Date.now());\r\n        const today = todayDate.getDate();\r\n        const month = todayDate.getMonth();\r\n        const year = todayDate.getFullYear();\r\n        const todayEvents = [];\r\n        \r\n\r\n        for(let key in events) {\r\n            const evStart = new Date(events[key].start);\r\n            if (evStart.getFullYear() == year && evStart.getMonth() == month && evStart.getDate() == today) {\r\n                todayEvents.push(events[key]);\r\n            }\r\n        }\r\n        return todayEvents;\r\n    }\r\n\r\n    getCurrentEvent(evts) {\r\n        const today = new Date(Date.now());\r\n\r\n        for (let i = 0; i < evts.length; i++) {\r\n            const evStart = new Date(evts[i].start).getTime();\r\n            const evEnd = new Date(evts[i].end).getTime();\r\n            const currTime = today.getTime();\r\n\r\n            if (evStart < currTime && evEnd > currTime) {\r\n                return evts[i];\r\n            }\r\n        }\r\n        return {summary: \"Нет данных\"};\r\n    }\r\n\r\n    async updateAllEvents() {\r\n        this.showStagePreloader();\r\n        const allStageEvents = await this.getCalEvents(this.stageEvURL);\r\n        this.showTehPreloader();\r\n        const allTehEvents = await this.getCalEvents(this.tehEvURL);\r\n        this.showLoadPreloader();\r\n        const allLoadEvents = await this.getCalEvents(this.loadEvURL);\r\n\r\n        const todayStageEvents = this.getTodayEvents(allStageEvents);\r\n        const currStageEvent = this.getCurrentEvent(todayStageEvents);\r\n        this.setStageEvent(currStageEvent);\r\n        this.hideStagePreloader();\r\n\r\n        const todayTehEvents = this.getTodayEvents(allTehEvents);\r\n        const currTehEvent = this.getCurrentEvent(todayTehEvents);\r\n        this.setTehEvent(currTehEvent);\r\n        this.hideTehPreloader();\r\n\r\n        const todayLoadEvents = this.getTodayEvents(allLoadEvents);\r\n        const currLoadEvent = this.getCurrentEvent(todayLoadEvents);\r\n        this.setLoadEvent(currLoadEvent);\r\n        this.hideLoadPreloader();\r\n        \r\n    }\r\n\r\n    setStageEvent(evt) {\r\n        this.stageEvMsg.textContent = evt.summary;\r\n        if (evt.start != undefined && evt.end != undefined) {\r\n            this.stageEvTime.textContent = \"Сейчас: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\r\n        } else {\r\n            this.stageEvTime.textContent = \"Сейчас: \";\r\n        }\r\n    }\r\n\r\n    setTehEvent(evt) {\r\n        this.tehEvMsg.textContent = evt.summary;\r\n        if (evt.start != undefined && evt.end != undefined) {\r\n            this.tehEvTime.textContent = \"Сейчас: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\r\n        } else {\r\n            this.tehEvTime.textContent = \"Сейчас: \";\r\n        }\r\n    }\r\n\r\n    setLoadEvent(evt) {\r\n        this.loadEvMsg.textContent = evt.summary;\r\n        if (evt.start != undefined && evt.end != undefined) {\r\n            this.loadEvTime.textContent = \"Сейчас: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\r\n        } else {\r\n            this.loadEvTime.textContent = \"Сейчас: \";\r\n        }\r\n    }\r\n\r\n    getRusTime(time) {\r\n        time = new Date(time);\r\n        let timeStr = time.getHours();\r\n        let minutes = time.getMinutes();\r\n        if ( minutes.toString().length == 1) {\r\n            minutes = minutes.toString() + \"0\";\r\n        }\r\n        timeStr += \":\" + minutes;\r\n        return timeStr;\r\n    }\r\n}","class iCal {\r\n    constructor() {\r\n\r\n        this.intId = null;\r\n        this.nowOnStage = document.getElementById(\"now-on-stage\");\r\n        this.nowOrNext = document.getElementById(\"now-or-next\");\r\n        window.onload = () => {\r\n            this.startPreloader();\r\n            this.startUpdatingStageEvents();\r\n        }\r\n    }\r\n\r\n    startUpdatingStageEvents() {\r\n        this.updateStageEvent();\r\n        setInterval(() => {\r\n            this.updateStageEvent();\r\n        }, 60000);\r\n    }\r\n\r\n    async updateStageEvent() {\r\n        const allEvents = await this.getCalEvents();\r\n        const currMonthEvents = this.getCurrMonthEvents(allEvents);    \r\n        const todayEvents = this.getTodayEvents(currMonthEvents);\r\n        const currEvent = this.getCurrEvent(todayEvents);\r\n        this.setEvent(currEvent);\r\n    }\r\n\r\n    async getCalEvents() {\r\n        const resp = await request(\"/api/ical/stage\", \"GET\");\r\n        if (resp.status !== 200) {\r\n            clearInterval(this.intId);\r\n            this.nowOnStage.textContent = \"? error ?\";\r\n        }\r\n        const data = await resp.json();\r\n        const evts = data.evts;\r\n        return evts;\r\n    }\r\n\r\n    getCurrYearEvents(events) {\r\n        const today = new Date(Date.now());\r\n        const year = today.getFullYear();\r\n        const currYearEvents = [];\r\n\r\n        for (let key in events) {\r\n\r\n            const calDataStart = new Date(events[key].start);\r\n\r\n            if (calDataStart.getFullYear() == year) {\r\n                currYearEvents.push(events[key]);\r\n            }\r\n        }\r\n        return currYearEvents;\r\n    }\r\n\r\n    getCurrMonthEvents(events) {\r\n        const today = new Date(Date.now());\r\n        const year = today.getFullYear();\r\n        const month = today.getMonth();\r\n        const currMonthEvents = [];\r\n\r\n        for (let key in events) {\r\n\r\n            const calDataStart = new Date(events[key].start);\r\n\r\n            if (calDataStart.getFullYear() == year && calDataStart.getMonth() == month) {\r\n                currMonthEvents.push(events[key]);\r\n            }\r\n        }\r\n        return currMonthEvents;\r\n    }\r\n\r\n    getTodayEvents(events) {\r\n        const today = new Date(Date.now());\r\n        const todayEvents = [];\r\n\r\n        for(let i = 0; i < events.length; i++) {\r\n            if (new Date(events[i].start).getDate() == today.getDate()) {\r\n                todayEvents.push(events[i]);\r\n            }\r\n        }\r\n        return todayEvents;\r\n    }\r\n\r\n    getCurrEvent(todayEvents) {\r\n        const today = new Date(Date.now());\r\n\r\n        for(let i = 0; i < todayEvents.length; i++) {\r\n            const evStart = new Date(todayEvents[i].start).getTime();\r\n            const evEnd = new Date(todayEvents[i].end).getTime();\r\n            const currTime = today.getTime();\r\n\r\n            if (evStart < currTime && evEnd > currTime) {\r\n                return todayEvents[i];\r\n            }\r\n        }\r\n\r\n\r\n        // Detect next event\r\n        let hour = today.getTime() + 60000 * 60;\r\n        for (let b = 0; b < 6; b++) {\r\n            hour += 60000 * 60;\r\n            for(let i = 0; i < todayEvents.length; i++) {\r\n                const evStart = new Date(todayEvents[i].start).getTime();\r\n                const currTime = today.getTime();\r\n    \r\n                hour += 60000 * 60;\r\n                if (evStart < (currTime + hour)) {\r\n                    return todayEvents[i];\r\n                }\r\n      \r\n            }\r\n        }\r\n        \r\n\r\n        return {summary: \"Нет данных\"};\r\n\r\n    }\r\n\r\n    getRusTime(time) {\r\n        time = new Date(time);\r\n        let timeStr = time.getHours();\r\n        let minutes = time.getMinutes();\r\n        if ( minutes.toString().length == 1) {\r\n            minutes = minutes.toString() + \"0\";\r\n        }\r\n        timeStr += \":\" + minutes;\r\n        return timeStr;\r\n    }\r\n\r\n    setEvent(evt) {\r\n        clearInterval(this.intId);\r\n \r\n        if (evt && (evt.summary != \"Нет данных\")) {\r\n            if (new Date(evt.start).getTime() > new Date(Date.now()).getTime()) {\r\n                // update Сейчас on Далее;\r\n                this.nowOrNext.textContent = \"Далее на сцене:\";\r\n            } else {\r\n                this.nowOrNext.textContent = \"Сейчас на сцене:\";\r\n            }\r\n            const evStart = new Date(evt.start);\r\n            const evEnd = new Date(evt.end);\r\n            const time = \"C \" + this.getRusTime(evStart) + \" до \" + this.getRusTime(evEnd);\r\n            this.nowOnStage.textContent = time + \" - \" + evt.summary;\r\n\r\n        } else {\r\n            this.nowOnStage.textContent = evt.summary;\r\n        }\r\n\r\n    }\r\n\r\n    startPreloader() {\r\n        let str = \".\";\r\n        this.intId = setInterval(() => {\r\n            str += \".\";\r\n            this.nowOnStage.textContent = str;\r\n            if (str.length > 2) str = \"\";\r\n        }, 500);\r\n    }\r\n}","class Performance {\r\n\r\n  // const n = this;\r\n  // (this.BASE_URL = e),\r\n  constructor(e = \"\", edit = \"false\") {\r\n\r\n    this.edit = edit;\r\n    this.pointsData = { leftSide: {}, rightSide: {} };\r\n\r\n    this.totalPointsNum = 0;\r\n    this.addPerfBtn = document.getElementById(\"add-performance-btn\");\r\n    this.preloader = document.getElementById(\"preloader\");\r\n    this.searchInpt = document.getElementById(\"search-perfs\");\r\n    this.backgroundModal = document.getElementById(\"background-modal\");\r\n    this.closeAddPerf = document.getElementById(\"close-adding-perf\");\r\n    this.savePerfBtn = document.getElementById(\"save-perf-btn\");\r\n    this.perfName = document.getElementById(\"perf-name\");\r\n    this.perfType = document.getElementById(\"perf-type\");\r\n    this.perfUrl = document.getElementById(\"perf-pic-url\");\r\n    this.perfActs = document.getElementById(\"perf-acts\");\r\n    this.perfPoints = document.getElementById(\"perf-points\");\r\n    this.perfNotes = document.getElementById(\"perf-notes\");\r\n    this.addActBtn = document.getElementById(\"add-act\");\r\n    this.searchResults = document.getElementById(\"search-results\");\r\n    this.closeCardPerf = document.getElementById(\"close-card-perf\");\r\n    this.backgroundCard = document.getElementById(\"card-back\");\r\n    this.addPointsBtn = document.getElementById(\"add-points\");\r\n    this.addRightPointBtn = document.getElementById(\"add-right-pt-btn\");\r\n    this.addLeftPointBtn = document.getElementById(\"add-left-pt-btn\");\r\n    this.backgroundPoints = document.getElementById(\"points-back\");\r\n    this.closeEditPointsBtn = document.getElementById(\"close-points-perf\");\r\n    this.userPointsBack = document.getElementById(\"user-points-back\");\r\n    this.closeUserPoints = document.getElementById(\"close-user-points\");\r\n    this.cardPerfName = document.getElementById(\"card-perf-name\");\r\n    this.cardPerfImg = document.getElementById(\"card-perf-img\");\r\n    this.cardPerfType = document.getElementById(\"card-perf-type\");\r\n    this.cardPerfActs = document.getElementById(\"card-perf-acts\");\r\n    this.cardPerfPoints = document.getElementById(\"card-perf-points\");\r\n    this.cardPerfNotes = document.getElementById(\"card-perf-notes\");\r\n    this.totalPointsSpan = document.getElementById(\"total-points-num\");\r\n\r\n    if (this.edit === \"true\") {\r\n      this.addPerfBtn.onclick = () => {\r\n        this.backgroundModal.style.display = \"block\";\r\n      };\r\n\r\n      this.closeAddPerf.onclick = () => {\r\n        this.backgroundModal.style.display = \"none\";\r\n      };\r\n\r\n      this.savePerfBtn.onclick = () => {\r\n        this.save(!1, \"create\");\r\n      };\r\n\r\n      this.perfName.onclick = () => {\r\n        this.perfName.style.borderColor = \"initial\";\r\n      };\r\n\r\n      this.perfType.onclick = () => {\r\n        this.perfType.style.borderColor = \"initial\";\r\n      };\r\n\r\n      this.addActBtn.onclick = () => {\r\n        this.addAct();\r\n      };\r\n\r\n      this.addRightPointBtn.onclick = () => {\r\n        this.addPoint(\"right\");\r\n      };\r\n\r\n      this.addLeftPointBtn.onclick = () => {\r\n        this.addPoint(\"left\");\r\n      };\r\n    }\r\n\r\n    this.closeEditPointsBtn.onclick = () => {\r\n      this.saveEditingPoints();\r\n    };\r\n\r\n    this.addPointsBtn.onclick = () => {\r\n      this.backgroundPoints.style.display = \"block\";\r\n      window.scrollTo(0, 0);\r\n    };\r\n\r\n    this.closeCardPerf.onclick = () => {\r\n      this.savePerfBtn.onclick = () => {\r\n        this.save(!1, \"create\");\r\n      };\r\n      this.backgroundCard.style.display = \"none\";\r\n    };\r\n\r\n    this.closeUserPoints.onclick = () => {\r\n      this.userPointsBack.style.display = \"none\";\r\n    };\r\n\r\n    this.searchInpt.oninput = () => {\r\n      if (this.searchInpt.value && this.searchInpt.value != \"\") {\r\n        this.clearDomElement(this.searchResults, async () => {\r\n\r\n          if (/^\\s*$/.test(this.searchInpt.value)) {\r\n            this.fillSearchResults([]);\r\n          }\r\n          else {\r\n\r\n            const query = {\r\n              query: this.searchInpt.value\r\n            }\r\n\r\n            this.preloader.style.display = \"block\";\r\n\r\n            const resp = await request(\"/perf-search\", \"POST\", query);\r\n            if (resp.statusText == \"OK\") {\r\n              const data = await resp.json();\r\n              this.fillSearchResults(data.perfs);\r\n              this.preloader.style.display = \"none\";\r\n            } else {\r\n              if (resp === \"error\")\r\n                return this.preloader.style.display = \"none\";\r\n              if (resp == \"econn\") {\r\n                this.preloader.style.display = \"none\";\r\n                const div = document.createElement(\"div\");\r\n                div.setAttribute(\"class\", \"perf-name-found nothing-found\");\r\n                div.textContent = \"Проверьте интернет соединение\";\r\n                if (!this.searchResults.childNodes[0]) {\r\n                  this.searchResults.appendChild(div);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        })\r\n      }\r\n      else {\r\n        setTimeout(() => {\r\n          this.clearDomElement(this.searchResults, () => { });\r\n        }, 100);\r\n      }\r\n    };\r\n\r\n  }\r\n\r\n\r\n  getActsEnding = num => {\r\n    let actsNum = 1 == num ? num + \" акт\" : num > 1 && num < 5 ? num + \" акта\" : num + \"актов\";\r\n    return actsNum;\r\n  };\r\n\r\n  showPerformanceCard = () => {\r\n    this.backgroundCard.style.display = \"block\";\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  showUsualPointsTable = () => {\r\n    this.userPointsBack.style.display = \"block\";\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  clearDomElement = (element, cb) => {\r\n    while (element.firstChild) {\r\n      element.firstChild.remove();\r\n    }\r\n    return cb();\r\n  };\r\n\r\n  fillCardPerformanceActs = (perfType, acts) => {\r\n    if (perfType === \"ballet\") {\r\n      this.cardPerfType.textContent = `Балет, ${this.getActsEnding(acts.length)}`;\r\n    } else if (perfType === \"opera\") {\r\n      this.cardPerfType.textContent = `Опера, ${this.getActsEnding(acts.length)}`;\r\n    }\r\n\r\n    this.clearDomElement(this.cardPerfActs, () => {\r\n      for (let i = 0; i < acts.length; i++) {\r\n        let div = document.createElement(\"div\"),\r\n          s1 = document.createElement(\"span\"),\r\n          s2 = document.createElement(\"span\");\r\n\r\n        div.setAttribute(\"class\", \"act-line\");\r\n        s1.textContent = `${i + 1} Акт:`;\r\n        s2.textContent = `${acts[i]}`;\r\n        div.appendChild(s1);\r\n        div.appendChild(s2);\r\n        this.cardPerfActs.appendChild(div);\r\n      }\r\n    });\r\n  };\r\n\r\n  fillCardPerformancePoints = (points) => {\r\n\r\n    if (points) {\r\n\r\n      if (this.cardPerfPoints.childNodes.length == 2) {\r\n        this.cardPerfPoints.childNodes[1].remove()\r\n      }\r\n      else if (this.cardPerfPoints.childNodes.length == 3) {\r\n        this.cardPerfPoints.childNodes[1].remove();\r\n        this.cardPerfPoints.childNodes[1].remove()\r\n      }\r\n\r\n      const p = document.createElement(\"p\");\r\n      p.setAttribute(\"class\", \"total-points-usr\");\r\n      p.textContent = `Всего: ${this.countPointsNum(points)} шт.`;\r\n      this.cardPerfPoints.appendChild(p),\r\n        this.fillUserPointsTable(points);\r\n\r\n      const btn = document.createElement(\"button\");\r\n      btn.setAttribute(\"class\", \"showPoints-btn\");\r\n      btn.textContent = \"Просмотр\";\r\n      btn.onclick = () => {\r\n        this.userPointsBack.style.height = this.backgroundCard.offsetHeight + \"px\";\r\n        this.showUsualPointsTable();\r\n      }\r\n      this.cardPerfPoints.appendChild(btn);\r\n\r\n    } else if (this.cardPerfPoints.childNodes.length == 3) {\r\n      this.cardPerfPoints.childNodes[1].remove();\r\n      this.cardPerfPoints.childNodes[1].remove();\r\n      const i = document.createElement(\"i\");\r\n      i.textContent = \"– Отсутствуют\";\r\n      this.cardPerfPoints.appendChild(i);\r\n    }\r\n  };\r\n\r\n  fillPerformanceCard = (perf) => {\r\n\r\n    this.cardPerfName.textContent = perf.name;\r\n\r\n    if (perf.imgUrl) {\r\n      this.cardPerfImg.src = window.location.origin + \"/static/imgs/performance-imgs/\" + perf.imgUrl;\r\n      this.cardPerfImg.style.display = \"inline-block\";\r\n    } else {\r\n      this.cardPerfImg.src = window.location.origin + \"/static/imgs/performance-imgs/no-photo.png\";\r\n      this.cardPerfImg.style.display = \"inline-block\";\r\n    }\r\n\r\n    this.fillCardPerformanceActs(perf.type, perf.acts);\r\n    this.fillCardPerformancePoints(perf.points);\r\n\r\n    if (perf.notes != \"\") {\r\n      this.cardPerfNotes.innerHTML = perf.notes;\r\n    } else {\r\n      this.cardPerfNotes.textContent = \"– Отсутствуют\";\r\n    }\r\n\r\n    if (this.edit === \"true\") {\r\n      let btn = document.createElement(\"button\");\r\n      btn.setAttribute(\"class\", \"edit-btn\");\r\n      btn.textContent = \"Редактировать\";\r\n      btn.onclick = () => {\r\n        this.openEdit(perf);\r\n      };\r\n\r\n      let delBtn = document.createElement(\"button\");\r\n      delBtn.setAttribute(\"class\", \"rm-perf-btn\");\r\n      delBtn.textContent = \"Удалить\";\r\n      delBtn.onclick = () => {\r\n        if (confirm(`Вы действительно хотите удалить спектакль \"${perf.name}\" из базы?`)) {\r\n          this.save(perf._id, \"remove\");\r\n        }\r\n      };\r\n\r\n      if (this.cardPerfName.parentElement.childNodes.length == 4) {\r\n        this.cardPerfName.parentElement.appendChild(btn);\r\n        this.cardPerfName.parentElement.appendChild(delBtn)\r\n      } else {\r\n        this.cardPerfName.parentElement.childNodes[4].remove();\r\n        this.cardPerfName.parentElement.childNodes[4].remove();\r\n        this.cardPerfName.parentElement.appendChild(btn);\r\n        this.cardPerfName.parentElement.appendChild(delBtn);\r\n      }\r\n    }\r\n\r\n    this.savePerfBtn.onclick = () => {\r\n      this.save(perf._id, \"update\");\r\n    };\r\n  };\r\n\r\n  fillSearchResults = results => {\r\n    if (results.length == 0) {\r\n      const div = document.createElement(\"div\");\r\n      div.setAttribute(\"class\", \"perf-name-found nothing-found\");\r\n      div.textContent = \"Ничего не найдено\";\r\n      if (!this.searchResults.childNodes[0]) {\r\n        this.searchResults.appendChild(div);\r\n      }\r\n    } else\r\n      for (let i = 0; i < results.length; i++) {\r\n        let div = document.createElement(\"div\");\r\n        div.setAttribute(\"class\", \"perf-name-found\");\r\n        div.textContent = results[i].name;\r\n\r\n        div.onclick = () => {\r\n          this.fillPerformanceCard(results[i]);\r\n          this.showPerformanceCard();\r\n        };\r\n        for (let b = 0; b < this.searchResults.childNodes.length; b++) {\r\n          if (this.searchResults.childNodes[b].textContent == div.textContent) {\r\n            return;\r\n          }\r\n        }\r\n        this.searchResults.appendChild(div);\r\n\r\n      }\r\n  };\r\n\r\n\r\n  openEdit = perf => {\r\n    // e = perf;\r\n    this.pointsData = perf.points;\r\n    this.backgroundCard.style.display = \"none\";\r\n    this.backgroundModal.style.display = \"block\";\r\n    this.perfName.value = perf.name;\r\n    this.perfType.value = perf.type;\r\n    this.perfUrl.value = perf.imgUrl;\r\n\r\n    if (perf.acts.length > 0) {\r\n      // let t, o, i, s, l;\r\n      let actLine, sp1, inpt, sp2, btn;\r\n\r\n      this.perfActs.innerHTML = \"\";\r\n      for (let i = 0; i < perf.acts.length; i++) {\r\n        actLine = document.createElement(\"div\");\r\n        actLine.setAttribute(\"class\", \"act-line\");\r\n        sp1 = document.createElement(\"span\");\r\n        sp1.setAttribute(\"class\", \"perf-act\");\r\n        sp1.textContent = i + 1 + \":\";\r\n        actLine.appendChild(sp1);\r\n        inpt = document.createElement(\"input\");\r\n        inpt.setAttribute(\"class\", \"act-time\");\r\n        inpt.setAttribute(\"type\", \"text\");\r\n        inpt.setAttribute(\"placeholder\", \"1ч 15мин\");\r\n        inpt.value = perf.acts[i];\r\n        actLine.appendChild(inpt);\r\n\r\n        if (i == 0) {\r\n          btn = document.createElement(\"button\");\r\n          btn.setAttribute(\"class\", \"add-mini-btn\");\r\n          btn.textContent = \"+\";\r\n          btn.onclick = () => {\r\n            this.addAct();\r\n          }\r\n          actLine.appendChild(btn)\r\n        } else {\r\n          sp2 = document.createElement(\"span\");\r\n          sp2.setAttribute(\"class\", \"del-act-btn\");\r\n          sp2.textContent = \"X\";\r\n          sp2.onclick = e => {\r\n            e.target.parentElement.remove();\r\n          };\r\n          actLine.appendChild(sp2);\r\n          // em = document.createElement(\"button\");\r\n          // sp1.setAttribute(\"class\", \"perf-act\");\r\n        }\r\n        this.perfActs.appendChild(actLine);\r\n      }\r\n\r\n      this.fillEditCardPointsDiv(perf.points);\r\n      this.fillPointsEditModal(perf.points);\r\n      this.perfNotes.value = perf.notes;\r\n      this.savePerfBtn.textContent = \"Сохранить изменения\";\r\n      this.savePerfBtn.onclick = () => {\r\n        this.save(perf._id, \"update\");\r\n      };\r\n    }\r\n  };\r\n\r\n  fillEditCardPointsDiv = points => {\r\n    // e = points\r\n    if (points) {\r\n      this.perfPoints.childNodes[0].remove();\r\n      this.perfPoints.childNodes[0].remove();\r\n      let span = document.createElement(\"span\"); // t\r\n      span.setAttribute(\"class\", \"points-number\");\r\n      span.textContent = this.countPointsNum(points) + \" шт.\";\r\n      let span2 = document.createElement(\"span\"); // o\r\n      span2.setAttribute(\"class\", \"showPoints-btn\");\r\n      span2.textContent = \"Редактор\";\r\n      span2.onclick = () => {\r\n        this.fillPointsEditModal(points);\r\n        this.backgroundPoints.style.height = this.backgroundModal.offsetHeight + \"px\";\r\n        this.backgroundPoints.style.display = \"block\";\r\n        window.scrollTo(0, 0);\r\n      };\r\n      this.perfPoints.appendChild(span),\r\n        this.perfPoints.appendChild(span2);\r\n    }\r\n  };\r\n\r\n  isEmpty = obj => {\r\n    for (var prop in obj)\r\n      if (obj.hasOwnProperty(prop)) return false;\r\n    return JSON.stringify(obj) === JSON.stringify({});\r\n  };\r\n\r\n  fillPointsEditModal = (points = {}) => {\r\n    // e = points\r\n    // if (!points) {\r\n    //   points = {};\r\n    // }\r\n\r\n    // let t, o, i, s, l, a = document.getElementById(\"left-table\").firstChild,\r\n    // d = document.getElementById(\"right-table\").firstChild;\r\n    let trLeft, trRight, td1, td2, td3;\r\n\r\n    const leftTableFirstChild = document.getElementById(\"left-table\").firstChild;\r\n    const rightTableFirstChild = document.getElementById(\"right-table\").firstChild;\r\n\r\n    while (leftTableFirstChild.childNodes.length > 1) {\r\n      leftTableFirstChild.childNodes[1].remove();\r\n    }\r\n    while (rightTableFirstChild.childNodes.length > 1) {\r\n      rightTableFirstChild.childNodes[1].remove();\r\n    }\r\n\r\n    this.totalPointsNum = this.countPointsNum(points);\r\n\r\n    document.getElementById(\"total-points-num\").textContent = this.countPointsNum(points) + \" шт.\";\r\n\r\n    for (const leftPoint in points.leftSide) {\r\n      if (this.isEmpty(points.leftSide[leftPoint])) continue;\r\n      // let d, r, c\r\n      let input, sp, input2;\r\n      trLeft = document.createElement(\"tr\");\r\n      trLeft.setAttribute(\"class\", \"left-point-rope\");\r\n      trLeft.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      input = document.createElement(\"input\");\r\n      input.setAttribute(\"type\", \"number\");\r\n      input.setAttribute(\"class\", \"lines\");\r\n      input.value = points.leftSide[leftPoint].stalls.split(\"/\")[0];\r\n      sp = document.createElement(\"span\");\r\n      sp.textContent = \"/\";\r\n      input2 = document.createElement(\"input\");\r\n      input2.setAttribute(\"type\", \"number\");\r\n      input2.setAttribute(\"class\", \"lines\");\r\n      input2.value = points.leftSide[leftPoint].stalls.split(\"/\")[1];\r\n      td1.appendChild(input);\r\n      td1.appendChild(sp);\r\n      td1.appendChild(input2);\r\n      let input3 = document.createElement(\"input\");\r\n      input3.setAttribute(\"type\", \"number\");\r\n      input3.setAttribute(\"class\", \"meters\");\r\n      input3.value = points.leftSide[leftPoint].meters;\r\n      td2.appendChild(input3);\r\n      let input4 = document.createElement(\"input\");\r\n      input4.setAttribute(\"type\", \"number\");\r\n      input4.setAttribute(\"class\", \"machine\");\r\n      input4.value = points.leftSide[leftPoint].machine;\r\n      td3.appendChild(input4);\r\n      let delSpan = document.createElement(\"span\");\r\n      delSpan.setAttribute(\"class\", \"del-point-rope\");\r\n      delSpan.textContent = \"X\";\r\n      delSpan.onclick = e => {\r\n        if (confirm(\"Удалить эту точку подвеса?\")) {\r\n          e.target.parentElement.parentElement.remove();\r\n          this.totalPointsNum--;\r\n          this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n        }\r\n      };\r\n\r\n      td3.appendChild(delSpan);\r\n      trLeft.appendChild(td1);\r\n      trLeft.appendChild(td2);\r\n      trLeft.appendChild(td3);\r\n      leftTableFirstChild.appendChild(trLeft);\r\n    }\r\n\r\n    for (const rightPoint in points.rightSide) {\r\n      if (this.isEmpty(points.rightSide[rightPoint])) continue;\r\n      // let a, r, c;\r\n      let input, sp, input2;\r\n      trRight = document.createElement(\"tr\");\r\n      trRight.setAttribute(\"class\", \"right-point-rope\");\r\n      trRight.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      input = document.createElement(\"input\");\r\n      input.setAttribute(\"type\", \"number\");\r\n      input.setAttribute(\"class\", \"lines\");\r\n      input.value = points.rightSide[rightPoint].stalls.split(\"/\")[0];\r\n      sp = document.createElement(\"span\");\r\n      sp.thenextContent = \"/\";\r\n      input2 = document.createElement(\"input\");\r\n      input2.setAttribute(\"type\", \"number\");\r\n      input2.setAttribute(\"class\", \"lines\");\r\n      input2.value = points.rightSide[rightPoint].stalls.split(\"/\")[1];\r\n      td1.appendChild(input);\r\n      td1.appendChild(sp);\r\n      td1.appendChild(input2);\r\n\r\n      let input3 = document.createElement(\"input\");\r\n      input3.setAttribute(\"type\", \"number\");\r\n      input3.setAttribute(\"class\", \"meters\");\r\n      input3.value = points.rightSide[t].meters;\r\n      td2.appendChild(input3);\r\n\r\n      let input4 = document.createElement(\"input\");\r\n      input4.setAttribute(\"type\", \"number\");\r\n      input4.setAttribute(\"class\", \"machine\");\r\n      input4.value = points.rightSide[rightPoint].machine;\r\n      td3.appendChild(input4);\r\n\r\n      let delSpan = document.createElement(\"span\");\r\n      delSpan.setAttribute(\"class\", \"del-point-rope\");\r\n      delSpan.textContent = \"X\";\r\n      delSpan.onclick = e => {\r\n        if (confirm(\"Удалить эту точку подвеса?\")) {\r\n          e.target.parentElement.parentElement.remove();\r\n          this.totalPointsNum--;\r\n          this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n        }\r\n\r\n        td3.appendChild(delSpan);\r\n        trLeft.appendChild(td1);\r\n        trLeft.appendChild(td2);\r\n        trLeft.appendChild(td3);\r\n        rightTableFirstChild.appendChild(trRight);\r\n      }\r\n    }\r\n  };\r\n\r\n  countPointsNum = points => {\r\n    let num = 0;\r\n    if (!points) return 0;\r\n    for (let key in points.leftSide) {\r\n      if (!this.isEmpty(points.leftSide[key])) {\r\n        num++;\r\n      }\r\n    }\r\n    for (let key in points.rightSide) {\r\n      if (!this.isEmpty(points.rightSide[key])) {\r\n        num++;\r\n      }\r\n    }\r\n    return num;\r\n  };\r\n\r\n  fillUserPointsTable = points => {\r\n    // e = points\r\n    // let t-tr, o, i-td1, s-td2, l-td3,\r\n    let trLeft, trRight, td1, td2, td3;\r\n    // a = document.getElementById(\"left-usr-table\").firstChild,\r\n    // d = document.getElementById(\"right-usr-table\").firstChild;\r\n\r\n    let leftTableFirstChild = document.getElementById(\"left-usr-table\").firstChild;\r\n    let rightTableFirstChild = document.getElementById(\"right-usr-table\").firstChild;\r\n\r\n    while (leftTableFirstChild.childNodes.length > 1) leftTableFirstChild.childNodes[1].remove();\r\n    while (rightTableFirstChild.childNodes.length > 1) rightTableFirstChild.childNodes[1].remove();\r\n\r\n    document.getElementById(\"total-user-points\").textContent = this.countPointsNum(points) + \" шт.\";\r\n\r\n    // n - point\r\n    for (const leftPoint in points.leftSide) {\r\n      trLeft = document.createElement(\"tr\");\r\n      trLeft.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      td1.textContent = points.leftSide[leftPoint].stalls;\r\n      trLeft.appendChild(td1);\r\n      td2.textContent = points.leftSide[leftPoint].meters;\r\n      trLeft.appendChild(td2);\r\n      td3.textContent = points.leftSide[leftPoint].machine;\r\n      trLeft.appendChild(td3);\r\n      leftTableFirstChild.appendChild(trLeft);\r\n    }\r\n    for (const rightPoint in points.rightSide) {\r\n      trRight = document.createElement(\"tr\");\r\n      trRight.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      td1.textContent = points.rightSide[rightPoint].stalls;\r\n      trRight.appendChild(td1);\r\n      td2.textContent = points.rightSide[rightPoint].meters;\r\n      trRight.appendChild(td2);\r\n      td3.textContent = points.rightSide[rightPoint].machine;\r\n      trRight.appendChild(td3);\r\n      rightTableFirstChild.appendChild(trRight);\r\n    }\r\n  };\r\n\r\n  saveEditingPoints = () => {\r\n    const left = document.getElementsByClassName(\"left-point-rope\"); // e\r\n    const right = document.getElementsByClassName(\"right-point-rope\"); // t\r\n\r\n    this.pointsData = { leftSide: {}, rightSide: {} };\r\n\r\n    if (left.length != 0 || right.length != 0) {\r\n      for (let t = 0; t < left.length; t++) {\r\n        this.pointsData.leftSide[\"point\" + (t + 1)] = {};\r\n        for (let o = 1; o < left[t].childNodes.length; o++)\r\n          if (o == 1) {\r\n            let first = left[t].childNodes[o].firstChild, // i\r\n              last = left[t].childNodes[o].lastChild; // s\r\n            if (!first.value) {\r\n              ;\r\n              first.parentElement.style.backgroundColor = \"red\";\r\n              first.onclick = () => {\r\n                first.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            if (!last.value) {\r\n              last.parentElement.style.backgroundColor = \"red\";\r\n              last.onclick = () => {\r\n                last.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.leftSide[\"point\" + (t + 1)].stalls = first.value + \"/\" + last.value;\r\n          } else if (o == 2) {\r\n            if (!left[t].childNodes[o].firstChild.value) {\r\n              left[t].childNodes[o].firstChild.parentElement.style.backgroundColor = \"red\";\r\n              left[t].childNodes[o].firstChild.onclick = () => {\r\n                left[t].childNodes[o].firstChild.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.leftSide[\"point\" + (t + 1)].meters = left[t].childNodes[o].firstChild.value;\r\n          } else if (o == 3) {\r\n            this.pointsData.leftSide[\"point\" + (t + 1)].machine = left[t].childNodes[o].firstChild.value;\r\n          }\r\n      }\r\n\r\n      for (let e = 0; e < right.length; e++) {\r\n        this.pointsData.rightSide[\"point\" + (e + 1)] = {};\r\n\r\n        for (let o = 1; o < right[e].childNodes.length; o++) {\r\n          if (o == 1) {\r\n            let first = right[e].childNodes[o].firstChild, // i\r\n              last = right[e].childNodes[o].lastChild; // s\r\n            if (!first.value) {\r\n              first.parentElement.style.backgroundColor = \"red\";\r\n              first.onclick = () => {\r\n                first.parentElement.style.backgroundColor = \"initial\";\r\n              };\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            if (!last.value) {\r\n              last.parentElement.style.backgroundColor = \"red\";\r\n              last.onclick = () => {\r\n                last.parentElement.style.backgroundColor = \"initial\";\r\n              };\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.rightSide[\"point\" + (e + 1)].stalls = first.value + \"/\" + last.value;\r\n          } else if (o == 2) {\r\n            if (!right[e].childNodes[o].firstChild.value) {\r\n              right[e].childNodes[o].firstChild.parentElement.style.backgroundColor = \"red\";\r\n              right[e].childNodes[o].firstChild.onclick = () => {\r\n                right[e].childNodes[o].firstChild.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.rightSide[\"point\" + (e + 1)].meters = right[e].childNodes[o].firstChild.value;\r\n          } else if (o == 3) {\r\n            this.pointsData.rightSide[\"point\" + (e + 1)].machine = t[e].childNodes[o].firstChild.value;\r\n          }\r\n        }\r\n      }\r\n      this.fillEditCardPointsDiv(this.pointsData);\r\n      this.backgroundPoints.style.display = \"none\";\r\n    } else {\r\n      this.backgroundPoints.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  addAct = () => {\r\n    let num = this.perfActs.childNodes.length + 1, // t\r\n      div = document.createElement(\"div\"), // o\r\n      sp = document.createElement(\"span\"), // i\r\n      inpt = document.createElement(\"input\"), // s\r\n      sp2 = document.createElement(\"span\"); // l\r\n\r\n    div.setAttribute(\"class\", \"act-line\");\r\n    sp.setAttribute(\"class\", \"perf-act\");\r\n    sp.setAttribute(\"id\", \"perf-act\" + t);\r\n    sp.textContent = num + \":\";\r\n    inpt.setAttribute(\"type\", \"text\");\r\n    inpt.setAttribute(\"class\", \"act-time\");\r\n    inpt.setAttribute(\"id\", \"act-time\" + num);\r\n    inpt.setAttribute(\"placeholder\", \"1ч 15мин\");\r\n    sp2.setAttribute(\"id\", \"del-act-btn\" + t);\r\n    sp2.setAttribute(\"class\", \"del-act-btn\");\r\n    sp2.textContent = \"X\";\r\n    sp2.onclick = () => {\r\n      sp2.parentElement.remove();\r\n    };\r\n    div.appendChild(sp);\r\n    div.appendChild(inpt);\r\n    div.appendChild(sp2);\r\n    this.perfActs.insertBefore(div, this.perfActs.childNodes[e]);\r\n  };\r\n\r\n  checkActs = () => {\r\n    let childLen = this.perfActs.childNodes.length, //e\r\n      children = this.perfActs.childNodes; //t\r\n    for (let i = 0; i < childLen; i++) { // n\r\n      if (!children[i].childNodes[1].value) {\r\n        children[i].childNodes[1].style.borderColor = \"red\"\r\n        children[i].childNodes[1].onclick = () => {\r\n          return children[i].childNodes[1].style.borderColor = \"initial\";\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  inputsValid = () => {\r\n    if (!this.perfName.value) {\r\n      this.perfName.style.borderColor = \"red\"\r\n      return false;\r\n    } else if (!this.perfType.value) {\r\n      this.perfType.style.borderColor = \"red\"\r\n      return false;\r\n    } else if (!this.checkActs()) {\r\n      this.perfActs.borderColor = \"red\";\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  save = async (perfId, action) => { // e , t\r\n    if (\"update\" === action || \"create\" === action) {\r\n      if (this.inputsValid()) {\r\n        let perfName = this.perfName.value, //o\r\n          perfType = this.perfType.value, // i\r\n          perfUrl = this.perfUrl.value, // s\r\n          acts = [], // l\r\n          perfNotes = this.perfNotes.value; // a\r\n\r\n\r\n        for (let e = 0; e < this.perfActs.childNodes.length; e++) {\r\n          if (this.perfActs.childNodes[e].childNodes[1].value.includes(\",\")) {\r\n            return this.perfActs.childNodes[e].childNodes[1].style.borderColor = \"red\";\r\n          }\r\n          acts.push(this.perfActs.childNodes[e].childNodes[1].value);\r\n        }\r\n        if (perfId && action === \"update\") {\r\n          // let query = `name=${perfName}&type=${perfType}&imgUrl=${perfUrl}&acts=${acts}&points=${JSON.stringify()}&notes=${perfNotes}&perfId=${perfId}&action=${action}`;\r\n          let data = {\r\n            name: perfName,\r\n            type: perfType,\r\n            imgUrl: perfUrl,\r\n            acts: acts,\r\n            points: this.pointsData,\r\n            notes: perfNotes,\r\n            perfId: perfId,\r\n            action: action\r\n          }\r\n\r\n          const resp = await request(\"/performances\", \"POST\", data);\r\n\r\n          if (resp.statusText == \"OK\") {\r\n            alert(\"Спектакль обновлен успешно\");\r\n            this.backgroundModal.style.display = \"none\";\r\n            window.location.reload();\r\n            return;\r\n          } else {\r\n            alert(\"Ошибка во время сохранения\");\r\n            return;\r\n          }\r\n\r\n        } else if (!perfId && action == \"create\") {\r\n          let data = {\r\n            name: perfName,\r\n            type: perfType,\r\n            imgUrl: perfUrl,\r\n            acts: acts,\r\n            points: this.pointsData,\r\n            notes: perfNotes,\r\n            perfId: perfId,\r\n            action: action\r\n          }\r\n\r\n          const resp = await request(\"/performances\", \"POST\", data);\r\n          if (resp.statusText == \"OK\") {\r\n            alert(\"Новый спектакль успешно добавлен\");\r\n            window.location.reload();\r\n          }\r\n          else {\r\n            alert(\"Ошибка во время создания\");\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    } else if (action === \"remove\") {\r\n      let dt = {\r\n        perfId: perfId,\r\n        action: action\r\n      }\r\n      let resp = await request(\"/performances\", \"POST\", dt);\r\n      if (resp.statusText == \"OK\") {\r\n        alert(\"Спектакль успешно удалён\");\r\n        window.location.reload();\r\n        return;\r\n      }\r\n      else {\r\n        alert(\"Ошибка удаления\");\r\n        return;\r\n      };\r\n    }\r\n  };\r\n\r\n  addPoint = point => {\r\n    // e - point\r\n    // t-tr, o-sp\r\n\r\n    const tr = document.createElement(\"tr\");\r\n    const sp = document.createElement(\"span\");\r\n\r\n    sp.textContent = \"/\";\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      let td = document.createElement(\"td\");\r\n\r\n      if (i == 1) {\r\n        for (let b = 0; b < 2; b++) {\r\n          let inpt = document.createElement(\"input\");\r\n          inpt.setAttribute(\"type\", \"number\");\r\n          inpt.setAttribute(\"class\", \"lines\");\r\n          if (b == 1) {\r\n            td.appendChild(sp);\r\n          }\r\n          td.appendChild(inpt);\r\n        }\r\n      }\r\n\r\n      else if (i == 2) {\r\n        let inpt = document.createElement(\"input\");\r\n        inpt.setAttribute(\"type\", \"number\");\r\n        inpt.setAttribute(\"class\", \"meters\");\r\n        td.appendChild(inpt);\r\n      } else if (i == 3) {\r\n        // e-inpt, t -sp\r\n        let inpt = document.createElement(\"input\");\r\n        let sp = document.createElement(\"span\");\r\n        sp.textContent = \"X\";\r\n        sp.setAttribute(\"class\", \"del-point-rope\");\r\n        sp.onclick = e => {\r\n          if (confirm(\"Удалить эту точку подвеса?\")) {\r\n            e.target.parentElement.parentElement.remove();\r\n            this.totalPointsNum--;\r\n            this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n          }\r\n        }\r\n        inpt.setAttribute(\"type\", \"number\");\r\n        inpt.setAttribute(\"class\", \"machine\");\r\n        td.appendChild(inpt);\r\n        td.appendChild(sp);\r\n      }\r\n      tr.appendChild(td);\r\n    }\r\n    tr.setAttribute(\"class\", point + \"-point-rope\");\r\n    document.getElementById(point + \"-table\").appendChild(tr);\r\n    this.totalPointsNum++;\r\n    this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n  };\r\n}\r\n","class Repertuar {\r\n  constructor() {\r\n    this.rollLine = document.getElementById(\"event-container\");\r\n    this.todaySquare = document.getElementById(`${new Date(Date.now()).getMonth()}-${new Date(Date.now()).getDate()}`);\r\n    this.target = this.todaySquare.offsetLeft - 200;\r\n\r\n    window.onload = () => {\r\n      this.startAnimatingScroll();\r\n      // this.rollLine.scrollLeft = this.todaySquare.offsetLeft - 200;\r\n    };\r\n  }\r\n\r\n  startAnimatingScroll() {\r\n    let speed = 10;\r\n    let d = 1;\r\n    let id = setInterval(() => {\r\n      if (this.rollLine.scrollLeft < this.target) {\r\n        d++;\r\n        this.rollLine.scrollLeft += 500 + (speed*d);\r\n      } else {\r\n        clearInterval(id);\r\n      }\r\n    }, 50);\r\n  }\r\n}\r\n","\r\nasync function request(url, method, data) {\r\n  const response = await fetch(url, {\r\n    method: method,\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body:  JSON.stringify(data) \r\n  });\r\n  return response;\r\n}"]}