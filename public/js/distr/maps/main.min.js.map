{"version":3,"sources":["ajax.js","auth.js","authenticate.js","performances.js","skedjs.js"],"names":["request","method","url","query","cb","xhttp","XMLHttpRequest","onreadystatechange","this","readyState","status","console","log","open","setRequestHeader","send","Auth","_this","authBt","document","getElementById","login","pass","onclick","value","alert","res","window","location","href","Authenticate","pass1","pass2","authenBt","style","borderColor","q","statusText","Performance","pointsData","leftSide","rightSide","totalPointsNum","addPerfBtn","searchInpt","backgroundModal","closeAddPerf","savePerfBtn","perfName","perfType","perfUrl","perfActs","perfPoints","perfNotes","addActBtn","searchResults","closeCardPerf","backgroundCard","addPointsBtn","addRightPointBtn","addLeftPointBtn","backgroundPoints","closeEditPointsBtn","userPointsBack","closeUserPoints","cardPerfName","cardPerfImg","cardPerfType","cardPerfActs","cardPerfPoints","cardPerfNotes","totalPointsSpan","getActsEnding","actsNum","ending","showPerformanceCard","display","scrollTo","showUsualPointsTable","fillCardPerformanceActs","type","acts","textContent","length","clearDomElement","e","actLine","createElement","span1","span2","setAttribute","appendChild","fillCardPerformancePoints","points","childNodes","removeChild","totalPoints","countPointsNum","fillUserPointsTable","btn","userPerfCardBack","height","offsetHeight","i","fillPerformanceCard","performance","name","imgUrl","src","notes","innerHTML","admin","editBt","openEdit","rmBt","confirm","save","_id","parentElement","remove","elem","firstChild","fillSearchResults","results","srchResults","el","b","oninput","srchQuery","test","JSON","parse","responseText","perfs","setTimeout","sp","ip","rm","add","addAct","target","em","fillEditCardPointsDiv","fillPointsEditModal","nSp","openEditTable","isEmpty","obj","prop","hasOwnProperty","stringify","leftTable","rightTable","trLeft","trRight","td2","td3","td4","numTotal","key1","inpt1","brSp","inpt2","stalls","split","inptMeters","meters","inptMach","machine","delsp","key2","totalNum","leftUsrTable","rightUsrTable","saveEditingPoints","leftPoints","getElementsByClassName","rightPoints","line1","line2","lastChild","backgroundColor","addPoint","childNum","nextChildNum","spanAct","timeInpt","delBtn","insertBefore","checkActs","children","inputsValid","perfId","action","includes","push","reload","perfData","side","tr","brSpan","td","inpt","delSp","SkedApp","init","$","change"],"mappings":"AAAA,SAAAA,QAAAC,EAAAC,EAAAC,EAAAC,GACA,MAAAC,EAAA,IAAAC,eACAD,EAAAE,mBAAA,WACA,GAAAC,KAAAC,YAAA,KAAAD,KAAAE,QACAN,EAAA,UAAAI,MACAG,QAAAC,IAAA,QACA,GAAAJ,KAAAC,YAAA,KAAAD,KAAAE,QACAN,EAAA,QAAAI,OAGAH,EAAAQ,KAAAZ,EAAAC,GAAA,IAEA,IAAAC,GACAE,EAAAS,iBAAA,eAAA,qCACAT,EAAAU,KAAAZ,IAEAE,EAAAU,OChBA,SAAAC,OACA,MAAAC,EAAAT,KACAA,KAAAU,OAAAC,SAAAC,eAAA,WACAZ,KAAAa,MAAAF,SAAAC,eAAA,SACAZ,KAAAc,KAAAH,SAAAC,eAAA,QAEAZ,KAAAU,OAAAK,QAAA,WACA,IAAAF,EAAAJ,EAAAI,MAAAG,MACAF,EAAAL,EAAAK,KAAAE,MAEA,IAAAH,IAAAC,EACA,OAAAG,MAAA,gCAEAzB,QAAA,OAAA,QAAA,SAAAqB,UAAAC,KAAA,SAAAZ,EAAAgB,GACA,GAAA,WAAAhB,EAEA,OADAe,MAAA,+DACAE,OAAAC,SAAAC,KAAA,IACA,SAAAnB,GACAe,MAAA,2DClBA,SAAAK,eACA,MAAAb,EAAAT,KAEAA,KAAAa,MAAAF,SAAAC,eAAA,SACAZ,KAAAuB,MAAAZ,SAAAC,eAAA,SACAZ,KAAAwB,MAAAb,SAAAC,eAAA,SACAZ,KAAAyB,SAAAd,SAAAC,eAAA,mBAEAZ,KAAAa,MAAAE,QAAA,WACAN,EAAAI,MAAAa,MAAAC,YAAA,WAEA3B,KAAAuB,MAAAR,QAAA,WACAN,EAAAc,MAAAG,MAAAC,YAAA,WAEA3B,KAAAwB,MAAAT,QAAA,WACAN,EAAAe,MAAAE,MAAAC,YAAA,WAGA3B,KAAAyB,SAAAV,QAAA,WAEA,IAAAN,EAAAI,MAAAG,MACA,OAAAP,EAAAI,MAAAa,MAAAC,YAAA,MACA,IAAAlB,EAAAc,MAAAP,MACA,OAAAP,EAAAc,MAAAG,MAAAC,YAAA,MACA,IAAAlB,EAAAe,MAAAR,MACA,OAAAP,EAAAe,MAAAE,MAAAC,YAAA,MAGA,IAAAd,EAAAJ,EAAAI,MAAAG,MACAO,EAAAd,EAAAc,MAAAP,MACAQ,EAAAf,EAAAe,MAAAR,MACAY,EAAA,SAAAf,WAAAU,WAAAC,IAGA,GAAAD,IAAAC,EACA,OAAAP,MAAA,iCAGAzB,QAAA,OAAA,gBAAAoC,GAAA,SAAA1B,EAAAgB,GACA,MAAA,WAAAhB,GACAe,MAAA,8EACAE,OAAAC,SAAAC,KAAA,SACA,SAAAnB,GACAC,QAAAC,IAAAc,EAAAW,iBACAZ,MAAA,mDAFA,MC1CA,SAAAa,cAEA,MAAArB,EAAAT,KAEAA,KAAA+B,WAAA,CACAC,SAAA,GACAC,UAAA,IAGAjC,KAAAkC,eAAA,EACAlC,KAAAmC,WAAAxB,SAAAC,eAAA,uBAEAZ,KAAAoC,WAAAzB,SAAAC,eAAA,gBACAZ,KAAAqC,gBAAA1B,SAAAC,eAAA,oBACAZ,KAAAsC,aAAA3B,SAAAC,eAAA,qBACAZ,KAAAuC,YAAA5B,SAAAC,eAAA,iBACAZ,KAAAwC,SAAA7B,SAAAC,eAAA,aACAZ,KAAAyC,SAAA9B,SAAAC,eAAA,aACAZ,KAAA0C,QAAA/B,SAAAC,eAAA,gBACAZ,KAAA2C,SAAAhC,SAAAC,eAAA,aACAZ,KAAA4C,WAAAjC,SAAAC,eAAA,eACAZ,KAAA6C,UAAAlC,SAAAC,eAAA,cACAZ,KAAA8C,UAAAnC,SAAAC,eAAA,WACAZ,KAAA+C,cAAApC,SAAAC,eAAA,kBACAZ,KAAAgD,cAAArC,SAAAC,eAAA,mBACAZ,KAAAiD,eAAAtC,SAAAC,eAAA,aACAZ,KAAAkD,aAAAvC,SAAAC,eAAA,cACAZ,KAAAmD,iBAAAxC,SAAAC,eAAA,oBACAZ,KAAAoD,gBAAAzC,SAAAC,eAAA,mBACAZ,KAAAqD,iBAAA1C,SAAAC,eAAA,eACAZ,KAAAsD,mBAAA3C,SAAAC,eAAA,qBACAZ,KAAAuD,eAAA5C,SAAAC,eAAA,oBACAZ,KAAAwD,gBAAA7C,SAAAC,eAAA,qBAEAZ,KAAAyD,aAAA9C,SAAAC,eAAA,kBACAZ,KAAA0D,YAAA/C,SAAAC,eAAA,iBACAZ,KAAA2D,aAAAhD,SAAAC,eAAA,kBACAZ,KAAA4D,aAAAjD,SAAAC,eAAA,kBACAZ,KAAA6D,eAAAlD,SAAAC,eAAA,oBACAZ,KAAA8D,cAAAnD,SAAAC,eAAA,mBAEAZ,KAAA+D,gBAAApD,SAAAC,eAAA,oBAEAZ,KAAAgE,cAAA,SAAAC,GACA,IAAAC,EAQA,OANAA,EADA,GAAAD,EACAA,EAAA,OACAA,EAAA,GAAAA,EAAA,EACAA,EAAA,QAEAA,EAAA,SAKAjE,KAAAmE,oBAAA,WAEA1D,EAAAwC,eAAAvB,MAAA0C,QAAA,QACAjD,OAAAkD,SAAA,EAAA,IAGArE,KAAAsE,qBAAA,WAEA7D,EAAA8C,eAAA7B,MAAA0C,QAAA,QACAjD,OAAAkD,SAAA,EAAA,IAGArE,KAAAuE,wBAAA,SAAAC,EAAAC,GACA,MAAAd,EAAAlD,EAAAkD,aACAC,EAAAnD,EAAAmD,aAGA,WAAAY,EACAb,EAAAe,YAAA,UAAAjE,EAAAuD,cAAAS,EAAAE,UAEA,UAAAH,IACAb,EAAAe,YAAA,UAAAjE,EAAAuD,cAAAS,EAAAE,WAIAlE,EAAAmE,gBAAAhB,GAAA,WAEA,IAAA,IAAAiB,EAAA,EAAAA,EAAAJ,EAAAE,OAAAE,IAAA,CACA,IAAAC,EAAAnE,SAAAoE,cAAA,OACAC,EAAArE,SAAAoE,cAAA,QACAE,EAAAtE,SAAAoE,cAAA,QAEAD,EAAAI,aAAA,QAAA,YACAF,EAAAN,YAAA,GAAAG,EAAA,SACAI,EAAAP,YAAA,GAAAD,EAAAI,KAEAC,EAAAK,YAAAH,GACAF,EAAAK,YAAAF,GACArB,EAAAuB,YAAAL,QAKA9E,KAAAoF,0BAAA,SAAAC,GACA,MAAAxB,EAAApD,EAAAoD,eAGA,GAAAwB,EAYA,CAEA,GAAAxB,EAAAyB,WAAAX,OAEAd,EAAA0B,YAAA1B,EAAAyB,WAAA,IACA,GAAAzB,EAAAyB,WAAAX,SAEAd,EAAA0B,YAAA1B,EAAAyB,WAAA,IACAzB,EAAA0B,YAAA1B,EAAAyB,WAAA,KAIA,MAAAE,EAAA7E,SAAAoE,cAAA,KACAS,EAAAN,aAAA,QAAA,oBACAM,EAAAd,YAAA,UAAAjE,EAAAgF,eAAAJ,SACAxB,EAAAsB,YAAAK,GAGA/E,EAAAiF,oBAAAL,GAGA,MAAAM,EAAAhF,SAAAoE,cAAA,UACAY,EAAAT,aAAA,QAAA,kBACAS,EAAAjB,YAAA,WACAiB,EAAA5E,QAAA,WACA,IAAAwC,EAAA9C,EAAA8C,eACAqC,EAAAnF,EAAAwC,eAGAM,EAAA7B,MAAAmE,OAAAD,EAAAE,aAAA,KAGArF,EAAA6D,wBAGAT,EAAAsB,YAAAQ,QA7CA,GAAA,GAAA9B,EAAAyB,WAAAX,OAAA,CAEAd,EAAA0B,YAAA1B,EAAAyB,WAAA,IACAzB,EAAA0B,YAAA1B,EAAAyB,WAAA,IAEA,MAAAS,EAAApF,SAAAoE,cAAA,KACAgB,EAAArB,YAAA,gBACAb,EAAAsB,YAAAY,KA0CA/F,KAAAgG,oBAAA,SAAAC,GAEA,MAAAxC,EAAAhD,EAAAgD,aACAC,EAAAjD,EAAAiD,YACAI,EAAArD,EAAAqD,cA4BA,GAzBAL,EAAAiB,YAAAuB,EAAAC,KAGAD,EAAAE,QACAzC,EAAA0C,IAAA,iCAAAH,EAAAE,OACAzC,EAAAhC,MAAA0C,QAAA,UAEAV,EAAA0C,IAAA,GACA1C,EAAAhC,MAAA0C,QAAA,QAIA3D,EAAA8D,wBAAA0B,EAAAzB,KAAAyB,EAAAxB,MAGAhE,EAAA2E,0BAAAa,EAAAZ,QAGA,IAAAY,EAAAI,MACAvC,EAAAwC,UAAAL,EAAAI,MAEAvC,EAAAY,YAAA,gBAIA,SAAA6B,MAAA,CAEA,IAAAC,EAAA7F,SAAAoE,cAAA,UACAyB,EAAAtB,aAAA,QAAA,YACAsB,EAAA9B,YAAA,gBACA8B,EAAAzF,QAAA,WACAN,EAAAgG,SAAAR,IAGA,IAAAS,EAAA/F,SAAAoE,cAAA,UACA2B,EAAAxB,aAAA,QAAA,eACAwB,EAAAhC,YAAA,UACAgC,EAAA3F,QAAA,WACA4F,QAAA,8CAAAV,EAAAC,mBACAzF,EAAAmG,KAAAX,EAAAY,IAAA,WAMA,GADApD,EAAAqD,cAAAxB,WAAAX,QAEAlB,EAAAqD,cAAA3B,YAAAqB,GACA/C,EAAAqD,cAAA3B,YAAAuB,KAIAjD,EAAAqD,cAAAxB,WAAA,GAAAyB,SACAtD,EAAAqD,cAAAxB,WAAA,GAAAyB,SACAtD,EAAAqD,cAAA3B,YAAAqB,GACA/C,EAAAqD,cAAA3B,YAAAuB,IAIAjG,EAAA8B,YAAAxB,QAAA,WACAN,EAAAmG,KAAAX,EAAAY,IAAA,YAIA7G,KAAA4E,gBAAA,SAAAoC,EAAApH,GAEA,KAAAoH,EAAAC,YACAD,EAAAzB,YAAAyB,EAAAC,YAEA,OAAArH,KAIAI,KAAAkH,kBAAA,SAAAC,GAEA,MAAAC,EAAA3G,EAAAsC,cAGA,GAAA,GAAAoE,EAAAxC,OAAA,CACA,MAAA0C,EAAA1G,SAAAoE,cAAA,OACAsC,EAAAnC,aAAA,QAAA,iCACAmC,EAAA3C,YAAA,oBACA0C,EAAA9B,WAAA,IACA8B,EAAAjC,YAAAkC,QAKA,IAAA,IAAAtB,EAAA,EAAAA,EAAAoB,EAAAxC,OAAAoB,IAAA,CACA,IAAAsB,EAAA1G,SAAAoE,cAAA,OACAsC,EAAAnC,aAAA,QAAA,mBACAmC,EAAA3C,YAAAyC,EAAApB,GAAAG,KAGAmB,EAAAtG,QAAA,WACAN,EAAAuF,oBAAAmB,EAAApB,IACAtF,EAAA0D,uBAEA,IAAA,IAAAmD,EAAA,EAAAA,EAAAF,EAAA9B,WAAAX,OAAA2C,IACA,GAAAF,EAAA9B,WAAAgC,GAAA5C,aAAA2C,EAAA3C,YACA,OAGA0C,EAAAjC,YAAAkC,KAKArH,KAAAoC,WAAAmF,QAAA,WACA9G,EAAA2B,WAAApB,OAAA,IAAAP,EAAA2B,WAAApB,MAEAP,EAAAmE,gBAAAnE,EAAAsC,eAAA,WACA,MAAAyE,EAAA/G,EAAA2B,WAAApB,MAIA,IAHA,QAGAyG,KAAAD,GAAA,CAIAhI,QAAA,OAAA,eAHA,SAAAgI,KAGA,SAAAtH,EAAAgB,GACA,GAAA,YAAAhB,EAAA,CACA,MAAAiH,EAAAO,KAAAC,MAAAzG,EAAA0G,cAAAC,MAGApH,EAAAyG,kBAAAC,QAEA,GAAA,OAAAjH,EACA,cAMA4H,YAAA,WAEArH,EAAAmE,gBAAAnE,EAAAsC,eAAA,iBACA,MAIA/C,KAAAyG,SAAA,SAAAR,GAYA,GAXAxF,EAAAsB,WAAAkE,EAAAZ,OAEA5E,EAAAwC,eAAAvB,MAAA0C,QAAA,OACA3D,EAAA4B,gBAAAX,MAAA0C,QAAA,QAEApE,KAAAwC,SAAAxB,MAAAiF,EAAAC,KACAlG,KAAAyC,SAAAzB,MAAAiF,EAAAzB,KACAxE,KAAA0C,QAAA1B,MAAAiF,EAAAE,OAIAF,EAAAxB,KAAAE,OAAA,EAAA,CAGA,IAAAG,EAAAiD,EAAAC,EAAAC,EAAAC,EAFAlI,KAAA2C,SAAA2D,UAAA,GAGA,IAAA,IAAAP,EAAA,EAAAA,EAAAE,EAAAxB,KAAAE,OAAAoB,KACAjB,EAAAnE,SAAAoE,cAAA,YACAG,aAAA,QAAA,aAEA6C,EAAApH,SAAAoE,cAAA,SACAG,aAAA,QAAA,YACA6C,EAAArD,YAAAqB,EAAA,EAAA,IACAjB,EAAAK,YAAA4C,IACAC,EAAArH,SAAAoE,cAAA,UACAG,aAAA,QAAA,YACA8C,EAAA9C,aAAA,OAAA,QACA8C,EAAA9C,aAAA,cAAA,YACA8C,EAAAhH,MAAAiF,EAAAxB,KAAAsB,GACAjB,EAAAK,YAAA6C,GACA,GAAAjC,IACAmC,EAAAvH,SAAAoE,cAAA,WACAG,aAAA,QAAA,gBACAgD,EAAAxD,YAAA,IACAwD,EAAAnH,QAAA,WACAN,EAAA0H,UAEArD,EAAAK,YAAA+C,MAEAD,EAAAtH,SAAAoE,cAAA,SACAG,aAAA,QAAA,eACA+C,EAAAvD,YAAA,IACAuD,EAAAlH,QAAA,SAAA8D,GACAA,EAAAuD,OAAAtB,cAAAC,UAEAjC,EAAAK,YAAA8C,IAEAI,GAAA1H,SAAAoE,cAAA,UACAgD,EAAA7C,aAAA,QAAA,YACAlF,KAAA2C,SAAAwC,YAAAL,GAIArE,EAAA6H,sBAAArC,EAAAZ,QACA5E,EAAA8H,oBAAAtC,EAAAZ,QACArF,KAAA6C,UAAA7B,MAAAiF,EAAAI,MAGArG,KAAAuC,YAAAmC,YAAA,sBACA1E,KAAAuC,YAAAxB,QAAA,WACAN,EAAAmG,KAAAX,EAAAY,IAAA,YAIA7G,KAAAsI,sBAAA,SAAAjD,GAEA,GAAAA,EAAA,CAEA5E,EAAAmC,WAAA0C,WAAA,GAAAyB,SACAtG,EAAAmC,WAAA0C,WAAA,GAAAyB,SACA,IAAAyB,EAAA7H,SAAAoE,cAAA,QACAyD,EAAAtD,aAAA,QAAA,iBACAsD,EAAA9D,YAAAjE,EAAAgF,eAAAJ,GAAA,OACA,IAAAoD,EAAA9H,SAAAoE,cAAA,QACA0D,EAAAvD,aAAA,QAAA,kBACAuD,EAAA/D,YAAA,WACA+D,EAAA1H,QAAA,WACAN,EAAA8H,oBAAAlD,GAEA5E,EAAA4C,iBAAA3B,MAAAmE,OAAApF,EAAA4B,gBAAAyD,aAAA,KACArF,EAAA4C,iBAAA3B,MAAA0C,QAAA,QACAjD,OAAAkD,SAAA,EAAA,IAEA5D,EAAAmC,WAAAuC,YAAAqD,GACA/H,EAAAmC,WAAAuC,YAAAsD,KAIAzI,KAAA0I,QAAA,SAAAC,GACA,IAAA,IAAAC,KAAAD,EACA,GAAAA,EAAAE,eAAAD,GACA,OAAA,EAGA,OAAAlB,KAAAoB,UAAAH,KAAAjB,KAAAoB,UAAA,KAGA9I,KAAAuI,oBAAA,SAAAlD,GACAA,IACAA,EAAA,IAGA,IAAA0D,EAAApI,SAAAC,eAAA,cACAoI,EAAArI,SAAAC,eAAA,eAGA,KAAA,GAAAmI,EAAAzD,WAAAX,QACAoE,EAAAzD,WAAAyD,EAAAzD,WAAAX,OAAA,GAAAoC,SAEA,KAAA,GAAAiC,EAAA1D,WAAAX,QACAqE,EAAA1D,WAAA0D,EAAA1D,WAAAX,OAAA,GAAAoC,SAGAtG,EAAAyB,eAAAzB,EAAAgF,eAAAJ,GAEA,IAGA4D,EAAAC,EAAAC,EAAAC,EAAAC,EAHAC,EAAA3I,SAAAC,eAAA,oBAIA,IAAA2I,QAHAD,EAAA5E,YAAAjE,EAAAgF,eAAAJ,GAAA,OAGAA,EAAArD,SAAA,CACA,GAAAvB,EAAAiI,QAAArD,EAAArD,SAAAuH,OACA,SAYA,IAAAC,EAAAC,EAAAC,GATAT,EAAAtI,SAAAoE,cAAA,OACAG,aAAA,QAAA,mBACA+D,EAAA9D,YAAAxE,SAAAoE,cAAA,OAEAoE,EAAAxI,SAAAoE,cAAA,MACAqE,EAAAzI,SAAAoE,cAAA,MACAsE,EAAA1I,SAAAoE,cAAA,OAIAyE,EAAA7I,SAAAoE,cAAA,UACAG,aAAA,OAAA,UACAsE,EAAAtE,aAAA,QAAA,SACAsE,EAAAxI,MAAAqE,EAAArD,SAAAuH,MAAAI,OAAAC,MAAA,KAAA,IACAH,EAAA9I,SAAAoE,cAAA,SACAL,YAAA,KACAgF,EAAA/I,SAAAoE,cAAA,UACAG,aAAA,OAAA,UACAwE,EAAAxE,aAAA,QAAA,SACAwE,EAAA1I,MAAAqE,EAAArD,SAAAuH,MAAAI,OAAAC,MAAA,KAAA,GACAT,EAAAhE,YAAAqE,GACAL,EAAAhE,YAAAsE,GACAN,EAAAhE,YAAAuE,GAEA,IAAAG,EAAAlJ,SAAAoE,cAAA,SACA8E,EAAA3E,aAAA,OAAA,UACA2E,EAAA3E,aAAA,QAAA,UACA2E,EAAA7I,MAAAqE,EAAArD,SAAAuH,MAAAO,OACAV,EAAAjE,YAAA0E,GAEA,IAAAE,EAAApJ,SAAAoE,cAAA,SACAgF,EAAA7E,aAAA,OAAA,UACA6E,EAAA7E,aAAA,QAAA,WACA6E,EAAA/I,MAAAqE,EAAArD,SAAAuH,MAAAS,QACAX,EAAAlE,YAAA4E,GACA,IAAAE,EAAAtJ,SAAAoE,cAAA,QACAkF,EAAA/E,aAAA,QAAA,kBACA+E,EAAAvF,YAAA,IACAuF,EAAAlJ,QAAA,SAAA8D,GACA8B,QAAA,gCACA9B,EAAAuD,OAAAtB,cAAAA,cAAAC,SACAtG,EAAAyB,iBACAzB,EAAAsD,gBAAAW,YAAAjE,EAAAyB,eAAA,SAGAmH,EAAAlE,YAAA8E,GAEAhB,EAAA9D,YAAAgE,GACAF,EAAA9D,YAAAiE,GACAH,EAAA9D,YAAAkE,GACAN,EAAA5D,YAAA8D,GAGA,IAAAiB,QAAA7E,EAAApD,UAAA,CACA,GAAAxB,EAAAiI,QAAArD,EAAApD,UAAAiI,OACA,SAUA,IAAAV,EAAAC,EAAAC,GARAR,EAAAvI,SAAAoE,cAAA,OACAG,aAAA,QAAA,oBACAgE,EAAA/D,YAAAxE,SAAAoE,cAAA,OACAoE,EAAAxI,SAAAoE,cAAA,MACAqE,EAAAzI,SAAAoE,cAAA,MACAsE,EAAA1I,SAAAoE,cAAA,OAIAyE,EAAA7I,SAAAoE,cAAA,UACAG,aAAA,OAAA,UACAsE,EAAAtE,aAAA,QAAA,SACAsE,EAAAxI,MAAAqE,EAAApD,UAAAiI,MAAAP,OAAAC,MAAA,KAAA,IACAH,EAAA9I,SAAAoE,cAAA,SACAL,YAAA,KACAgF,EAAA/I,SAAAoE,cAAA,UACAG,aAAA,OAAA,UACAwE,EAAAxE,aAAA,QAAA,SACAwE,EAAA1I,MAAAqE,EAAApD,UAAAiI,MAAAP,OAAAC,MAAA,KAAA,GACAT,EAAAhE,YAAAqE,GACAL,EAAAhE,YAAAsE,GACAN,EAAAhE,YAAAuE,GAEA,IAAAG,EAAAlJ,SAAAoE,cAAA,SACA8E,EAAA3E,aAAA,OAAA,UACA2E,EAAA3E,aAAA,QAAA,UACA2E,EAAA7I,MAAAqE,EAAApD,UAAAiI,MAAAJ,OACAV,EAAAjE,YAAA0E,GAEA,IAAAE,EAAApJ,SAAAoE,cAAA,SACAgF,EAAA7E,aAAA,OAAA,UACA6E,EAAA7E,aAAA,QAAA,WACA6E,EAAA/I,MAAAqE,EAAApD,UAAAiI,MAAAF,QACAX,EAAAlE,YAAA4E,GACA,IAAAE,EAAAtJ,SAAAoE,cAAA,QACAkF,EAAA/E,aAAA,QAAA,kBACA+E,EAAAvF,YAAA,IACAuF,EAAAlJ,QAAA,SAAA8D,GACA8B,QAAA,gCACA9B,EAAAuD,OAAAtB,cAAAA,cAAAC,SACAtG,EAAAyB,iBACAzB,EAAAsD,gBAAAW,YAAAjE,EAAAyB,eAAA,SAGAmH,EAAAlE,YAAA8E,GACAf,EAAA/D,YAAAgE,GACAD,EAAA/D,YAAAiE,GACAF,EAAA/D,YAAAkE,GACAL,EAAA7D,YAAA+D,KAIAlJ,KAAAyF,eAAA,SAAAJ,GACA,IAAA8E,EAAA,EACA,IAAA9E,EACA,OAAA,EAEA,IAAAkE,QAAAlE,EAAArD,SACAvB,EAAAiI,QAAArD,EAAArD,SAAAuH,QACAY,IAGA,IAAAZ,QAAAlE,EAAApD,UACAxB,EAAAiI,QAAArD,EAAApD,UAAAsH,QACAY,IAGA,OAAAA,GAGAnK,KAAAwD,gBAAAzC,QAAA,WAEAN,EAAA8C,eAAA7B,MAAA0C,QAAA,QAGApE,KAAA0F,oBAAA,SAAAL,GACA,IAAA+E,EAAAzJ,SAAAC,eAAA,kBACAyJ,EAAA1J,SAAAC,eAAA,mBAGA,KAAAwJ,EAAA9E,WAAA,IACA8E,EAAA9E,WAAA,GAAAyB,SAEA,KAAAsD,EAAA/E,WAAA,IACA+E,EAAA/E,WAAA,GAAAyB,SAGA,IAGAkC,EAAAC,EAAAC,EAAAC,EAAAC,EAHAC,EAAA3I,SAAAC,eAAA,qBAIA,IAAA2I,QAHAD,EAAA5E,YAAAjE,EAAAgF,eAAAJ,GAAA,OAGAA,EAAArD,UACAiH,EAAAtI,SAAAoE,cAAA,OACAI,YAAAxE,SAAAoE,cAAA,OAEAoE,EAAAxI,SAAAoE,cAAA,MACAqE,EAAAzI,SAAAoE,cAAA,MACAsE,EAAA1I,SAAAoE,cAAA,MAEAoE,EAAAzE,YAAAW,EAAArD,SAAAuH,MAAAI,OACAV,EAAA9D,YAAAgE,GACAC,EAAA1E,YAAAW,EAAArD,SAAAuH,MAAAO,OACAb,EAAA9D,YAAAiE,GACAC,EAAA3E,YAAAW,EAAArD,SAAAuH,MAAAS,QACAf,EAAA9D,YAAAkE,GACAe,EAAAjF,YAAA8D,GAGA,IAAAiB,QAAA7E,EAAApD,WACAiH,EAAAvI,SAAAoE,cAAA,OACAI,YAAAxE,SAAAoE,cAAA,OACAoE,EAAAxI,SAAAoE,cAAA,MACAqE,EAAAzI,SAAAoE,cAAA,MACAsE,EAAA1I,SAAAoE,cAAA,MAEAoE,EAAAzE,YAAAW,EAAApD,UAAAiI,MAAAP,OACAT,EAAA/D,YAAAgE,GACAC,EAAA1E,YAAAW,EAAApD,UAAAiI,MAAAJ,OACAZ,EAAA/D,YAAAiE,GACAC,EAAA3E,YAAAW,EAAApD,UAAAiI,MAAAF,QACAd,EAAA/D,YAAAkE,GACAgB,EAAAlF,YAAA+D,IAIAlJ,KAAAsK,kBAAA,WAEA,IAAAC,EAAA5J,SAAA6J,uBAAA,mBACAC,EAAA9J,SAAA6J,uBAAA,oBAQA,GALA/J,EAAAsB,WAAA,CACAC,SAAA,GACAC,UAAA,IAGA,GAAAsI,EAAA5F,QAAA,GAAA8F,EAAA9F,OAAA,CAKA,IAAA,IAAAoB,EAAA,EAAAA,EAAAwE,EAAA5F,OAAAoB,IAAA,CACAtF,EAAAsB,WAAAC,SAAA,SAAA+D,EAAA,IAAA,GACA,IAAA,IAAAuB,EAAA,EAAAA,EAAAiD,EAAAxE,GAAAT,WAAAX,OAAA2C,IACA,GAAA,GAAAA,EAAA,CACA,IAAAoD,EAAAH,EAAAxE,GAAAT,WAAAgC,GAAAL,WACA0D,EAAAJ,EAAAxE,GAAAT,WAAAgC,GAAAsD,UAEA,IAAAF,EAAA1J,MAMA,OALA0J,EAAA5D,cAAApF,MAAAmJ,gBAAA,MACAH,EAAA3J,QAAA,WACA2J,EAAA5D,cAAApF,MAAAmJ,gBAAA,gBAEA5J,MAAA,wEAEA,IAAA0J,EAAA3J,MAMA,OALA2J,EAAA7D,cAAApF,MAAAmJ,gBAAA,MACAF,EAAA5J,QAAA,WACA4J,EAAA7D,cAAApF,MAAAmJ,gBAAA,gBAEA5J,MAAA,wEAGAR,EAAAsB,WAAAC,SAAA,SAAA+D,EAAA,IAAA4D,OAAAe,EAAA1J,MAAA,IAAA2J,EAAA3J,WACA,GAAA,GAAAsG,EAAA,CAEA,IAAAiD,EAAAxE,GAAAT,WAAAgC,GAAAL,WAAAjG,MAMA,OALAuJ,EAAAxE,GAAAT,WAAAgC,GAAAL,WAAAH,cAAApF,MAAAmJ,gBAAA,MACAN,EAAAxE,GAAAT,WAAAgC,GAAAL,WAAAlG,QAAA,WACAwJ,EAAAxE,GAAAT,WAAAgC,GAAAL,WAAAH,cAAApF,MAAAmJ,gBAAA,gBAEA5J,MAAA,wEAGAR,EAAAsB,WAAAC,SAAA,SAAA+D,EAAA,IAAA+D,OAAAS,EAAAxE,GAAAT,WAAAgC,GAAAL,WAAAjG,WACA,GAAAsG,IACA7G,EAAAsB,WAAAC,SAAA,SAAA+D,EAAA,IAAAiE,QAAAO,EAAAxE,GAAAT,WAAAgC,GAAAL,WAAAjG,OAIA,IAAA,IAAA+E,EAAA,EAAAA,EAAA0E,EAAA9F,OAAAoB,IAAA,CACAtF,EAAAsB,WAAAE,UAAA,SAAA8D,EAAA,IAAA,GACA,IAAA,IAAAuB,EAAA,EAAAA,EAAAmD,EAAA1E,GAAAT,WAAAX,OAAA2C,IACA,GAAA,GAAAA,EAAA,CACA,IAAAoD,EAAAD,EAAA1E,GAAAT,WAAAgC,GAAAL,WACA0D,EAAAF,EAAA1E,GAAAT,WAAAgC,GAAAsD,UAGA,IAAAF,EAAA1J,MAMA,OALA0J,EAAA5D,cAAApF,MAAAmJ,gBAAA,MACAH,EAAA3J,QAAA,WACA2J,EAAA5D,cAAApF,MAAAmJ,gBAAA,gBAEA5J,MAAA,wEAEA,IAAA0J,EAAA3J,MAMA,OALA2J,EAAA7D,cAAApF,MAAAmJ,gBAAA,MACAF,EAAA5J,QAAA,WACA4J,EAAA7D,cAAApF,MAAAmJ,gBAAA,gBAEA5J,MAAA,wEAIAR,EAAAsB,WAAAE,UAAA,SAAA8D,EAAA,IAAA4D,OAAAe,EAAA1J,MAAA,IAAA2J,EAAA3J,WACA,GAAA,GAAAsG,EAAA,CAEA,IAAAmD,EAAA1E,GAAAT,WAAAgC,GAAAL,WAAAjG,MAMA,OALAyJ,EAAA1E,GAAAT,WAAAgC,GAAAL,WAAAH,cAAApF,MAAAmJ,gBAAA,MACAJ,EAAA1E,GAAAT,WAAAgC,GAAAL,WAAAlG,QAAA,WACA0J,EAAA1E,GAAAT,WAAAgC,GAAAL,WAAAH,cAAApF,MAAAmJ,gBAAA,gBAEA5J,MAAA,wEAGAR,EAAAsB,WAAAE,UAAA,SAAA8D,EAAA,IAAA+D,OAAAW,EAAA1E,GAAAT,WAAAgC,GAAAL,WAAAjG,WACA,GAAAsG,IACA7G,EAAAsB,WAAAE,UAAA,SAAA8D,EAAA,IAAAiE,QAAAS,EAAA1E,GAAAT,WAAAgC,GAAAL,WAAAjG,OAMAP,EAAA6H,sBAAA7H,EAAAsB,YACAtB,EAAA4C,iBAAA3B,MAAA0C,QAAA,YAvFA3D,EAAA4C,iBAAA3B,MAAA0C,QAAA,QA0FApE,KAAAsD,mBAAAvC,QAAA,WACAN,EAAA6J,qBAGAtK,KAAAkD,aAAAnC,QAAA,WACAN,EAAA4C,iBAAA3B,MAAA0C,QAAA,QACAjD,OAAAkD,SAAA,EAAA,IAGArE,KAAAgD,cAAAjC,QAAA,WACAN,EAAA8B,YAAAxB,QAAA,WACAN,EAAAmG,MAAA,EAAA,WAGAnG,EAAAwC,eAAAvB,MAAA0C,QAAA,QAGA,SAAAmC,QACAvG,KAAAmC,WAAApB,QAAA,WACAN,EAAA4B,gBAAAX,MAAA0C,QAAA,UAIApE,KAAAsC,aAAAvB,QAAA,WACAN,EAAA4B,gBAAAX,MAAA0C,QAAA,QAGApE,KAAAuC,YAAAxB,QAAA,WACAN,EAAAmG,MAAA,EAAA,WAGA5G,KAAAwC,SAAAzB,QAAA,WACAN,EAAA+B,SAAAd,MAAAC,YAAA,WAGA3B,KAAAyC,SAAA1B,QAAA,WACAN,EAAAgC,SAAAf,MAAAC,YAAA,WAGA3B,KAAA8C,UAAA/B,QAAA,WACAN,EAAA0H,UAGAnI,KAAAmD,iBAAApC,QAAA,WACAN,EAAAqK,SAAA,UAGA9K,KAAAoD,gBAAArC,QAAA,WACAN,EAAAqK,SAAA,SAGA9K,KAAAmI,OAAA,WAEA,IAAA4C,EAAAtK,EAAAkC,SAAA2C,WAAAX,OACAqG,EAAAD,EAAA,EAGAjG,EAAAnE,SAAAoE,cAAA,OACAkG,EAAAtK,SAAAoE,cAAA,QACAmG,EAAAvK,SAAAoE,cAAA,SACAoG,EAAAxK,SAAAoE,cAAA,QAIAD,EAAAI,aAAA,QAAA,YACA+F,EAAA/F,aAAA,QAAA,YACA+F,EAAA/F,aAAA,KAAA,WAAA8F,GACAC,EAAAvG,YAAAsG,EAAA,IACAE,EAAAhG,aAAA,OAAA,QACAgG,EAAAhG,aAAA,QAAA,YACAgG,EAAAhG,aAAA,KAAA,WAAA8F,GACAE,EAAAhG,aAAA,cAAA,YACAiG,EAAAjG,aAAA,KAAA,cAAA8F,GACAG,EAAAjG,aAAA,QAAA,eACAiG,EAAAzG,YAAA,IACAyG,EAAApK,QAAA,WACAoK,EAAArE,cAAAC,UAIAjC,EAAAK,YAAA8F,GACAnG,EAAAK,YAAA+F,GACApG,EAAAK,YAAAgG,GACA1K,EAAAkC,SAAAyI,aAAAtG,EAAArE,EAAAkC,SAAA2C,WAAAyF,KAGA/K,KAAAqL,UAAA,WAEA,IAAAN,EAAAtK,EAAAkC,SAAA2C,WAAAX,OACA2G,EAAA7K,EAAAkC,SAAA2C,WACA,IAAA,IAAAS,EAAA,EAAAA,EAAAgF,EAAAhF,IAGA,IAAAuF,EAAAvF,GAAAT,WAAA,GAAAtE,MAGA,OAFAsK,EAAAvF,GAAAT,WAAA,GAAA5D,MAAAC,YAAA,MACA2J,EAAAvF,GAAAT,WAAA,GAAAvE,QAAA,WAAA,OAAAuK,EAAAvF,GAAAT,WAAA,GAAA5D,MAAAC,YAAA,YACA,EAIA,OAAA,GAGA3B,KAAAuL,YAAA,WAEA,OAAA9K,EAAA+B,SAAAxB,MAIAP,EAAAgC,SAAAzB,QAIAP,EAAA4K,cACA5K,EAAAkC,SAAAhB,YAAA,OACA,IALAlB,EAAAgC,SAAAf,MAAAC,YAAA,OACA,IALAlB,EAAA+B,SAAAd,MAAAC,YAAA,OACA,IAaA3B,KAAA4G,KAAA,SAAA4E,EAAAC,GACA,GAAA,WAAAA,GAAA,WAAAA,GAEA,GAAAhL,EAAA8K,cAAA,CACA,IAAArF,EAAAzF,EAAA+B,SAAAxB,MACAwD,EAAA/D,EAAAgC,SAAAzB,MACAmF,EAAA1F,EAAAiC,QAAA1B,MACA2B,EAAA,GACAE,EAAApC,EAAAoC,UAAA7B,MAGA,IAAA,IAAA+E,EAAA,EAAAA,EAAAtF,EAAAkC,SAAA2C,WAAAX,OAAAoB,IAAA,CACA,GAAAtF,EAAAkC,SAAA2C,WAAAS,GAAAT,WAAA,GAAAtE,MAAA0K,SAAA,KAEA,YADAjL,EAAAkC,SAAA2C,WAAAS,GAAAT,WAAA,GAAA5D,MAAAC,YAAA,OAIAgB,EAAAgJ,KAAAlL,EAAAkC,SAAA2C,WAAAS,GAAAT,WAAA,GAAAtE,OAGA,GAAAwK,GAAA,WAAAC,EAAA,CAIAjM,QAAA,OAAA,gBAHA,QAAA0G,UAAA1B,YAAA2B,UAAAxD,YAAA+E,KAAAoB,UAAArI,EAAAsB,qBAAAc,YAAA2I,YAAAC,KAGA,SAAAvL,EAAAgB,GACA,GAAA,WAAAhB,EACAe,MAAA,8BACAR,EAAA4B,gBAAAX,MAAA0C,QAAA,OACAjD,OAAAC,SAAAwK,cAEA,GAAA,OAAA1L,EACA,eAGA,IAAAsL,GAAA,UAAAC,EAAA,CAGAjM,QAAA,OAAA,gBAFA,QAAA0G,UAAA1B,YAAA2B,UAAAxD,YAAA+E,KAAAoB,UAAArI,EAAAsB,qBAAAc,YAAA4I,KAEA,SAAAvL,EAAAgB,GACA,GAAA,WAAAhB,EACAe,MAAA,oCACAR,EAAA4B,gBAAAX,MAAA0C,QAAA,OACAjD,OAAAC,SAAAwK,cAEA,GAAA,OAAA1L,EACA,gBAMA,WAAAuL,IACAI,SAAA,UAAAL,YAAAC,IAEAjM,QAAA,OAAA,gBAAAqM,UAAA,SAAA3L,EAAAgB,GACA,GAAA,WAAAhB,EACAe,MAAA,4BACAR,EAAA4B,gBAAAX,MAAA0C,QAAA,OACAjD,OAAAC,SAAAwK,cAEA,GAAA,OAAA1L,EACA,YAMAF,KAAA8K,SAAA,SAAAgB,GACA,IAAAC,EAAApL,SAAAoE,cAAA,MACAiH,EAAArL,SAAAoE,cAAA,QACAiH,EAAAtH,YAAA,IAEA,IAAA,IAAAqB,EAAA,EAAAA,EAAA,EAAAA,IAAA,CACA,IAAAkG,EAAAtL,SAAAoE,cAAA,MACA,GAAA,GAAAgB,EACA,IAAA,IAAAuB,EAAA,EAAAA,EAAA,EAAAA,IAAA,CACA,IAAA4E,EAAAvL,SAAAoE,cAAA,SACAmH,EAAAhH,aAAA,OAAA,UACAgH,EAAAhH,aAAA,QAAA,SACA,GAAAoC,GAAA2E,EAAA9G,YAAA6G,GACAC,EAAA9G,YAAA+G,QAEA,GAAA,GAAAnG,EAAA,CACA,IAAAmG,EAAAvL,SAAAoE,cAAA,SACAmH,EAAAhH,aAAA,OAAA,UACAgH,EAAAhH,aAAA,QAAA,UACA+G,EAAA9G,YAAA+G,QACA,GAAA,GAAAnG,EAAA,CACA,IAAAmG,EAAAvL,SAAAoE,cAAA,SACAoH,EAAAxL,SAAAoE,cAAA,QACAoH,EAAAzH,YAAA,IACAyH,EAAAjH,aAAA,QAAA,kBACAiH,EAAApL,QAAA,SAAA8D,GACA8B,QAAA,gCACA9B,EAAAuD,OAAAtB,cAAAA,cAAAC,SACAtG,EAAAyB,iBACAzB,EAAAsD,gBAAAW,YAAAjE,EAAAyB,eAAA,SAGAgK,EAAAhH,aAAA,OAAA,UACAgH,EAAAhH,aAAA,QAAA,WACA+G,EAAA9G,YAAA+G,GACAD,EAAA9G,YAAAgH,GAEAJ,EAAA5G,YAAA8G,GAGAF,EAAA7G,aAAA,QAAA4G,EAAA,eACAnL,SAAAC,eAAAkL,EAAA,UAAA3G,YAAA4G,GAGAtL,EAAAyB,iBACAzB,EAAAsD,gBAAAW,YAAAjE,EAAAyB,eAAA,QC36BA,SAAAkK,UACApM,KAAAqM,KAAA,WAEAC,EAAA,iBAAAC,QAAA,SAAA1H,GACA1E,QAAAC,IAAAyE","file":"../main.min.js","sourcesContent":["function request(method, url, query, cb) {\n  const xhttp = new XMLHttpRequest();\n  xhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n      cb(\"success\", this);\n      console.log(\"OK2\");\n    } else if (this.readyState == 4 && this.status == 500) {\n      cb(\"error\", this);\n    }\n  };\n  xhttp.open(method, url, true);\n\n  if(query !== false) {\n    xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n    xhttp.send(query);\n  } else {\n    xhttp.send();\n  }\n}","function Auth() {\n  const _this = this;\n  this.authBt = document.getElementById(\"auth-bt\");\n  this.login = document.getElementById(\"login\");\n  this.pass = document.getElementById(\"pass\");\n\n  this.authBt.onclick = function() {\n    let login = _this.login.value;\n    let pass = _this.pass.value;\n\n    if(!login || !pass) {\n      return alert(\"Отсутствует логин или пароль\");\n    }\n    request(\"POST\", \"/auth\", `login=${login}&pass=${pass}`, function(status, res) {\n      if(status == \"success\") {\n        alert(\"Авторизация успешна и будет действительна в течение 30 дней\");\n        return window.location.href = \"/\";\n      } else if(status == \"error\") {\n        alert(\"Ошибка авторизации, проверьте введённые Вами данные\");\n        return;\n      }\n    });\n  }\n}","function Authenticate() {\n  const _this = this;\n\n  this.login = document.getElementById(\"login\");\n  this.pass1 = document.getElementById(\"pass1\");\n  this.pass2 = document.getElementById(\"pass2\");\n  this.authenBt = document.getElementById(\"authenticate-bt\");\n\n  this.login.onclick = function() {\n    _this.login.style.borderColor = \"initial\";\n  };\n  this.pass1.onclick = function() {\n    _this.pass1.style.borderColor = \"initial\";\n  };\n  this.pass2.onclick = function() {\n    _this.pass2.style.borderColor = \"initial\";\n  };\n  \n  this.authenBt.onclick = function() {\n    // check inputs \n    if(!_this.login.value) {\n      return _this.login.style.borderColor = \"red\";\n    } else if(!_this.pass1.value) {\n      return _this.pass1.style.borderColor = \"red\";\n    } else if(!_this.pass2.value) {\n      return _this.pass2.style.borderColor = \"red\";\n    }\n\n    let login = _this.login.value;\n    let pass1 = _this.pass1.value;\n    let pass2 = _this.pass2.value;\n    let q = `login=${login}&pass1=${pass1}&pass2=${pass2}`;\n\n    // check passes match\n    if(pass1 !== pass2) {\n      return alert(\"Введённые пароли не совпадают\");\n    }\n\n    request(\"POST\", \"/authenticate\", q, function(status, res) {\n      if(status == \"success\") {\n        alert(\"Аутентификация успешна, сейчас вы будете перенаправлены на страницу логина\");\n        return window.location.href = \"/auth\";\n      } else if(status == \"error\") {\n        console.log(res.statusText);\n        alert(\"Ошибка аутентификации, проверьте все поля\");\n        return;\n      }\n    });\n  };\n } ","function Performance() {\n\n  const _this = this;\n\n  this.pointsData = {\n    leftSide: {},\n    rightSide: {}\n  };\n  // \n  this.totalPointsNum = 0;\n  this.addPerfBtn = document.getElementById(\"add-performance-btn\");\n\n  this.searchInpt = document.getElementById(\"search-perfs\");\n  this.backgroundModal = document.getElementById(\"background-modal\");\n  this.closeAddPerf = document.getElementById(\"close-adding-perf\");\n  this.savePerfBtn = document.getElementById(\"save-perf-btn\");\n  this.perfName = document.getElementById(\"perf-name\");\n  this.perfType = document.getElementById(\"perf-type\");\n  this.perfUrl = document.getElementById(\"perf-pic-url\");\n  this.perfActs = document.getElementById(\"perf-acts\");\n  this.perfPoints = document.getElementById(\"perf-points\");\n  this.perfNotes = document.getElementById(\"perf-notes\");\n  this.addActBtn = document.getElementById(\"add-act\");\n  this.searchResults = document.getElementById(\"search-results\");\n  this.closeCardPerf = document.getElementById(\"close-card-perf\");\n  this.backgroundCard = document.getElementById(\"card-back\");\n  this.addPointsBtn = document.getElementById(\"add-points\");\n  this.addRightPointBtn = document.getElementById(\"add-right-pt-btn\");\n  this.addLeftPointBtn = document.getElementById(\"add-left-pt-btn\");\n  this.backgroundPoints = document.getElementById(\"points-back\");\n  this.closeEditPointsBtn = document.getElementById(\"close-points-perf\");\n  this.userPointsBack = document.getElementById(\"user-points-back\");\n  this.closeUserPoints = document.getElementById(\"close-user-points\");\n\n  this.cardPerfName = document.getElementById(\"card-perf-name\");\n  this.cardPerfImg = document.getElementById(\"card-perf-img\");\n  this.cardPerfType = document.getElementById(\"card-perf-type\");\n  this.cardPerfActs = document.getElementById(\"card-perf-acts\");\n  this.cardPerfPoints = document.getElementById(\"card-perf-points\");\n  this.cardPerfNotes = document.getElementById(\"card-perf-notes\");\n  \n  this.totalPointsSpan = document.getElementById(\"total-points-num\");\n\n  this.getActsEnding = function(actsNum) {\n    let ending;\n    if(actsNum == 1) {\n      ending = actsNum + \" акт\";\n    } else if(actsNum > 1 && actsNum < 5 ) {\n      ending = actsNum + \" акта\";\n    } else {\n      ending = actsNum + \"актов\";\n    }\n    return ending;\n  };\n\n  this.showPerformanceCard = function() {\n    // show usual performance card and scroll top\n    _this.backgroundCard.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.showUsualPointsTable = function() {\n    // show usual performance table and scroll top\n    _this.userPointsBack.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.fillCardPerformanceActs = function(type, acts) {\n    const cardPerfType = _this.cardPerfType;\n    const cardPerfActs = _this.cardPerfActs;\n\n    // fill usual performance card with acts\n    if(type === \"ballet\") {\n      cardPerfType.textContent = `Балет, ${_this.getActsEnding(acts.length)}`;\n    } \n    else if(type === \"opera\") {\n      cardPerfType.textContent = `Опера, ${_this.getActsEnding(acts.length)}`;\n    }\n\n    // clear act's element before filling it\n    _this.clearDomElement(cardPerfActs, function() {\n      // create and fill element for each act\n      for(let e=0; e<acts.length; e++) {\n        let actLine = document.createElement(\"div\");\n        let span1 = document.createElement(\"span\");\n        let span2 = document.createElement(\"span\");\n\n        actLine.setAttribute(\"class\", \"act-line\");\n        span1.textContent = `${e+1} Акт:`;\n        span2.textContent = `${acts[e]}`;\n\n        actLine.appendChild(span1);\n        actLine.appendChild(span2);\n        cardPerfActs.appendChild(actLine);\n      }\n    });\n  };\n\n  this.fillCardPerformancePoints = function(points) {\n    const cardPerfPoints = _this.cardPerfPoints;\n    \n    // if there is no points \n    if(!points) {\n      // show that points is absent\n      if(cardPerfPoints.childNodes.length == 3) {\n        // clear old elements before filling\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n        // add 'absent' message \n        const i = document.createElement(\"i\");\n        i.textContent = \"– Отсутствуют\";\n        cardPerfPoints.appendChild(i);\n      }\n    }\n    else {\n      // if there IS points\n      if(cardPerfPoints.childNodes.length == 2) {\n        // clear user card points div before filling\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n      } else if(cardPerfPoints.childNodes.length == 3) {\n        // clear old elements before filling\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n      }\n\n      // fill performance card with number of points total\n      const totalPoints = document.createElement(\"p\");\n      totalPoints.setAttribute(\"class\", \"total-points-usr\");\n      totalPoints.textContent = `Всего: ${_this.countPointsNum(points)} шт.`;\n      cardPerfPoints.appendChild(totalPoints);\n    \n      // fill usual table itself with points\n      _this.fillUserPointsTable(points);\n\n      // add show usual points button\n      const btn = document.createElement(\"button\");\n      btn.setAttribute(\"class\", \"showPoints-btn\");\n      btn.textContent = \"Просмотр\";\n      btn.onclick = function() {\n        let userPointsBack = _this.userPointsBack;\n        let userPerfCardBack = _this.backgroundCard;\n\n        // set point table's background height as much as performance card background\n        userPointsBack.style.height = userPerfCardBack.offsetHeight + \"px\";\n\n        // show usual table on click\n        _this.showUsualPointsTable();\n      };\n      // append above button to usual card if it is absent\n      cardPerfPoints.appendChild(btn);\n    }\n  };\n \n  this.fillPerformanceCard = function(performance) {\n    // filling usual performance card\n    const cardPerfName = _this.cardPerfName;\n    const cardPerfImg = _this.cardPerfImg;\n    const cardPerfNotes = _this.cardPerfNotes;\n  \n    // fill permormance name\n    cardPerfName.textContent = performance.name;\n\n    // show performance img if exists\n    if(performance.imgUrl) {\n      cardPerfImg.src = \"/static/imgs/performance-imgs/\"+performance.imgUrl;\n      cardPerfImg.style.display = \"block\";\n    } else {\n      cardPerfImg.src = \"\";\n      cardPerfImg.style.display = \"none\";\n    }\n    \n    // fill performance acts\n    _this.fillCardPerformanceActs(performance.type, performance.acts);\n    \n    // fill performance card itself with existing points\n    _this.fillCardPerformancePoints(performance.points);\n   \n    // fill notes\n    if(performance.notes != \"\") {\n      cardPerfNotes.innerHTML = performance.notes;\n    } else {\n      cardPerfNotes.textContent = \"– Отсутствуют\"; \n    }\n\n    // if user is admin, add editing buttons\n    if(admin === \"true\") {\n      // add edit performance button\n      let editBt = document.createElement(\"button\");\n      editBt.setAttribute(\"class\", \"edit-btn\");\n      editBt.textContent = \"Редактировать\";\n      editBt.onclick = function() {\n        _this.openEdit(performance);\n      };\n      // add remove performance button\n      let rmBt = document.createElement(\"button\");\n      rmBt.setAttribute(\"class\", \"rm-perf-btn\");\n      rmBt.textContent = \"Удалить\";\n      rmBt.onclick = function() {\n        if(confirm(`Вы действительно хотите удалить спектакль \"${performance.name}\" из базы?`)) {\n          _this.save(performance._id, \"remove\");\n        }\n      };\n\n      // add edit and remove buttons if no ones\n      const cardElemCount = cardPerfName.parentElement.childNodes.length;\n      if(cardElemCount == 5) {\n        cardPerfName.parentElement.appendChild(editBt);\n        cardPerfName.parentElement.appendChild(rmBt);\n      } \n      else {\n        // if there is ones, replace them with new ones\n        cardPerfName.parentElement.childNodes[5].remove();\n        cardPerfName.parentElement.childNodes[5].remove();\n        cardPerfName.parentElement.appendChild(editBt);\n        cardPerfName.parentElement.appendChild(rmBt);\n      }\n    }\n    // update function of save performance button of usual card\n    _this.savePerfBtn.onclick = function() {\n      _this.save(performance._id, \"update\");\n    };\n  };\n\n  this.clearDomElement = function(elem, cb) {\n    // safe and fast way to clear dom element\n    while (elem.firstChild) {\n      elem.removeChild(elem.firstChild);\n    }\n    return cb();\n  };\n\n  // filling search results div with found performanes\n  this.fillSearchResults = function(results) {\n\n    const srchResults = _this.searchResults;\n\n    // if nothing found\n    if(results.length == 0) {\n      const el = document.createElement(\"div\");\n      el.setAttribute(\"class\", \"perf-name-found nothing-found\");\n      el.textContent = \"Ничего не найдено\";\n      if(!srchResults.childNodes[0]) {\n        srchResults.appendChild(el);\n      }\n    } \n    else {\n      // fill search div with elements with performance's names\n      for(let i=0; i<results.length; i++) {\n        let el = document.createElement(\"div\");\n        el.setAttribute(\"class\", \"perf-name-found\");\n        el.textContent = results[i].name;\n\n        // on click -> fill and show perfrormance card modal\n        el.onclick = function() {\n          _this.fillPerformanceCard(results[i]);\n          _this.showPerformanceCard();\n        };\n        for(let b=0; b<srchResults.childNodes.length; b++) {\n          if(srchResults.childNodes[b].textContent == el.textContent) {\n            return;\n          }\n        }\n        srchResults.appendChild(el);\n      }\n    }\n  };\n\n  this.searchInpt.oninput = function() {\n    if(_this.searchInpt.value && _this.searchInpt.value != \"\") {\n      // clear search results div \n      _this.clearDomElement(_this.searchResults, function() {\n        const srchQuery = _this.searchInpt.value;\n        const rgx = /^\\s*$/;\n    \n        // regex test if query does not start with empty value\n        if(!rgx.test(srchQuery)) {\n          const queryStr = `query=${srchQuery}`;\n    \n          // send the above query to the server\n          request(\"POST\", \"/perf-search\", queryStr, function(status, res) {\n            if(status === \"success\") {\n              const results = JSON.parse(res.responseText).perfs;\n    \n              // fill search div with results found \n              _this.fillSearchResults(results);\n            }\n            else if(status == \"err\") {\n              return;\n            }\n          });\n        }\n      });\n    } else {\n      setTimeout(function() {\n        // clear search results div \n        _this.clearDomElement(_this.searchResults, function(){});\n      }, 100);\n    }\n  };\n\n  this.openEdit = function(performance) {\n    _this.pointsData = performance.points;\n    \n    _this.backgroundCard.style.display = \"none\";\n    _this.backgroundModal.style.display = \"block\";\n\n    this.perfName.value = performance.name;\n    this.perfType.value = performance.type;\n    this.perfUrl.value = performance.imgUrl;\n    \n    // fill editing window with acts\n   \n    if(performance.acts.length > 0) {\n      this.perfActs.innerHTML = \"\";\n\n      let actLine, sp, ip, rm, add;\n      for(let i=0; i<performance.acts.length; i++) {\n        actLine = document.createElement(\"actLine\");\n        actLine.setAttribute(\"class\", \"act-line\");\n\n        sp = document.createElement(\"span\");\n        sp.setAttribute(\"class\", \"perf-act\");\n        sp.textContent = (i+1)+\":\";\n        actLine.appendChild(sp);\n        ip = document.createElement(\"input\");\n        ip.setAttribute(\"class\", \"act-time\");\n        ip.setAttribute(\"type\", \"text\");\n        ip.setAttribute(\"placeholder\", \"1ч 15мин\");\n        ip.value = performance.acts[i];\n        actLine.appendChild(ip);\n        if(i==0) {\n          add = document.createElement(\"button\");\n          add.setAttribute(\"class\", \"add-mini-btn\");\n          add.textContent = \"+\";\n          add.onclick = function() {\n            _this.addAct();\n          };\n          actLine.appendChild(add);\n        } else {\n          rm = document.createElement(\"span\");\n          rm.setAttribute(\"class\", \"del-act-btn\");\n          rm.textContent = \"X\";\n          rm.onclick = function(e) {\n            e.target.parentElement.remove();\n          };\n          actLine.appendChild(rm);\n        }\n        em = document.createElement(\"button\");\n        sp.setAttribute(\"class\", \"perf-act\");\n        this.perfActs.appendChild(actLine);\n      }\n      \n    }\n    _this.fillEditCardPointsDiv(performance.points);\n    _this.fillPointsEditModal(performance.points);\n    this.perfNotes.value = performance.notes;\n\n    // change text of save button\n    this.savePerfBtn.textContent = \"Сохранить изменения\";\n    this.savePerfBtn.onclick = function() {\n      _this.save(performance._id, \"update\");\n    };\n  };\n\n  this.fillEditCardPointsDiv = function(points) {\n    // fill editing table with points\n    if(points) {\n      // fill preview modal\n      _this.perfPoints.childNodes[0].remove();\n      _this.perfPoints.childNodes[0].remove();\n      let nSp = document.createElement(\"span\");\n      nSp.setAttribute(\"class\", \"points-number\");\n      nSp.textContent = _this.countPointsNum(points) + \" шт.\";\n      let openEditTable = document.createElement(\"span\");\n      openEditTable.setAttribute(\"class\", \"showPoints-btn\");\n      openEditTable.textContent = \"Редактор\";\n      openEditTable.onclick = function() {\n        _this.fillPointsEditModal(points);\n        // set edit points' background height as much as edit card background\n        _this.backgroundPoints.style.height = _this.backgroundModal.offsetHeight + \"px\";\n        _this.backgroundPoints.style.display = \"block\";\n        window.scrollTo(0, 0);\n      }\n      _this.perfPoints.appendChild(nSp);\n      _this.perfPoints.appendChild(openEditTable);\n    } \n  };\n\n  this.isEmpty = function(obj) {\n    for(var prop in obj) {\n      if(obj.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n    return JSON.stringify(obj) === JSON.stringify({});\n  };\n\n  this.fillPointsEditModal = function(points) {\n    if(!points) {\n      points = {};\n    }\n\n    let leftTable = document.getElementById(\"left-table\");\n    let rightTable = document.getElementById(\"right-table\");\n    \n    // clear before filling\n    while(leftTable.childNodes.length != 1) {\n      leftTable.childNodes[leftTable.childNodes.length-1].remove();\n    }\n    while(rightTable.childNodes.length != 1) {\n      rightTable.childNodes[rightTable.childNodes.length-1].remove();\n    }\n\n    _this.totalPointsNum = _this.countPointsNum(points);\n\n    let numTotal = document.getElementById(\"total-points-num\");\n    numTotal.textContent = _this.countPointsNum(points) + \" шт.\";\n\n    let trLeft, trRight, td2, td3, td4;\n    for(key1 in points.leftSide) {\n      if(_this.isEmpty(points.leftSide[key1])) {\n        continue;\n      }\n\n      trLeft = document.createElement(\"tr\");\n      trLeft.setAttribute(\"class\", \"left-point-rope\");\n      trLeft.appendChild(document.createElement(\"td\"));\n\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      // fill them with inputs\n      let inpt1, brSp, inpt2;\n      inpt1 = document.createElement(\"input\");\n      inpt1.setAttribute(\"type\", \"number\");\n      inpt1.setAttribute(\"class\", \"lines\");\n      inpt1.value = points.leftSide[key1].stalls.split('/')[0];\n      brSp = document.createElement(\"span\");\n      brSp.textContent = \"/\";\n      inpt2 = document.createElement(\"input\");\n      inpt2.setAttribute(\"type\", \"number\");\n      inpt2.setAttribute(\"class\", \"lines\");\n      inpt2.value = points.leftSide[key1].stalls.split('/')[1];\n      td2.appendChild(inpt1);\n      td2.appendChild(brSp);\n      td2.appendChild(inpt2);\n\n      let inptMeters = document.createElement(\"input\");\n      inptMeters.setAttribute(\"type\", \"number\");\n      inptMeters.setAttribute(\"class\", \"meters\");\n      inptMeters.value = points.leftSide[key1].meters;\n      td3.appendChild(inptMeters);\n\n      let inptMach = document.createElement(\"input\");\n      inptMach.setAttribute(\"type\", \"number\");\n      inptMach.setAttribute(\"class\", \"machine\");\n      inptMach.value = points.leftSide[key1].machine;\n      td4.appendChild(inptMach);\n      let delsp = document.createElement(\"span\");\n      delsp.setAttribute(\"class\", \"del-point-rope\");\n      delsp.textContent = \"X\";\n      delsp.onclick = function(e) {\n        if(confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          _this.totalPointsNum--;\n          _this.totalPointsSpan.textContent = _this.totalPointsNum +\" шт.\";\n        }\n      };\n      td4.appendChild(delsp);\n\n      trLeft.appendChild(td2);\n      trLeft.appendChild(td3);\n      trLeft.appendChild(td4);\n      leftTable.appendChild(trLeft);\n    }\n\n    for(key2 in points.rightSide) { \n      if(_this.isEmpty(points.rightSide[key2])) {\n        continue;\n      }\n      trRight = document.createElement(\"tr\");\n      trRight.setAttribute(\"class\", \"right-point-rope\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      // fill them with inputs\n      let inpt1, brSp, inpt2;\n      inpt1 = document.createElement(\"input\");\n      inpt1.setAttribute(\"type\", \"number\");\n      inpt1.setAttribute(\"class\", \"lines\");\n      inpt1.value = points.rightSide[key2].stalls.split('/')[0];\n      brSp = document.createElement(\"span\");\n      brSp.textContent = \"/\";\n      inpt2 = document.createElement(\"input\");\n      inpt2.setAttribute(\"type\", \"number\");\n      inpt2.setAttribute(\"class\", \"lines\");\n      inpt2.value = points.rightSide[key2].stalls.split('/')[1];\n      td2.appendChild(inpt1);\n      td2.appendChild(brSp);\n      td2.appendChild(inpt2);\n\n      let inptMeters = document.createElement(\"input\");\n      inptMeters.setAttribute(\"type\", \"number\");\n      inptMeters.setAttribute(\"class\", \"meters\");\n      inptMeters.value = points.rightSide[key2].meters;\n      td3.appendChild(inptMeters);\n\n      let inptMach = document.createElement(\"input\");\n      inptMach.setAttribute(\"type\", \"number\");\n      inptMach.setAttribute(\"class\", \"machine\");\n      inptMach.value = points.rightSide[key2].machine;\n      td4.appendChild(inptMach);\n      let delsp = document.createElement(\"span\");\n      delsp.setAttribute(\"class\", \"del-point-rope\");\n      delsp.textContent = \"X\";\n      delsp.onclick = function(e) {\n        if(confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          _this.totalPointsNum--;\n          _this.totalPointsSpan.textContent = _this.totalPointsNum +\" шт.\";\n        }\n      };\n      td4.appendChild(delsp);\n      trRight.appendChild(td2);\n      trRight.appendChild(td3);\n      trRight.appendChild(td4);\n      rightTable.appendChild(trRight);\n    }\n  };\n\n  this.countPointsNum = function(points) {\n    let totalNum = 0; \n    if(!points) {\n      return 0;\n    }\n    for(key1 in points.leftSide) {\n      if(!_this.isEmpty(points.leftSide[key1])) {\n        totalNum++;\n      }\n    }\n    for(key1 in points.rightSide) {\n      if(!_this.isEmpty(points.rightSide[key1])) {\n        totalNum++;\n      }\n    }\n    return totalNum;\n  };\n\n  this.closeUserPoints.onclick = function() {\n    // close user table points\n    _this.userPointsBack.style.display = \"none\";\n };\n\n  this.fillUserPointsTable = function(points) {\n    let leftUsrTable = document.getElementById(\"left-usr-table\");\n    let rightUsrTable = document.getElementById(\"right-usr-table\");\n    \n    // clear before filling\n    while(leftUsrTable.childNodes[1]) {\n      leftUsrTable.childNodes[1].remove();\n    }\n    while(rightUsrTable.childNodes[1]) {\n      rightUsrTable.childNodes[1].remove();\n    }\n\n    let numTotal = document.getElementById(\"total-user-points\");\n    numTotal.textContent = _this.countPointsNum(points) + \" шт.\";\n\n    let trLeft, trRight, td2, td3, td4;\n    for(key1 in points.leftSide) {\n      trLeft = document.createElement(\"tr\");\n      trLeft.appendChild(document.createElement(\"td\"));\n\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      td2.textContent = points.leftSide[key1].stalls; \n      trLeft.appendChild(td2);\n      td3.textContent = points.leftSide[key1].meters;\n      trLeft.appendChild(td3);\n      td4.textContent = points.leftSide[key1].machine;\n      trLeft.appendChild(td4);\n      leftUsrTable.appendChild(trLeft);\n    }\n\n    for(key2 in points.rightSide) { \n      trRight = document.createElement(\"tr\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n      \n      td2.textContent = points.rightSide[key2].stalls;\n      trRight.appendChild(td2);\n      td3.textContent = points.rightSide[key2].meters;\n      trRight.appendChild(td3);\n      td4.textContent = points.rightSide[key2].machine;\n      trRight.appendChild(td4);\n      rightUsrTable.appendChild(trRight);\n    }\n  };\n\n  this.saveEditingPoints = function() {\n    // save points\n    let leftPoints = document.getElementsByClassName(\"left-point-rope\");\n    let rightPoints = document.getElementsByClassName(\"right-point-rope\");\n  \n    // clear points data before filling it\n    _this.pointsData = {\n      leftSide: {},\n      rightSide: {}\n    };\n\n    if(leftPoints.length == 0 && rightPoints.length == 0) {\n      _this.backgroundPoints.style.display = \"none\";\n      return;\n    }\n\n    for(let i=0; i<leftPoints.length; i++) {\n      _this.pointsData.leftSide[\"point\"+(i+1)] = {};\n      for(let b=1; b<leftPoints[i].childNodes.length; b++) {\n        if(b==1) {\n          let line1 = leftPoints[i].childNodes[b].firstChild;\n          let line2 = leftPoints[i].childNodes[b].lastChild;\n          // check if empty\n          if(!line1.value) {\n            line1.parentElement.style.backgroundColor = \"red\";\n            line1.onclick = function() {\n              line1.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          } else if(!line2.value) {\n            line2.parentElement.style.backgroundColor = \"red\";\n            line2.onclick = function() {\n              line2.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.leftSide[\"point\"+(i+1)].stalls = line1.value+\"/\"+line2.value;\n        } else if (b==2) {\n          // check if empty\n          if(!leftPoints[i].childNodes[b].firstChild.value) {\n            leftPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"red\";\n            leftPoints[i].childNodes[b].firstChild.onclick = function() {\n              leftPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"initial\";\n            }\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.leftSide[\"point\"+(i+1)].meters = leftPoints[i].childNodes[b].firstChild.value;\n        } else if (b==3) {\n          _this.pointsData.leftSide[\"point\"+(i+1)].machine = leftPoints[i].childNodes[b].firstChild.value;\n        }\n      }\n    }\n    for(let i=0; i<rightPoints.length; i++) {\n      _this.pointsData.rightSide[\"point\"+(i+1)] = {};\n      for(let b=1; b<rightPoints[i].childNodes.length; b++) {\n        if(b==1) {\n          let line1 = rightPoints[i].childNodes[b].firstChild;\n          let line2 = rightPoints[i].childNodes[b].lastChild;\n\n          // check if empty\n          if(!line1.value) {\n            line1.parentElement.style.backgroundColor = \"red\";\n            line1.onclick = function() {\n              line1.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          } else if(!line2.value) {\n            line2.parentElement.style.backgroundColor = \"red\";\n            line2.onclick = function() {\n              line2.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n\n          _this.pointsData.rightSide[\"point\"+(i+1)].stalls = line1.value+\"/\"+line2.value;\n        } else if (b==2) {\n           // check if empty\n          if(!rightPoints[i].childNodes[b].firstChild.value) {\n            rightPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"red\";\n            rightPoints[i].childNodes[b].firstChild.onclick = function() {\n              rightPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"initial\";\n            }\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.rightSide[\"point\"+(i+1)].meters = rightPoints[i].childNodes[b].firstChild.value;\n        } else if (b==3) {\n          _this.pointsData.rightSide[\"point\"+(i+1)].machine = rightPoints[i].childNodes[b].firstChild.value;\n        }\n      }\n    }\n\n    // fill editing card points div\n    _this.fillEditCardPointsDiv(_this.pointsData);\n    _this.backgroundPoints.style.display = \"none\";\n  };\n\n  this.closeEditPointsBtn.onclick = function() {\n    _this.saveEditingPoints();\n  };\n\n  this.addPointsBtn.onclick = function() {\n    _this.backgroundPoints.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.closeCardPerf.onclick = function() {\n    _this.savePerfBtn.onclick = function() {\n      _this.save(false, \"create\");\n    };\n\n    _this.backgroundCard.style.display = \"none\";\n  };\n\n  if(admin === \"true\") {\n    this.addPerfBtn.onclick = function() {\n      _this.backgroundModal.style.display = \"block\";\n    };\n  }\n\n  this.closeAddPerf.onclick = function() {\n    _this.backgroundModal.style.display = \"none\";\n  };\n\n  this.savePerfBtn.onclick = function() {\n    _this.save(false, \"create\");\n  };\n\n  this.perfName.onclick = function() {\n    _this.perfName.style.borderColor = \"initial\";\n  };\n\n  this.perfType.onclick = function() {\n    _this.perfType.style.borderColor = \"initial\";\n  }\n\n  this.addActBtn.onclick = function() {\n    _this.addAct();\n  };\n\n  this.addRightPointBtn.onclick = function() {\n    _this.addPoint(\"right\");\n  }\n\n  this.addLeftPointBtn.onclick = function() {\n    _this.addPoint(\"left\");\n  }\n\n  this.addAct = function() {\n    // num of childnodes without button\n    let childNum = _this.perfActs.childNodes.length;\n    let nextChildNum = childNum+1;\n   \n    // create elements\n    let actLine = document.createElement(\"div\");\n    let spanAct = document.createElement(\"span\");\n    let timeInpt = document.createElement(\"input\");\n    let delBtn = document.createElement(\"span\");\n\n    \n    // set attributes on them\n    actLine.setAttribute(\"class\", \"act-line\")\n    spanAct.setAttribute(\"class\", \"perf-act\");\n    spanAct.setAttribute(\"id\", \"perf-act\"+nextChildNum);\n    spanAct.textContent = nextChildNum +\":\";\n    timeInpt.setAttribute(\"type\", \"text\");\n    timeInpt.setAttribute(\"class\", \"act-time\");\n    timeInpt.setAttribute(\"id\", \"act-time\"+nextChildNum);\n    timeInpt.setAttribute(\"placeholder\", \"1ч 15мин\");\n    delBtn.setAttribute(\"id\", \"del-act-btn\"+nextChildNum);\n    delBtn.setAttribute(\"class\", \"del-act-btn\");\n    delBtn.textContent = \"X\";\n    delBtn.onclick = function() {\n      delBtn.parentElement.remove();\n    };\n\n    // add\n    actLine.appendChild(spanAct);\n    actLine.appendChild(timeInpt);\n    actLine.appendChild(delBtn);\n    _this.perfActs.insertBefore(actLine, _this.perfActs.childNodes[childNum]);\n  };\n\n  this.checkActs = function() {\n    // num of childnodes\n    let childNum = _this.perfActs.childNodes.length;\n    let children = _this.perfActs.childNodes;\n    for(let i=0; i<childNum; i++) {\n      \n      // check if act time exists for all children\n      if(!children[i].childNodes[1].value) {\n        children[i].childNodes[1].style.borderColor = \"red\";\n        children[i].childNodes[1].onclick = function() {return children[i].childNodes[1].style.borderColor = \"initial\";};\n        return false;\n        break;\n      }\n    }\n    return true;\n  };\n\n  this.inputsValid = function() {\n    // check all inputs\n    if(!_this.perfName.value) {\n      _this.perfName.style.borderColor = \"red\";\n      return false;\n    } \n    else if (!_this.perfType.value) {\n      _this.perfType.style.borderColor = \"red\";\n      return false;\n    } \n    else if(!_this.checkActs()) {\n      _this.perfActs.borderColor = \"red\";\n      return false;\n    } \n    return true;\n  };\n\n  this.save = function(perfId, action) {\n    if(action === \"update\" || action === \"create\") {\n      // check for empty inputs\n      if(_this.inputsValid()) {\n        let name = _this.perfName.value;\n        let type = _this.perfType.value;\n        let imgUrl = _this.perfUrl.value;\n        let perfActs = [];\n        let perfNotes = _this.perfNotes.value;\n        \n        // check if acts do not include commas\n        for(let i=0; i<_this.perfActs.childNodes.length; i++) {\n          if(_this.perfActs.childNodes[i].childNodes[1].value.includes(\",\")) {\n            _this.perfActs.childNodes[i].childNodes[1].style.borderColor = \"red\";\n            return;\n          }\n          // add act to perfActs to save if validation passed\n          perfActs.push(_this.perfActs.childNodes[i].childNodes[1].value);\n        }\n  \n        if(perfId && action === \"update\") {\n          let perfData = `name=${name}&type=${type}&imgUrl=${imgUrl}&acts=${perfActs}&points=${JSON.stringify(_this.pointsData)}&notes=${perfNotes}&perfId=${perfId}&action=${action}`;\n  \n          // send data to Server\n          request(\"post\", \"/performances\", perfData, function(status, res) {\n            if(status == \"success\") {\n              alert(\"Спектакль обновлен успешно\");\n              _this.backgroundModal.style.display = \"none\";\n              window.location.reload();\n            }\n            else if(status == \"err\") {\n              return;\n            }\n          });\n        } else if(!perfId && action== \"create\") { \n          let perfData = `name=${name}&type=${type}&imgUrl=${imgUrl}&acts=${perfActs}&points=${JSON.stringify(_this.pointsData)}&notes=${perfNotes}&action=${action}`;\n          // send data to Server\n          request(\"post\", \"/performances\", perfData, function(status, res) {\n            if(status == \"success\") {\n              alert(\"Новый спектакль успешно добавлен\");\n              _this.backgroundModal.style.display = \"none\";\n              window.location.reload();\n            }\n            else if(status == \"err\") {\n              return;\n            }\n          });\n        }\n      }\n    } \n    else if(action === \"remove\") {\n      perfData = `perfId=${perfId}&action=${action}`;\n      // send data to Server\n      request(\"post\", \"/performances\", perfData, function(status, res) {\n        if(status == \"success\") {\n          alert(\"Спектакль успешно удалён\");\n          _this.backgroundModal.style.display = \"none\";\n          window.location.reload();\n        }\n        else if(status == \"err\") {\n          return;\n        }\n      });\n    }\n  };\n\n  this.addPoint = function(side) {\n    let tr = document.createElement(\"tr\");\n    let brSpan = document.createElement(\"span\");\n    brSpan.textContent = \"/\";\n\n    for(let i=0; i<4; i++) {\n      let td = document.createElement(\"td\");\n      if(i == 1) {\n        for(let b=0; b<2; b++) {\n          let inpt = document.createElement(\"input\");\n          inpt.setAttribute(\"type\", \"number\");\n          inpt.setAttribute(\"class\", \"lines\");\n          (b == 1 ? td.appendChild(brSpan):null);\n          td.appendChild(inpt);\n        }\n      } else if(i == 2) {\n        let inpt = document.createElement(\"input\");\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"meters\");\n        td.appendChild(inpt);\n      } else if(i == 3) {\n        let inpt = document.createElement(\"input\");\n        let delSp = document.createElement(\"span\");\n        delSp.textContent = \"X\";\n        delSp.setAttribute(\"class\", \"del-point-rope\");\n        delSp.onclick = function(e) {\n          if(confirm(\"Удалить эту точку подвеса?\")) {\n            e.target.parentElement.parentElement.remove();\n            _this.totalPointsNum--;\n            _this.totalPointsSpan.textContent = _this.totalPointsNum +\" шт.\";\n          }\n        };\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"machine\");\n        td.appendChild(inpt);\n        td.appendChild(delSp);\n      }\n      tr.appendChild(td);\n    }\n    // add\n    tr.setAttribute(\"class\", side+\"-point-rope\");\n    document.getElementById(side+\"-table\").appendChild(tr);\n\n    // increment total points\n    _this.totalPointsNum++;\n    _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n  }; \n}","function SkedApp() {\n  this.init = function() {\n    // add evt listeners on all elements\n    $(\".shift-choose\").change(function(e) {\n      console.log(e);\n    });\n  };\n};"]}