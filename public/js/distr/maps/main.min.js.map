{"version":3,"sources":["ajax.js","auth.js","authenticate.js","breadcrumps.js","notes.js","performances.js","skedjs.js"],"names":["request","method","url","query","cb","xhttp","XMLHttpRequest","onreadystatechange","this","readyState","status","onerror","e","currentTarget","open","setRequestHeader","send","Auth","baseUrl","_this","BASE_URL","authBt","document","getElementById","login","pass","onclick","value","alert","res","window","location","href","Rocky","setWorkspaceTo","Authenticate","pass1","pass2","authenBt","style","borderColor","q","updateBreadcrump","mainBreadcrump","currPage","pathname","textContent","/","/materials","/performances","Notes","createHtmlForNote","createElement","uploadLastTenNotes","Performance","admin","pointsData","leftSide","rightSide","totalPointsNum","addPerfBtn","preloader","searchInpt","backgroundModal","closeAddPerf","savePerfBtn","perfName","perfType","perfUrl","perfActs","perfPoints","perfNotes","addActBtn","searchResults","closeCardPerf","backgroundCard","addPointsBtn","addRightPointBtn","addLeftPointBtn","backgroundPoints","closeEditPointsBtn","userPointsBack","closeUserPoints","cardPerfName","cardPerfImg","cardPerfType","cardPerfActs","cardPerfPoints","cardPerfNotes","totalPointsSpan","getActsEnding","actsNum","ending","showPerformanceCard","display","scrollTo","showUsualPointsTable","fillCardPerformanceActs","type","acts","length","clearDomElement","actLine","span1","span2","setAttribute","appendChild","fillCardPerformancePoints","points","childNodes","removeChild","totalPoints","countPointsNum","fillUserPointsTable","btn","userPerfCardBack","height","offsetHeight","i","fillPerformanceCard","performance","name","imgUrl","src","notes","innerHTML","editBt","openEdit","rmBt","confirm","save","_id","parentElement","remove","elem","firstChild","fillSearchResults","results","srchResults","el","b","oninput","srchQuery","test","queryStr","JSON","parse","responseText","perfs","setTimeout","sp","ip","rm","add","addAct","target","em","fillEditCardPointsDiv","fillPointsEditModal","nSp","openEditTable","isEmpty","obj","prop","hasOwnProperty","stringify","leftTable","rightTable","trLeft","trRight","td2","td3","td4","numTotal","key1","inpt1","brSp","inpt2","stalls","split","inptMeters","meters","inptMach","machine","delsp","key2","totalNum","leftUsrTable","rightUsrTable","saveEditingPoints","leftPoints","getElementsByClassName","rightPoints","line1","line2","lastChild","backgroundColor","addPoint","childNum","nextChildNum","spanAct","timeInpt","delBtn","insertBefore","checkActs","children","inputsValid","perfId","action","includes","push","perfData","reload","side","tr","brSpan","td","inpt","delSp","SkedApp","state","needToSave","todayISODate","Date","now","wdays","dayFrom","monthFrom","yearFrom","dayTo","monthTo","yearTo","skedMainTb","nextSkedBtn","saveSkedBtn","prevSkedBtn","newSkedBtn","fillWithWorkers","workers","currWorkers","sel","opt1","opt2","opt3","dayNum","username","key","shifts","saveState","skedState","tableRows","worker","fromDate","fromISODate","getMonth","getDate","getFullYear","toDate","toISODate","console","log","error","fillUpperDates","from","to","dtFrom","dtTo","getSked","postQuery","responseData","prev","next","sked","skedData","data","fillTableHeader","dates","init","addEventListener","nextSked","today","rows","dt","newFrom","dateFrom","dateeFrom","weekday","getDay","weekdates","date","iso"],"mappings":"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","file":"../main.min.js","sourcesContent":["function request(method, url, query, cb) {\n  const xhttp = new XMLHttpRequest();\n  xhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n      cb(\"success\", this);\n    } else if (this.readyState == 4 && this.status == 500) {\n      cb(\"error\", this);\n    }\n  };\n \n  xhttp.onerror = function(e) {\n    if(e.currentTarget.status == 0) {\n      // console.log(\"error of net\");\n      cb(\"econn\");\n    }\n  };\n  xhttp.open(method, url, true);\n\n  if(query !== false) {\n    xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n    xhttp.send(query);\n  } else {\n    xhttp.send();\n  }\n}","function Auth(baseUrl = \"\") {\n  const _this = this;\n  this.BASE_URL = baseUrl;\n\n  this.authBt = document.getElementById(\"auth-bt\");\n  this.login = document.getElementById(\"login\");\n  this.pass = document.getElementById(\"pass\");\n\n  this.authBt.onclick = function() {\n    let login = _this.login.value;\n    let pass = _this.pass.value;\n\n    if(!login || !pass) {\n      return alert(\"Отсутствует логин или пароль\");\n    }\n    request(\"POST\", _this.BASE_URL + \"/auth\", `login=${login}&pass=${pass}`, function(status, res) {\n      if(status == \"success\") {\n        alert(\"Авторизация успешна и будет действительна в течение 30 дней\");\n        if (_this.BASE_URL === \"\") {\n          return window.location.href = \"/\";\n        } else {\n          return Rocky.setWorkspaceTo(\"performances\");\n        }\n      } else if(status == \"error\") {\n        alert(\"Ошибка авторизации, проверьте введённые Вами данные\");\n        return;\n      }\n    });\n  }\n}","function Authenticate(baseUrl = \"\") {\n  const _this = this;\n  this.BASE_URL = baseUrl;\n\n  this.login = document.getElementById(\"login\");\n  this.pass1 = document.getElementById(\"pass1\");\n  this.pass2 = document.getElementById(\"pass2\");\n  this.authenBt = document.getElementById(\"authenticate-bt\");\n\n  this.login.onclick = function() {\n    _this.login.style.borderColor = \"initial\";\n  };\n  this.pass1.onclick = function() {\n    _this.pass1.style.borderColor = \"initial\";\n  };\n  this.pass2.onclick = function() {\n    _this.pass2.style.borderColor = \"initial\";\n  };\n  \n  this.authenBt.onclick = function() {\n    // check inputs \n    if(!_this.login.value) {\n      return _this.login.style.borderColor = \"red\";\n    } else if(!_this.pass1.value) {\n      return _this.pass1.style.borderColor = \"red\";\n    } else if(!_this.pass2.value) {\n      return _this.pass2.style.borderColor = \"red\";\n    }\n\n    let login = _this.login.value;\n    let pass1 = _this.pass1.value;\n    let pass2 = _this.pass2.value;\n    let q = `login=${login}&pass1=${pass1}&pass2=${pass2}`;\n\n    // check passes match\n    if(pass1 !== pass2) {\n      return alert(\"Введённые пароли не совпадают\");\n    }\n\n    request(\"POST\", _this.BASE_URL + \"/authenticate\", q, function(status, res) {\n      if(status == \"success\") {\n        alert(\"Аутентификация успешна, сейчас вы будете перенаправлены на страницу логина\");\n        if (_this.BASE_URL === \"\") {\n          return window.location.href = \"/auth\";\n        } else {\n          return Rocky.setWorkspaceTo(\"login\");\n        }\n      } else if(status == \"error\") {\n        alert(\"Ошибка аутентификации, проверьте все поля\");\n        return;\n      }\n    });\n  };\n } ","function updateBreadcrump() {\n  const mainBreadcrump = document.getElementById(\"bread-crump\");\n  const currPage = window.location.pathname;\n  const pagesMap = {\n    \"/\": \"Главная\",\n    \"/materials\": \"Материалы\",\n    \"/performances\": \"Спектакли\",\n  };\n  mainBreadcrump.textContent = pagesMap[currPage];\n}","function Notes(baseUrl = \"\") {\n  const _this = this;\n  this.BASE_URL = baseUrl;\n  const lastNotesDiv = document.getElementById(\"last-notes\");\n\n  this.createHtmlForNote = () => {\n    const noteDiv = document.createElement(\"div\");\n    \n  };\n\n  this.uploadLastTenNotes = () => {\n    request(\"POST\", _this.BASE_URL + \"/notes\", `get=last10notes`, (status, res) => {\n      if (status == \"success\") {\n\n      } else if (status == \"error\") {\n        alert(\"Ошибка запроса последних заметок, проверьте соединение или попробуйте позже\");\n        return;\n      }\n    });\n  };\n}","function Performance(baseUrl = \"\", admin = \"false\") {\n\n  const _this = this;\n  this.BASE_URL = baseUrl;\n\n  this.pointsData = {\n    leftSide: {},\n    rightSide: {}\n  };\n  // \n  this.totalPointsNum = 0;\n  this.addPerfBtn = document.getElementById(\"add-performance-btn\");\n\n  this.preloader = document.getElementById(\"preloader\");\n  this.searchInpt = document.getElementById(\"search-perfs\");\n  this.backgroundModal = document.getElementById(\"background-modal\");\n  this.closeAddPerf = document.getElementById(\"close-adding-perf\");\n  this.savePerfBtn = document.getElementById(\"save-perf-btn\");\n  this.perfName = document.getElementById(\"perf-name\");\n  this.perfType = document.getElementById(\"perf-type\");\n  this.perfUrl = document.getElementById(\"perf-pic-url\");\n  this.perfActs = document.getElementById(\"perf-acts\");\n  this.perfPoints = document.getElementById(\"perf-points\");\n  this.perfNotes = document.getElementById(\"perf-notes\");\n  this.addActBtn = document.getElementById(\"add-act\");\n  this.searchResults = document.getElementById(\"search-results\");\n  this.closeCardPerf = document.getElementById(\"close-card-perf\");\n  this.backgroundCard = document.getElementById(\"card-back\");\n  this.addPointsBtn = document.getElementById(\"add-points\");\n  this.addRightPointBtn = document.getElementById(\"add-right-pt-btn\");\n  this.addLeftPointBtn = document.getElementById(\"add-left-pt-btn\");\n  this.backgroundPoints = document.getElementById(\"points-back\");\n  this.closeEditPointsBtn = document.getElementById(\"close-points-perf\");\n  this.userPointsBack = document.getElementById(\"user-points-back\");\n  this.closeUserPoints = document.getElementById(\"close-user-points\");\n\n  this.cardPerfName = document.getElementById(\"card-perf-name\");\n  this.cardPerfImg = document.getElementById(\"card-perf-img\");\n  this.cardPerfType = document.getElementById(\"card-perf-type\");\n  this.cardPerfActs = document.getElementById(\"card-perf-acts\");\n  this.cardPerfPoints = document.getElementById(\"card-perf-points\");\n  this.cardPerfNotes = document.getElementById(\"card-perf-notes\");\n\n  this.totalPointsSpan = document.getElementById(\"total-points-num\");\n\n  this.getActsEnding = function (actsNum) {\n    let ending;\n    if (actsNum == 1) {\n      ending = actsNum + \" акт\";\n    } else if (actsNum > 1 && actsNum < 5) {\n      ending = actsNum + \" акта\";\n    } else {\n      ending = actsNum + \"актов\";\n    }\n    return ending;\n  };\n\n  this.showPerformanceCard = function () {\n    // show usual performance card and scroll top\n    _this.backgroundCard.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.showUsualPointsTable = function () {\n    // show usual performance table and scroll top\n    _this.userPointsBack.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.fillCardPerformanceActs = function (type, acts) {\n    const cardPerfType = _this.cardPerfType;\n    const cardPerfActs = _this.cardPerfActs;\n\n    // fill usual performance card with acts\n    if (type === \"ballet\") {\n      cardPerfType.textContent = `Балет, ${_this.getActsEnding(acts.length)}`;\n    }\n    else if (type === \"opera\") {\n      cardPerfType.textContent = `Опера, ${_this.getActsEnding(acts.length)}`;\n    }\n\n    // clear act's element before filling it\n    _this.clearDomElement(cardPerfActs, function () {\n      // create and fill element for each act\n      for (let e = 0; e < acts.length; e++) {\n        let actLine = document.createElement(\"div\");\n        let span1 = document.createElement(\"span\");\n        let span2 = document.createElement(\"span\");\n\n        actLine.setAttribute(\"class\", \"act-line\");\n        span1.textContent = `${e + 1} Акт:`;\n        span2.textContent = `${acts[e]}`;\n\n        actLine.appendChild(span1);\n        actLine.appendChild(span2);\n        cardPerfActs.appendChild(actLine);\n      }\n    });\n  };\n\n  this.fillCardPerformancePoints = function (points) {\n    const cardPerfPoints = _this.cardPerfPoints;\n\n    // if there is no points \n    if (!points) {\n      // show that points is absent\n      if (cardPerfPoints.childNodes.length == 3) {\n        // clear old elements before filling\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n        // add 'absent' message \n        const i = document.createElement(\"i\");\n        i.textContent = \"– Отсутствуют\";\n        cardPerfPoints.appendChild(i);\n      }\n    }\n    else {\n      // if there IS points\n      if (cardPerfPoints.childNodes.length == 2) {\n        // clear user card points div before filling\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n      } else if (cardPerfPoints.childNodes.length == 3) {\n        // clear old elements before filling\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n        cardPerfPoints.removeChild(cardPerfPoints.childNodes[1]);\n      }\n\n      // fill performance card with number of points total\n      const totalPoints = document.createElement(\"p\");\n      totalPoints.setAttribute(\"class\", \"total-points-usr\");\n      totalPoints.textContent = `Всего: ${_this.countPointsNum(points)} шт.`;\n      cardPerfPoints.appendChild(totalPoints);\n\n      // fill usual table itself with points\n      _this.fillUserPointsTable(points);\n\n      // add show usual points button\n      const btn = document.createElement(\"button\");\n      btn.setAttribute(\"class\", \"showPoints-btn\");\n      btn.textContent = \"Просмотр\";\n      btn.onclick = function () {\n        let userPointsBack = _this.userPointsBack;\n        let userPerfCardBack = _this.backgroundCard;\n\n        // set point table's background height as much as performance card background\n        userPointsBack.style.height = userPerfCardBack.offsetHeight + \"px\";\n\n        // show usual table on click\n        _this.showUsualPointsTable();\n      };\n      // append above button to usual card if it is absent\n      cardPerfPoints.appendChild(btn);\n    }\n  };\n\n  this.fillPerformanceCard = function (performance) {\n    // filling usual performance card\n    const cardPerfName = _this.cardPerfName;\n    const cardPerfImg = _this.cardPerfImg;\n    const cardPerfNotes = _this.cardPerfNotes;\n\n    // fill permormance name\n    cardPerfName.textContent = performance.name;\n\n    // show performance img if exists\n    if (performance.imgUrl) {\n      cardPerfImg.src = _this.BASE_URL + \"/static/imgs/performance-imgs/\" + performance.imgUrl;\n      cardPerfImg.style.display = \"inline-block\";\n    } \n    else {\n      cardPerfImg.src =  _this.BASE_URL + \"/static/imgs/performance-imgs/no-photo.png\";\n      cardPerfImg.style.display = \"inline-block\";\n    }\n\n    // fill performance acts\n    _this.fillCardPerformanceActs(performance.type, performance.acts);\n\n    // fill performance card itself with existing points\n    _this.fillCardPerformancePoints(performance.points);\n\n    // fill notes\n    if (performance.notes != \"\") {\n      cardPerfNotes.innerHTML = performance.notes;\n    } else {\n      cardPerfNotes.textContent = \"– Отсутствуют\";\n    }\n\n    // if user is admin, add editing buttons\n    if (admin === \"true\") {\n      // add edit performance button\n      let editBt = document.createElement(\"button\");\n      editBt.setAttribute(\"class\", \"edit-btn\");\n      editBt.textContent = \"Редактировать\";\n      editBt.onclick = function () {\n        _this.openEdit(performance);\n      };\n      // add remove performance button\n      let rmBt = document.createElement(\"button\");\n      rmBt.setAttribute(\"class\", \"rm-perf-btn\");\n      rmBt.textContent = \"Удалить\";\n      rmBt.onclick = function () {\n        if (confirm(`Вы действительно хотите удалить спектакль \"${performance.name}\" из базы?`)) {\n          _this.save(performance._id, \"remove\");\n        }\n      };\n\n      // add edit and remove buttons if no ones\n      const cardElemCount = cardPerfName.parentElement.childNodes.length;\n      if (cardElemCount == 5) {\n        cardPerfName.parentElement.appendChild(editBt);\n        cardPerfName.parentElement.appendChild(rmBt);\n      }\n      else {\n        // if there is ones, replace them with new ones\n        cardPerfName.parentElement.childNodes[5].remove();\n        cardPerfName.parentElement.childNodes[5].remove();\n        cardPerfName.parentElement.appendChild(editBt);\n        cardPerfName.parentElement.appendChild(rmBt);\n      }\n    }\n    // update function of save performance button of usual card\n    _this.savePerfBtn.onclick = function () {\n      _this.save(performance._id, \"update\");\n    };\n  };\n\n  this.clearDomElement = function (elem, cb) {\n    // safe and fast way to clear dom element\n    while (elem.firstChild) {\n      elem.removeChild(elem.firstChild);\n    }\n    return cb();\n  };\n\n  // filling search results div with found performanes\n  this.fillSearchResults = function (results) {\n\n    const srchResults = _this.searchResults;\n\n    // if nothing found\n    if (results.length == 0) {\n      const el = document.createElement(\"div\");\n      el.setAttribute(\"class\", \"perf-name-found nothing-found\");\n      el.textContent = \"Ничего не найдено\";\n      if (!srchResults.childNodes[0]) {\n        srchResults.appendChild(el);\n      }\n    }\n    else {\n      // fill search div with elements with performance's names\n      for (let i = 0; i < results.length; i++) {\n        let el = document.createElement(\"div\");\n        el.setAttribute(\"class\", \"perf-name-found\");\n        el.textContent = results[i].name;\n\n        // on click -> fill and show perfrormance card modal\n        el.onclick = function () {\n          _this.fillPerformanceCard(results[i]);\n          _this.showPerformanceCard();\n        };\n        for (let b = 0; b < srchResults.childNodes.length; b++) {\n          if (srchResults.childNodes[b].textContent == el.textContent) {\n            return;\n          }\n        }\n        srchResults.appendChild(el);\n      }\n    }\n  };\n\n  this.searchInpt.oninput = function () {\n    if (_this.searchInpt.value && _this.searchInpt.value != \"\") {\n      // clear search results div \n      _this.clearDomElement(_this.searchResults, function () {\n        const srchQuery = _this.searchInpt.value;\n        const rgx = /^\\s*$/;\n        // const rgx2 = /^\\.+/;\n\n        // regex test if query does not start with empty value .\n        // && !rgx2.test(srchQuery)\n        if (!rgx.test(srchQuery)) {\n          const queryStr = `query=${srchQuery}`;\n          _this.preloader.style.display = \"block\";\n          // send the above query to the server\n          request(\"POST\", _this.BASE_URL + \"/perf-search\", queryStr, function (status, res) {\n            if (status === \"success\") {\n              const results = JSON.parse(res.responseText).perfs;\n\n              // fill search div with results found \n              _this.fillSearchResults(results);\n              _this.preloader.style.display = \"none\";\n            }\n            else if (status == \"error\") {\n              _this.preloader.style.display = \"none\";\n              return;\n            } else if (status == \"econn\") {\n              _this.preloader.style.display = \"none\";\n              const el = document.createElement(\"div\");\n              el.setAttribute(\"class\", \"perf-name-found nothing-found\");\n              el.textContent = \"Проверьте интернет соединение\";\n              if (!_this.searchResults.childNodes[0]) {\n                _this.searchResults.appendChild(el);\n              }\n            }\n          });\n        } else {\n          _this.fillSearchResults([]);\n        }\n      });\n    } else {\n      setTimeout(function () {\n        // clear search results div \n        _this.clearDomElement(_this.searchResults, function () { });\n      }, 100);\n    }\n  };\n\n  this.openEdit = function (performance) {\n    _this.pointsData = performance.points;\n\n    _this.backgroundCard.style.display = \"none\";\n    _this.backgroundModal.style.display = \"block\";\n\n    this.perfName.value = performance.name;\n    this.perfType.value = performance.type;\n    this.perfUrl.value = performance.imgUrl;\n\n    // fill editing window with acts\n\n    if (performance.acts.length > 0) {\n      this.perfActs.innerHTML = \"\";\n\n      let actLine, sp, ip, rm, add;\n      for (let i = 0; i < performance.acts.length; i++) {\n        actLine = document.createElement(\"actLine\");\n        actLine.setAttribute(\"class\", \"act-line\");\n\n        sp = document.createElement(\"span\");\n        sp.setAttribute(\"class\", \"perf-act\");\n        sp.textContent = (i + 1) + \":\";\n        actLine.appendChild(sp);\n        ip = document.createElement(\"input\");\n        ip.setAttribute(\"class\", \"act-time\");\n        ip.setAttribute(\"type\", \"text\");\n        ip.setAttribute(\"placeholder\", \"1ч 15мин\");\n        ip.value = performance.acts[i];\n        actLine.appendChild(ip);\n        if (i == 0) {\n          add = document.createElement(\"button\");\n          add.setAttribute(\"class\", \"add-mini-btn\");\n          add.textContent = \"+\";\n          add.onclick = function () {\n            _this.addAct();\n          };\n          actLine.appendChild(add);\n        } else {\n          rm = document.createElement(\"span\");\n          rm.setAttribute(\"class\", \"del-act-btn\");\n          rm.textContent = \"X\";\n          rm.onclick = function (e) {\n            e.target.parentElement.remove();\n          };\n          actLine.appendChild(rm);\n        }\n        em = document.createElement(\"button\");\n        sp.setAttribute(\"class\", \"perf-act\");\n        this.perfActs.appendChild(actLine);\n      }\n\n    }\n    _this.fillEditCardPointsDiv(performance.points);\n    _this.fillPointsEditModal(performance.points);\n    this.perfNotes.value = performance.notes;\n\n    // change text of save button\n    this.savePerfBtn.textContent = \"Сохранить изменения\";\n    this.savePerfBtn.onclick = function () {\n      _this.save(performance._id, \"update\");\n    };\n  };\n\n  this.fillEditCardPointsDiv = function (points) {\n    // fill editing table with points\n    if (points) {\n      // fill preview modal\n      _this.perfPoints.childNodes[0].remove();\n      _this.perfPoints.childNodes[0].remove();\n      let nSp = document.createElement(\"span\");\n      nSp.setAttribute(\"class\", \"points-number\");\n      nSp.textContent = _this.countPointsNum(points) + \" шт.\";\n      let openEditTable = document.createElement(\"span\");\n      openEditTable.setAttribute(\"class\", \"showPoints-btn\");\n      openEditTable.textContent = \"Редактор\";\n      openEditTable.onclick = function () {\n        _this.fillPointsEditModal(points);\n        // set edit points' background height as much as edit card background\n        _this.backgroundPoints.style.height = _this.backgroundModal.offsetHeight + \"px\";\n        _this.backgroundPoints.style.display = \"block\";\n        window.scrollTo(0, 0);\n      }\n      _this.perfPoints.appendChild(nSp);\n      _this.perfPoints.appendChild(openEditTable);\n    }\n  };\n\n  this.isEmpty = function (obj) {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n    return JSON.stringify(obj) === JSON.stringify({});\n  };\n\n  this.fillPointsEditModal = function (points) {\n    if (!points) {\n      points = {};\n    }\n\n    let leftTable = document.getElementById(\"left-table\");\n    let rightTable = document.getElementById(\"right-table\");\n\n    // clear before filling\n    while (leftTable.childNodes.length != 1) {\n      leftTable.childNodes[leftTable.childNodes.length - 1].remove();\n    }\n    while (rightTable.childNodes.length != 1) {\n      rightTable.childNodes[rightTable.childNodes.length - 1].remove();\n    }\n\n    _this.totalPointsNum = _this.countPointsNum(points);\n\n    let numTotal = document.getElementById(\"total-points-num\");\n    numTotal.textContent = _this.countPointsNum(points) + \" шт.\";\n\n    let trLeft, trRight, td2, td3, td4;\n    for (key1 in points.leftSide) {\n      if (_this.isEmpty(points.leftSide[key1])) {\n        continue;\n      }\n\n      trLeft = document.createElement(\"tr\");\n      trLeft.setAttribute(\"class\", \"left-point-rope\");\n      trLeft.appendChild(document.createElement(\"td\"));\n\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      // fill them with inputs\n      let inpt1, brSp, inpt2;\n      inpt1 = document.createElement(\"input\");\n      inpt1.setAttribute(\"type\", \"number\");\n      inpt1.setAttribute(\"class\", \"lines\");\n      inpt1.value = points.leftSide[key1].stalls.split('/')[0];\n      brSp = document.createElement(\"span\");\n      brSp.textContent = \"/\";\n      inpt2 = document.createElement(\"input\");\n      inpt2.setAttribute(\"type\", \"number\");\n      inpt2.setAttribute(\"class\", \"lines\");\n      inpt2.value = points.leftSide[key1].stalls.split('/')[1];\n      td2.appendChild(inpt1);\n      td2.appendChild(brSp);\n      td2.appendChild(inpt2);\n\n      let inptMeters = document.createElement(\"input\");\n      inptMeters.setAttribute(\"type\", \"number\");\n      inptMeters.setAttribute(\"class\", \"meters\");\n      inptMeters.value = points.leftSide[key1].meters;\n      td3.appendChild(inptMeters);\n\n      let inptMach = document.createElement(\"input\");\n      inptMach.setAttribute(\"type\", \"number\");\n      inptMach.setAttribute(\"class\", \"machine\");\n      inptMach.value = points.leftSide[key1].machine;\n      td4.appendChild(inptMach);\n      let delsp = document.createElement(\"span\");\n      delsp.setAttribute(\"class\", \"del-point-rope\");\n      delsp.textContent = \"X\";\n      delsp.onclick = function (e) {\n        if (confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          _this.totalPointsNum--;\n          _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n        }\n      };\n      td4.appendChild(delsp);\n\n      trLeft.appendChild(td2);\n      trLeft.appendChild(td3);\n      trLeft.appendChild(td4);\n      leftTable.appendChild(trLeft);\n    }\n\n    for (key2 in points.rightSide) {\n      if (_this.isEmpty(points.rightSide[key2])) {\n        continue;\n      }\n      trRight = document.createElement(\"tr\");\n      trRight.setAttribute(\"class\", \"right-point-rope\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      // fill them with inputs\n      let inpt1, brSp, inpt2;\n      inpt1 = document.createElement(\"input\");\n      inpt1.setAttribute(\"type\", \"number\");\n      inpt1.setAttribute(\"class\", \"lines\");\n      inpt1.value = points.rightSide[key2].stalls.split('/')[0];\n      brSp = document.createElement(\"span\");\n      brSp.textContent = \"/\";\n      inpt2 = document.createElement(\"input\");\n      inpt2.setAttribute(\"type\", \"number\");\n      inpt2.setAttribute(\"class\", \"lines\");\n      inpt2.value = points.rightSide[key2].stalls.split('/')[1];\n      td2.appendChild(inpt1);\n      td2.appendChild(brSp);\n      td2.appendChild(inpt2);\n\n      let inptMeters = document.createElement(\"input\");\n      inptMeters.setAttribute(\"type\", \"number\");\n      inptMeters.setAttribute(\"class\", \"meters\");\n      inptMeters.value = points.rightSide[key2].meters;\n      td3.appendChild(inptMeters);\n\n      let inptMach = document.createElement(\"input\");\n      inptMach.setAttribute(\"type\", \"number\");\n      inptMach.setAttribute(\"class\", \"machine\");\n      inptMach.value = points.rightSide[key2].machine;\n      td4.appendChild(inptMach);\n      let delsp = document.createElement(\"span\");\n      delsp.setAttribute(\"class\", \"del-point-rope\");\n      delsp.textContent = \"X\";\n      delsp.onclick = function (e) {\n        if (confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          _this.totalPointsNum--;\n          _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n        }\n      };\n      td4.appendChild(delsp);\n      trRight.appendChild(td2);\n      trRight.appendChild(td3);\n      trRight.appendChild(td4);\n      rightTable.appendChild(trRight);\n    }\n  };\n\n  this.countPointsNum = function (points) {\n    let totalNum = 0;\n    if (!points) {\n      return 0;\n    }\n    for (key1 in points.leftSide) {\n      if (!_this.isEmpty(points.leftSide[key1])) {\n        totalNum++;\n      }\n    }\n    for (key1 in points.rightSide) {\n      if (!_this.isEmpty(points.rightSide[key1])) {\n        totalNum++;\n      }\n    }\n    return totalNum;\n  };\n\n  this.closeUserPoints.onclick = function () {\n    // close user table points\n    _this.userPointsBack.style.display = \"none\";\n  };\n\n  this.fillUserPointsTable = function (points) {\n    let leftUsrTable = document.getElementById(\"left-usr-table\");\n    let rightUsrTable = document.getElementById(\"right-usr-table\");\n\n    // clear before filling\n    while (leftUsrTable.childNodes[1]) {\n      leftUsrTable.childNodes[1].remove();\n    }\n    while (rightUsrTable.childNodes[1]) {\n      rightUsrTable.childNodes[1].remove();\n    }\n\n    let numTotal = document.getElementById(\"total-user-points\");\n    numTotal.textContent = _this.countPointsNum(points) + \" шт.\";\n\n    let trLeft, trRight, td2, td3, td4;\n    for (key1 in points.leftSide) {\n      trLeft = document.createElement(\"tr\");\n      trLeft.appendChild(document.createElement(\"td\"));\n\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      td2.textContent = points.leftSide[key1].stalls;\n      trLeft.appendChild(td2);\n      td3.textContent = points.leftSide[key1].meters;\n      trLeft.appendChild(td3);\n      td4.textContent = points.leftSide[key1].machine;\n      trLeft.appendChild(td4);\n      leftUsrTable.appendChild(trLeft);\n    }\n\n    for (key2 in points.rightSide) {\n      trRight = document.createElement(\"tr\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      td2.textContent = points.rightSide[key2].stalls;\n      trRight.appendChild(td2);\n      td3.textContent = points.rightSide[key2].meters;\n      trRight.appendChild(td3);\n      td4.textContent = points.rightSide[key2].machine;\n      trRight.appendChild(td4);\n      rightUsrTable.appendChild(trRight);\n    }\n  };\n\n  this.saveEditingPoints = function () {\n    // save points\n    let leftPoints = document.getElementsByClassName(\"left-point-rope\");\n    let rightPoints = document.getElementsByClassName(\"right-point-rope\");\n\n    // clear points data before filling it\n    _this.pointsData = {\n      leftSide: {},\n      rightSide: {}\n    };\n\n    if (leftPoints.length == 0 && rightPoints.length == 0) {\n      _this.backgroundPoints.style.display = \"none\";\n      return;\n    }\n\n    for (let i = 0; i < leftPoints.length; i++) {\n      _this.pointsData.leftSide[\"point\" + (i + 1)] = {};\n      for (let b = 1; b < leftPoints[i].childNodes.length; b++) {\n        if (b == 1) {\n          let line1 = leftPoints[i].childNodes[b].firstChild;\n          let line2 = leftPoints[i].childNodes[b].lastChild;\n          // check if empty\n          if (!line1.value) {\n            line1.parentElement.style.backgroundColor = \"red\";\n            line1.onclick = function () {\n              line1.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          } else if (!line2.value) {\n            line2.parentElement.style.backgroundColor = \"red\";\n            line2.onclick = function () {\n              line2.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.leftSide[\"point\" + (i + 1)].stalls = line1.value + \"/\" + line2.value;\n        } else if (b == 2) {\n          // check if empty\n          if (!leftPoints[i].childNodes[b].firstChild.value) {\n            leftPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"red\";\n            leftPoints[i].childNodes[b].firstChild.onclick = function () {\n              leftPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"initial\";\n            }\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.leftSide[\"point\" + (i + 1)].meters = leftPoints[i].childNodes[b].firstChild.value;\n        } else if (b == 3) {\n          _this.pointsData.leftSide[\"point\" + (i + 1)].machine = leftPoints[i].childNodes[b].firstChild.value;\n        }\n      }\n    }\n    for (let i = 0; i < rightPoints.length; i++) {\n      _this.pointsData.rightSide[\"point\" + (i + 1)] = {};\n      for (let b = 1; b < rightPoints[i].childNodes.length; b++) {\n        if (b == 1) {\n          let line1 = rightPoints[i].childNodes[b].firstChild;\n          let line2 = rightPoints[i].childNodes[b].lastChild;\n\n          // check if empty\n          if (!line1.value) {\n            line1.parentElement.style.backgroundColor = \"red\";\n            line1.onclick = function () {\n              line1.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          } else if (!line2.value) {\n            line2.parentElement.style.backgroundColor = \"red\";\n            line2.onclick = function () {\n              line2.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n\n          _this.pointsData.rightSide[\"point\" + (i + 1)].stalls = line1.value + \"/\" + line2.value;\n        } else if (b == 2) {\n          // check if empty\n          if (!rightPoints[i].childNodes[b].firstChild.value) {\n            rightPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"red\";\n            rightPoints[i].childNodes[b].firstChild.onclick = function () {\n              rightPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"initial\";\n            }\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.rightSide[\"point\" + (i + 1)].meters = rightPoints[i].childNodes[b].firstChild.value;\n        } else if (b == 3) {\n          _this.pointsData.rightSide[\"point\" + (i + 1)].machine = rightPoints[i].childNodes[b].firstChild.value;\n        }\n      }\n    }\n\n    // fill editing card points div\n    _this.fillEditCardPointsDiv(_this.pointsData);\n    _this.backgroundPoints.style.display = \"none\";\n  };\n\n  this.closeEditPointsBtn.onclick = function () {\n    _this.saveEditingPoints();\n  };\n\n  this.addPointsBtn.onclick = function () {\n    _this.backgroundPoints.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.closeCardPerf.onclick = function () {\n    _this.savePerfBtn.onclick = function () {\n      _this.save(false, \"create\");\n    };\n\n    _this.backgroundCard.style.display = \"none\";\n  };\n\n  if (admin === \"true\") {\n    this.addPerfBtn.onclick = function () {\n      _this.backgroundModal.style.display = \"block\";\n    };\n  }\n\n  this.closeAddPerf.onclick = function () {\n    _this.backgroundModal.style.display = \"none\";\n  };\n\n  this.savePerfBtn.onclick = function () {\n    _this.save(false, \"create\");\n  };\n\n  this.perfName.onclick = function () {\n    _this.perfName.style.borderColor = \"initial\";\n  };\n\n  this.perfType.onclick = function () {\n    _this.perfType.style.borderColor = \"initial\";\n  }\n\n  this.addActBtn.onclick = function () {\n    _this.addAct();\n  };\n\n  this.addRightPointBtn.onclick = function () {\n    _this.addPoint(\"right\");\n  }\n\n  this.addLeftPointBtn.onclick = function () {\n    _this.addPoint(\"left\");\n  }\n\n  this.addAct = function () {\n    // num of childnodes without button\n    let childNum = _this.perfActs.childNodes.length;\n    let nextChildNum = childNum + 1;\n\n    // create elements\n    let actLine = document.createElement(\"div\");\n    let spanAct = document.createElement(\"span\");\n    let timeInpt = document.createElement(\"input\");\n    let delBtn = document.createElement(\"span\");\n\n\n    // set attributes on them\n    actLine.setAttribute(\"class\", \"act-line\")\n    spanAct.setAttribute(\"class\", \"perf-act\");\n    spanAct.setAttribute(\"id\", \"perf-act\" + nextChildNum);\n    spanAct.textContent = nextChildNum + \":\";\n    timeInpt.setAttribute(\"type\", \"text\");\n    timeInpt.setAttribute(\"class\", \"act-time\");\n    timeInpt.setAttribute(\"id\", \"act-time\" + nextChildNum);\n    timeInpt.setAttribute(\"placeholder\", \"1ч 15мин\");\n    delBtn.setAttribute(\"id\", \"del-act-btn\" + nextChildNum);\n    delBtn.setAttribute(\"class\", \"del-act-btn\");\n    delBtn.textContent = \"X\";\n    delBtn.onclick = function () {\n      delBtn.parentElement.remove();\n    };\n\n    // add\n    actLine.appendChild(spanAct);\n    actLine.appendChild(timeInpt);\n    actLine.appendChild(delBtn);\n    _this.perfActs.insertBefore(actLine, _this.perfActs.childNodes[childNum]);\n  };\n\n  this.checkActs = function () {\n    // num of childnodes\n    let childNum = _this.perfActs.childNodes.length;\n    let children = _this.perfActs.childNodes;\n    for (let i = 0; i < childNum; i++) {\n\n      // check if act time exists for all children\n      if (!children[i].childNodes[1].value) {\n        children[i].childNodes[1].style.borderColor = \"red\";\n        children[i].childNodes[1].onclick = function () { return children[i].childNodes[1].style.borderColor = \"initial\"; };\n        return false;\n        break;\n      }\n    }\n    return true;\n  };\n\n  this.inputsValid = function () {\n    // check all inputs\n    if (!_this.perfName.value) {\n      _this.perfName.style.borderColor = \"red\";\n      return false;\n    }\n    else if (!_this.perfType.value) {\n      _this.perfType.style.borderColor = \"red\";\n      return false;\n    }\n    else if (!_this.checkActs()) {\n      _this.perfActs.borderColor = \"red\";\n      return false;\n    }\n    return true;\n  };\n\n  this.save = function (perfId, action) {\n    if (action === \"update\" || action === \"create\") {\n      // check for empty inputs\n      if (_this.inputsValid()) {\n        let name = _this.perfName.value;\n        let type = _this.perfType.value;\n        let imgUrl = _this.perfUrl.value;\n        let perfActs = [];\n        let perfNotes = _this.perfNotes.value;\n\n        // check if acts do not include commas\n        for (let i = 0; i < _this.perfActs.childNodes.length; i++) {\n          if (_this.perfActs.childNodes[i].childNodes[1].value.includes(\",\")) {\n            _this.perfActs.childNodes[i].childNodes[1].style.borderColor = \"red\";\n            return;\n          }\n          // add act to perfActs to save if validation passed\n          perfActs.push(_this.perfActs.childNodes[i].childNodes[1].value);\n        }\n\n        if (perfId && action === \"update\") {\n          let perfData = `name=${name}&type=${type}&imgUrl=${imgUrl}&acts=${perfActs}&points=${JSON.stringify(_this.pointsData)}&notes=${perfNotes}&perfId=${perfId}&action=${action}`;\n\n          // send data to Server\n          request(\"post\", _this.BASE_URL + \"/performances\", perfData, function (status, res) {\n            if (status == \"success\") {\n              alert(\"Спектакль обновлен успешно\");\n              _this.backgroundModal.style.display = \"none\";\n              window.location.reload();\n            }\n            else if (status == \"err\") {\n              return;\n            }\n          });\n        } else if (!perfId && action == \"create\") {\n          let perfData = `name=${name}&type=${type}&imgUrl=${imgUrl}&acts=${perfActs}&points=${JSON.stringify(_this.pointsData)}&notes=${perfNotes}&action=${action}`;\n          // send data to Server\n          request(\"post\", _this.BASE_URL + \"/performances\", perfData, function (status, res) {\n            if (status == \"success\") {\n              alert(\"Новый спектакль успешно добавлен\");\n              _this.backgroundModal.style.display = \"none\";\n              window.location.reload();\n            }\n            else if (status == \"err\") {\n              return;\n            }\n          });\n        }\n      }\n    }\n    else if (action === \"remove\") {\n      perfData = `perfId=${perfId}&action=${action}`;\n      // send data to Server\n      request(\"post\", _this.BASE_URL + \"/performances\", perfData, function (status, res) {\n        if (status == \"success\") {\n          alert(\"Спектакль успешно удалён\");\n          _this.backgroundModal.style.display = \"none\";\n          window.location.reload();\n        }\n        else if (status == \"err\") {\n          return;\n        }\n      });\n    }\n  };\n\n  this.addPoint = function (side) {\n    let tr = document.createElement(\"tr\");\n    let brSpan = document.createElement(\"span\");\n    brSpan.textContent = \"/\";\n\n    for (let i = 0; i < 4; i++) {\n      let td = document.createElement(\"td\");\n      if (i == 1) {\n        for (let b = 0; b < 2; b++) {\n          let inpt = document.createElement(\"input\");\n          inpt.setAttribute(\"type\", \"number\");\n          inpt.setAttribute(\"class\", \"lines\");\n          (b == 1 ? td.appendChild(brSpan) : null);\n          td.appendChild(inpt);\n        }\n      } else if (i == 2) {\n        let inpt = document.createElement(\"input\");\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"meters\");\n        td.appendChild(inpt);\n      } else if (i == 3) {\n        let inpt = document.createElement(\"input\");\n        let delSp = document.createElement(\"span\");\n        delSp.textContent = \"X\";\n        delSp.setAttribute(\"class\", \"del-point-rope\");\n        delSp.onclick = function (e) {\n          if (confirm(\"Удалить эту точку подвеса?\")) {\n            e.target.parentElement.parentElement.remove();\n            _this.totalPointsNum--;\n            _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n          }\n        };\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"machine\");\n        td.appendChild(inpt);\n        td.appendChild(delSp);\n      }\n      tr.appendChild(td);\n    }\n    // add\n    tr.setAttribute(\"class\", side + \"-point-rope\");\n    document.getElementById(side + \"-table\").appendChild(tr);\n\n    // increment total points\n    _this.totalPointsNum++;\n    _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n  };\n}","function SkedApp(baseUrl = \"\") {\n  const _this = this;\n  this.BASE_URL = baseUrl;\n\n  this.state = [];\n  this.needToSave = false;\n  this.todayISODate = new Date(Date.now());\n  const wdays = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"];\n  this.dayFrom = document.getElementById(\"day-from\");\n  this.monthFrom = document.getElementById(\"month-from\");\n  this.yearFrom = document.getElementById(\"year-from\");\n  this.dayTo = document.getElementById(\"day-to\");\n  this.monthTo = document.getElementById(\"month-to\");\n  this.yearTo = document.getElementById(\"year-to\");\n  const skedMainTb = document.getElementById(\"sked-main-tb\");\n  const nextSkedBtn = document.getElementById(\"next-sked-bt\");\n  const saveSkedBtn = document.getElementById(\"save-sked-bt\");\n  const prevSkedBtn = document.getElementById(\"prev-sked-bt\");\n  const newSkedBtn = document.getElementById(\"new-sked-bt\");\n  \n  this.fillWithWorkers = function(workers) {\n\n    const currWorkers = workers ? workers : _this.workers;\n    let tr, td, sel, opt1, opt2, opt3, dayNum = 0;\n\n    for(let i=0; i<currWorkers.length; i++) {\n      tr = document.createElement(\"tr\");\n      tr.setAttribute(\"class\", \"table-row-worker\");\n      td = document.createElement(\"td\");\n      td.textContent = currWorkers[i].username;\n      tr.appendChild(td);\n      \n      while(dayNum < 14) {\n        td = document.createElement(\"td\");\n        sel = document.createElement(\"select\");\n        sel.setAttribute(\"class\", \"shift-choose\");\n\n        opt1 = document.createElement(\"option\");\n        opt2 = document.createElement(\"option\");\n        opt3 = document.createElement(\"option\");\n        \n        opt1.textContent = \"–\";\n        opt2.textContent = \"8.30\";\n        opt3.textContent = \"16\";\n        sel.appendChild(opt1);\n        sel.appendChild(opt2);\n        sel.appendChild(opt3);\n\n        if(!workers) {\n          opt1.setAttribute(\"selected\", \"true\");\n        } else {\n          for(key in workers[i].shifts) {\n            if(opt1.textContent == workers[i].shifts[key]) {\n              opt1.setAttribute(\"selected\", \"true\");\n            }\n            else if(opt2.textContent == workers[i].shifts[key]) {\n              opt2.setAttribute(\"selected\", \"true\");\n            } \n            else if(opt3.textContent == workers[i].shifts[key]) {\n              opt3.setAttribute(\"selected\", \"true\");\n            }\n          }\n        }\n\n        td.appendChild(sel);\n        tr.appendChild(td);\n        dayNum++;\n      }\n      skedMainTb.appendChild(tr);\n      dayNum = 0;\n    }\n  };\n\n  this.saveState = function() {\n    const skedState = [];\n    const tableRows = document.getElementsByClassName(\"table-row-worker\");\n\n    for(let i=0; i<tableRows.length; i++) {\n      let shifts = {};\n\n      for(let b=1; b<tableRows[i].childNodes.length; b++) {\n        shifts[b] = tableRows[i].childNodes[b].firstChild.value;\n      }\n\n      let worker = {};\n      worker.username = tableRows[i].firstChild.textContent;\n      worker.shifts = shifts;\n\n      skedState.push(worker);\n    }\n\n    // to form saving post query\n    const fromDate = `${_this.fromISODate.getMonth()+1}/${_this.fromISODate.getDate()}/${_this.fromISODate.getFullYear()}`;\n    const toDate = `${_this.toISODate.getMonth()+1}/${_this.toISODate.getDate()}/${_this.toISODate.getFullYear()}`;\n    \n    // send data to the server to save\n    request(\"POST\", _this.BASE_URL + \"/save-sked\", `state=${JSON.stringify(skedState)}&from=${fromDate}&to=${toDate}`, function(status, res) {\n      if (status == \"success\") {\n        console.log(\"Sked draft was saved\");\n      } else if (status == \"error\") {\n        console.error(\"Error during saving current sked draft state\");\n      }\n    });\n  };\n\n  this.fillUpperDates = function(from, to) {\n    let dtFrom = new Date(from);\n    let dtTo = new Date(to);\n\n    _this.dayFrom.textContent = dtFrom.getDate();\n    _this.monthFrom.textContent = dtFrom.getMonth()+1;\n    _this.yearFrom.textContent = dtFrom.getFullYear();\n    _this.dayTo.textContent = dtTo.getDate();\n    _this.monthTo.textContent = dtTo.getMonth()+1;\n    _this.yearTo.textContent = dtTo.getFullYear();\n  };\n\n  this.getSked = function(from, to) {\n    const postQuery = from ? `from=${from}` : `to=${to}`;\n  \n    request(\"POST\", _this.BASE_URL + \"/sked\", postQuery, function (status, res) {\n      if (status == \"success\") {\n        const responseData = JSON.parse(res.responseText);\n\n        // if no previous sked or it is empty dates, hide previous button\n        if(responseData.prev == false || !responseData.prev) {\n          prevSkedBtn.style.display = \"none\";\n        } else {\n          prevSkedBtn.style.display = \"block\";\n        }\n        // if no next sked, or it is empty dates, hide next button\n        if(responseData.next == false| !responseData.next) {\n          nextSkedBtn.style.display = \"none\";\n          newSkedBtn.style.display = \"block\";\n        } else {\n          nextSkedBtn.style.display = \"block\";\n          newSkedBtn.style.display = \"none\";\n        }\n\n        // if it is sked data, fill with it\n        if(responseData.sked) {\n          const skedData = responseData.sked.data;\n\n          _this.fillUpperDates(responseData.sked.from, responseData.sked.to);\n          _this.fillTableHeader(responseData.sked.from, responseData.dates);\n          _this.fillWithWorkers(skedData);\n          // set current date from\n          _this.fromISODate = new Date(responseData.sked.from);\n          _this.toISODate = new Date(responseData.sked.to);\n        } \n        // otherwise, just fill new sked with current dates\n        else {\n          // hide new btn\n          newSkedBtn.style.display = \"none\";\n          prevSkedBtn.style.display = \"block\";\n\n          _this.fillTableHeader(responseData.from, responseData.dates);\n          _this.fillUpperDates(responseData.from, _this.toISODate);\n          _this.fillWithWorkers();\n          // set current date from\n          _this.fromISODate = new Date(responseData.from);\n        }\n      }\n      else if (status == \"error\") {\n        return;\n      }\n    });\n  };\n\n  this.init = function() {\n    if(nextSkedBtn) {\n      nextSkedBtn.addEventListener(\"click\", function() {\n        _this.saveState();\n        _this.needToSave = false;\n        _this.nextSked();\n      });      \n    } \n    if(saveSkedBtn) {\n      saveSkedBtn.onclick = function() {\n        _this.saveState();\n      };\n    }\n    if(newSkedBtn) {\n      newSkedBtn.onclick = function() {\n        _this.needToSave = true;\n        let fromPrev = confirm(\"Создать график с последнего числа предыдущего графика? При отмене график создастся с сегодняшнего дня.\");\n        let query;\n        if(fromPrev) {\n          query = `${_this.toISODate.getMonth()+1}/${_this.toISODate.getDate()}/${_this.toISODate.getFullYear()}`;\n        } else {\n          const today = new Date(Date.now());\n          query = `${today.getMonth()+1}/${today.getDate()}/${today.getFullYear()}`;\n        }\n\n        const rows = document.getElementsByClassName(\"table-row-worker\");\n        // clear table before;\n        while(rows[0]) {\n          rows[0].remove();\n        }\n\n        _this.getSked(query);\n      };\n    }\n    if(prevSkedBtn) {\n      prevSkedBtn.onclick = function() {\n        _this.saveState();\n        _this.needToSave = false;\n        let dt = `${_this.fromISODate.getMonth()+1}/${_this.fromISODate.getDate()}/${_this.fromISODate.getFullYear()}`;\n        const rows = document.getElementsByClassName(\"table-row-worker\");\n\n        // clear table before;\n        while(rows[0]) {\n          rows[0].remove();\n        }\n        _this.getSked(null, dt);\n      };\n    }\n    // get last sked created\n    _this.getSked(\"LAST\");\n  };\n\n  this.nextSked = function() {\n    const rows = document.getElementsByClassName(\"table-row-worker\");\n    while(rows[0]) {\n      rows[0].remove();\n    }\n    const newFrom = `${_this.toISODate.getMonth()+1}/${_this.toISODate.getDate()}/${_this.toISODate.getFullYear()}`;\n    _this.getSked(newFrom);\n  };\n\n  this.fillTableHeader = function(dateFrom, dates) {\n    let dateeFrom = new Date(dateFrom).getDate();\n \n    let weekday = new Date(dateFrom).getDay();\n    const weekdates = document.getElementsByClassName(\"weekdate\");\n    let next = false;\n \n    for(let i=0; i<weekdates.length; i++) {\n      for(let b=0; b<dates.length; b++) {\n        if(dates[b].date == dateeFrom) {\n          // if dates type is next month\n          if(next) {\n            if(dates[b].type != \"next\") {\n              continue;\n            } else {\n              weekdates[i].textContent = dates[b].date + \" \"+ wdays[weekday];\n            }\n          } else {\n            weekdates[i].textContent = dates[b].date + \" \"+ wdays[weekday];\n          }\n          \n          // set date To by last date\n          if(i+1 == weekdates.length && _this.needToSave == true) {\n            _this.toISODate = new Date(dates[b].iso);\n          }\n       \n          if(dates[b+1].type == \"next\"&& !next) {\n            next=true;\n            dateeFrom = 1;\n          } else {\n            dateeFrom++;\n          }\n          // update weekday\n          if(weekday <6) {\n            weekday++\n          } else {\n            weekday = 0;\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // setInterval(function() {\n  //   if(_this.needToSave == true) {\n  //     _this.saveState();\n  //   }\n  // }, 1000*60);\n};"]}