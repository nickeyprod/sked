{"version":3,"sources":["authenticate.js","authorisate.js","calendars.js","ical.js","performances.js","repertuar.js","request.js"],"names":["Authenticate","[object Object]","this","login","document","getElementById","pass1","pass2","authBtn","onclick","style","borderColor","authenticate","value","alert","authData","resp","request","statusText","window","location","href","Authorisate","loginInpt","passInpt","authorise","pass","Calendars","stageEvTime","stageEvMsg","tehEvTime","tehEvMsg","loadEvTime","loadEvMsg","stagePreloader","tehPreloader","loadPreloader","stageEvURL","tehEvURL","loadEvURL","onload","startUpdatingStageEvents","updateAllEvents","setInterval","type","display","url","status","console","error","json","evts","todayDate","todayEvents","key","evStart","Date","start","evEnd","end","getFullYear","getMonth","getDate","push","i","length","getTime","currTime","todayPlusHour","b","showPreloader","allStageEvents","getCalEvents","allTehEvents","allLoadEvents","noData","summary","now","todayStageEvents","getTodayEvents","currStageEvent","getCurrentEvent","nextStageEvent","getNextEvent","setEvent","hidePreloader","todayTehEvents","currTehEvent","nextTehEvent","todayLoadEvents","currLoadEvent","nextLoadEvent","evt","evType","textContent","undefined","getRusTime","time","timeStr","getHours","minutes","getMinutes","toString","iCal","intId","nowOnStage","nowOrNext","startPreloader","updateStageEvent","allEvents","currEvent","getCurrEvent","nextEvent","clearInterval","todayEvts","evStartDate","evEndDate","datePlusHour","str","Performance","e","edit","pointsData","leftSide","rightSide","totalPointsNum","addPerfBtn","preloader","searchInpt","backgroundModal","closeAddPerf","savePerfBtn","perfName","perfType","perfUrl","perfActs","perfPoints","perfNotes","addActBtn","searchResults","closeCardPerf","backgroundCard","addPointsBtn","addRightPointBtn","addLeftPointBtn","backgroundPoints","closeEditPointsBtn","userPointsBack","closeUserPoints","cardPerfName","cardPerfImg","cardPerfType","cardPerfActs","cardPerfPoints","cardPerfNotes","totalPointsSpan","save","addAct","addPoint","saveEditingPoints","scrollTo","oninput","clearDomElement","async","test","fillSearchResults","query","log","data","perfs","div","createElement","setAttribute","childNodes","appendChild","setTimeout","num","element","cb","firstChild","remove","acts","getActsEnding","s1","s2","points","p","countPointsNum","fillUserPointsTable","btn","height","offsetHeight","showUsualPointsTable","perf","name","imgUrl","src","origin","fillCardPerformanceActs","fillCardPerformancePoints","notes","innerHTML","openEdit","delBtn","confirm","_id","parentElement","results","fillPerformanceCard","showPerformanceCard","actLine","sp1","inpt","sp2","target","fillEditCardPointsDiv","fillPointsEditModal","span","span2","obj","prop","hasOwnProperty","JSON","stringify","trLeft","trRight","td1","td2","td3","leftTableFirstChild","rightTableFirstChild","leftPoint","isEmpty","input","sp","input2","stalls","split","input3","meters","input4","machine","delSpan","rightPoint","thenextContent","left","getElementsByClassName","right","t","o","first","last","lastChild","backgroundColor","insertBefore","childLen","children","checkActs","perfId","action","inputsValid","includes","reload","dt","point","tr","td","Repertuar","rollLine","day","todaySquare","offsetLeft","startAnimatingScroll","d","id","scrollLeft","method","fetch","headers","Content-Type","body"],"mappings":"AACA,MAAAA,aAEAC,cACAC,KAAAC,MAAAC,SAAAC,eAAA,SACAH,KAAAI,MAAAF,SAAAC,eAAA,SACAH,KAAAK,MAAAH,SAAAC,eAAA,SACAH,KAAAM,QAAAJ,SAAAC,eAAA,mBAEAH,KAAAC,MAAAM,QAAA,KACAP,KAAAC,MAAAO,MAAAC,YAAA,eAGAT,KAAAI,MAAAG,QAAA,KACAP,KAAAI,MAAAI,MAAAC,YAAA,eAGAT,KAAAK,MAAAE,QAAA,KACAP,KAAAK,MAAAG,MAAAC,YAAA,eAGAT,KAAAM,QAAAC,QAAA,KACAP,KAAAU,gBAIAX,qBACA,IAAAC,KAAAC,MAAAU,MAGA,OAFAC,MAAA,qEACAZ,KAAAC,MAAAO,MAAAC,YAAA,WAGA,IAAAT,KAAAI,MAAAO,MAGA,OAFAC,MAAA,uEACAZ,KAAAI,MAAAI,MAAAC,YAAA,WAGA,IAAAT,KAAAK,MAAAM,MAGA,OAFAC,MAAA,iFACAZ,KAAAK,MAAAG,MAAAC,YAAA,WAIA,GAAAT,KAAAI,MAAAO,QAAAX,KAAAK,MAAAM,MAEA,YADAC,MAAA,sCAIA,MAAAC,EAAA,CACAZ,MAAAD,KAAAC,MAAAU,MACAP,MAAAJ,KAAAI,MAAAO,MACAN,MAAAL,KAAAK,MAAAM,OAGAG,QAAAC,QAAA,gBAAA,OAAAF,GAEA,GAAA,qBAAAC,EAAAE,WAGA,MAAA,aAAAF,EAAAE,gBACAJ,MAAA,4CAEA,sBAAAE,EAAAE,gBACAJ,MAAA,uBAEA,iBAAAE,EAAAE,YACAJ,MAAA,mFACAK,OAAAC,SAAAC,KAAA,eAIAP,MAAA,yBAdAA,MAAA,gCCzDA,MAAAQ,YAEArB,cACAC,KAAAM,QAAAJ,SAAAC,eAAA,WACAH,KAAAqB,UAAAnB,SAAAC,eAAA,SACAH,KAAAsB,SAAApB,SAAAC,eAAA,QAEAH,KAAAM,QAAAC,QAAA,KACAP,KAAAuB,aAKAxB,kBAEA,IAAAC,KAAAqB,UAAAV,QAAAX,KAAAsB,SAAAX,MACA,OAAAC,MAAA,gCAGA,MAAAC,EAAA,CACAZ,MAAAD,KAAAqB,UAAAV,MACAa,KAAAxB,KAAAsB,SAAAX,OAGAG,QAAAC,QAAA,QAAA,OAAAF,GAEA,MAAA,4BAAAC,EAAAE,gBACAJ,MAAA,6BAEA,cAAAE,EAAAE,YACAJ,MAAA,oEACAK,OAAAC,SAAAC,KAAA,uBAGAP,MAAA,0CClCA,MAAAa,UACA1B,cACAC,KAAA0B,YAAAxB,SAAAC,eAAA,iBACAH,KAAA2B,WAAAzB,SAAAC,eAAA,gBAEAH,KAAA4B,UAAA1B,SAAAC,eAAA,eACAH,KAAA6B,SAAA3B,SAAAC,eAAA,cAEAH,KAAA8B,WAAA5B,SAAAC,eAAA,gBACAH,KAAA+B,UAAA7B,SAAAC,eAAA,eAEAH,KAAAgC,eAAA9B,SAAAC,eAAA,mBACAH,KAAAiC,aAAA/B,SAAAC,eAAA,iBACAH,KAAAkC,cAAAhC,SAAAC,eAAA,kBAGAH,KAAAmC,WAAA,kBACAnC,KAAAoC,SAAA,oBACApC,KAAAqC,UAAA,iBAEApB,OAAAqB,OAAA,KACAtC,KAAAuC,4BAIAxC,2BACAC,KAAAwC,kBACAC,YAAA,KACAzC,KAAAwC,mBACA,KAGAzC,cAAA2C,GACA,SAAAA,EACA1C,KAAAgC,eAAAxB,MAAAmC,QAAA,QACA,QAAAD,EACA1C,KAAAiC,aAAAzB,MAAAmC,QAAA,QACA,QAAAD,IACA1C,KAAAkC,cAAA1B,MAAAmC,QAAA,SAIA5C,cAAA2C,GACA,SAAAA,EACA1C,KAAAgC,eAAAxB,MAAAmC,QAAA,OACA,QAAAD,EACA1C,KAAAiC,aAAAzB,MAAAmC,QAAA,OACA,QAAAD,IACA1C,KAAAkC,cAAA1B,MAAAmC,QAAA,QAKA5C,mBAAA6C,GACA,MAAA9B,QAAAC,QAAA6B,EAAA,OACA,MAAA9B,EAAA+B,QACAC,QAAAC,MAAA,mCAGA,aADAjC,EAAAkC,QACAC,KAGAlD,eAAAkD,EAAAC,GACA,MAAAC,EAAA,GAEA,IAAA,IAAAC,KAAAH,EAAA,CACA,MAAAI,EAAA,IAAAC,KAAAL,EAAAG,GAAAG,OACAC,EAAA,IAAAF,KAAAL,EAAAG,GAAAK,KACAJ,EAAAK,eAAAR,EAAAQ,eAAAL,EAAAM,YAAAT,EAAAS,YAAAN,EAAAO,WAAAV,EAAAU,WAAAJ,EAAAI,WAAAV,EAAAU,WACAT,EAAAU,KAAAZ,EAAAG,IAGA,OAAAD,EAGApD,gBAAAkD,EAAAC,GAEA,IAAA,IAAAY,EAAA,EAAAA,EAAAb,EAAAc,OAAAD,IAAA,CACA,MAAAT,EAAA,IAAAC,KAAAL,EAAAa,GAAAP,OAAAS,UACAR,EAAA,IAAAF,KAAAL,EAAAa,GAAAL,KAAAO,UACAC,EAAAf,EAAAc,UAEA,GAAAX,EAAAY,GAAAT,EAAAS,EACA,OAAAhB,EAAAa,GAGA,OAAA,EAGA/D,aAAAkD,EAAAC,GAEA,IAAAgB,EAAAhB,EAAAc,UACA,IAAA,IAAAG,EAAA,EAAAA,EAAA,EAAAA,IAAA,CACAD,GAAA,KAEA,IAAA,IAAAJ,EAAA,EAAAA,EAAAb,EAAAc,OAAAD,IAAA,CACA,MAAAT,EAAA,IAAAC,KAAAL,EAAAa,GAAAP,OAAAS,UACAR,EAAA,IAAAF,KAAAL,EAAAa,GAAAL,KAAAO,UAEA,GAAAX,EAAAa,GAAAV,EAAAU,EACA,OAAAjB,EAAAa,KAOA/D,wBACAC,KAAAoE,cAAA,SACA,MAAAC,QAAArE,KAAAsE,aAAAtE,KAAAmC,YACAnC,KAAAoE,cAAA,QACA,MAAAG,QAAAvE,KAAAsE,aAAAtE,KAAAoC,UACApC,KAAAoE,cAAA,QACA,MAAAI,QAAAxE,KAAAsE,aAAAtE,KAAAqC,WAEAoC,EAAA,CAAAC,QAAA,cACAxB,EAAA,IAAAI,KAAAA,KAAAqB,OAEAC,EAAA5E,KAAA6E,eAAAR,EAAAnB,GACA4B,EAAA9E,KAAA+E,gBAAAH,EAAA1B,GACA8B,EAAAhF,KAAAiF,aAAAL,EAAA1B,GACAlD,KAAAkF,SAAAJ,IAAAE,GAAAP,GAAAvB,EAAA,SACAlD,KAAAmF,cAAA,SAEA,MAAAC,EAAApF,KAAA6E,eAAAN,EAAArB,GACAmC,EAAArF,KAAA+E,gBAAAK,EAAAlC,GACAoC,EAAAtF,KAAAiF,aAAAG,EAAAlC,GACAlD,KAAAkF,SAAAG,IAAAC,GAAAb,GAAAvB,EAAA,QACAlD,KAAAmF,cAAA,QAEA,MAAAI,EAAAvF,KAAA6E,eAAAL,EAAAtB,GACAsC,EAAAxF,KAAA+E,gBAAAQ,EAAArC,GACAuC,EAAAzF,KAAAiF,aAAAM,EAAArC,GACAlD,KAAAkF,SAAAM,IAAAC,GAAAhB,GAAAvB,EAAA,QACAlD,KAAAmF,cAAA,QAIApF,SAAA2F,EAAAxC,EAAAyC,GACA,SAAAA,EACA3F,KAAA2B,WAAAiE,YAAAF,EAAAhB,QACA,QAAAiB,EACA3F,KAAA6B,SAAA+D,YAAAF,EAAAhB,QACA,QAAAiB,IACA3F,KAAA+B,UAAA6D,YAAAF,EAAAhB,SAGAmB,MAAAH,EAAAnC,OAAAsC,MAAAH,EAAAjC,IACA,IAAAH,KAAAoC,EAAAnC,OAAAS,UAAAd,EAAAc,UACA,SAAA2B,EACA3F,KAAA0B,YAAAkE,YAAA,UAAA5F,KAAA8F,WAAAJ,EAAAnC,OAAA,MAAAvD,KAAA8F,WAAAJ,EAAAjC,KACA,QAAAkC,EACA3F,KAAA4B,UAAAgE,YAAA,UAAA5F,KAAA8F,WAAAJ,EAAAnC,OAAA,MAAAvD,KAAA8F,WAAAJ,EAAAjC,KACA,QAAAkC,IACA3F,KAAA8B,WAAA8D,YAAA,UAAA5F,KAAA8F,WAAAJ,EAAAnC,OAAA,MAAAvD,KAAA8F,WAAAJ,EAAAjC,MAGA,SAAAkC,EACA3F,KAAA0B,YAAAkE,YAAA,WAAA5F,KAAA8F,WAAAJ,EAAAnC,OAAA,MAAAvD,KAAA8F,WAAAJ,EAAAjC,KACA,QAAAkC,EACA3F,KAAA4B,UAAAgE,YAAA,WAAA5F,KAAA8F,WAAAJ,EAAAnC,OAAA,MAAAvD,KAAA8F,WAAAJ,EAAAjC,KACA,QAAAkC,IACA3F,KAAA8B,WAAA8D,YAAA,WAAA5F,KAAA8F,WAAAJ,EAAAnC,OAAA,MAAAvD,KAAA8F,WAAAJ,EAAAjC,MAKA,SAAAkC,EACA3F,KAAA0B,YAAAkE,YAAA,WACA,QAAAD,EACA3F,KAAA4B,UAAAgE,YAAA,WACA,QAAAD,IACA3F,KAAA8B,WAAA8D,YAAA,YAKA7F,WAAAgG,GAEA,IAAAC,GADAD,EAAA,IAAAzC,KAAAyC,IACAE,WACAC,EAAAH,EAAAI,aAKA,OAJA,GAAAD,EAAAE,WAAArC,SACAmC,EAAAA,EAAAE,WAAA,KAEAJ,GAAA,IAAAE,EACAF,GCzLA,MAAAK,KACAtG,cAEAC,KAAAsG,MAAA,KACAtG,KAAAuG,WAAArG,SAAAC,eAAA,gBACAH,KAAAwG,UAAAtG,SAAAC,eAAA,eAEAc,OAAAqB,OAAA,KACAtC,KAAAyG,iBACAzG,KAAAuC,4BAIAxC,2BACAC,KAAA0G,mBACAjE,YAAA,KACAzC,KAAA0G,oBACA,MAGA3G,yBACA,MAAA4G,QAAA3G,KAAAsE,eACApB,EAAA,IAAAI,KAAAA,KAAAqB,OACAxB,EAAAnD,KAAA6E,eAAA8B,EAAAzD,GACA0D,EAAA5G,KAAA6G,aAAA1D,EAAAD,GACAuB,EAAA,CAAAC,QAAA,cAEA,IAAAkC,EAAA,CACA,MAAAE,EAAA9G,KAAAiF,aAAA9B,EAAAD,GACA,OAAAlD,KAAAkF,SAAA4B,GAAArC,EAAAvB,GAEAlD,KAAAkF,SAAA0B,GAAAnC,EAAAvB,GAGAnD,qBACA,MAAAe,QAAAC,QAAA,kBAAA,OACA,MAAAD,EAAA+B,SACAkE,cAAA/G,KAAAsG,OACAtG,KAAAuG,WAAAX,YAAA,aAGA,aADA9E,EAAAkC,QACAC,KAGAlD,eAAAkD,EAAAC,GACA,MAAA8D,EAAA,GAEA,IAAA,IAAA5D,KAAAH,EAAA,CACA,MAAAgE,EAAA,IAAA3D,KAAAL,EAAAG,GAAAG,OACA2D,EAAA,IAAA5D,KAAAL,EAAAG,GAAAK,KACAwD,EAAAvD,eAAAR,EAAAQ,eAAAuD,EAAAtD,YAAAT,EAAAS,YAAAsD,EAAArD,WAAAV,EAAAU,WAAAsD,EAAAtD,WAAAV,EAAAU,WACAoD,EAAAnD,KAAAZ,EAAAG,IAIA,OAAA4D,EAGAjH,aAAAoD,EAAAD,GACA,IAAA,IAAAY,EAAA,EAAAA,EAAAX,EAAAY,OAAAD,IAAA,CACA,MAAAT,EAAA,IAAAC,KAAAH,EAAAW,GAAAP,OAAAS,UACAR,EAAA,IAAAF,KAAAH,EAAAW,GAAAL,KAAAO,UACAC,EAAAf,EAAAc,UAEA,GAAAX,EAAAY,GAAAT,EAAAS,EACA,OAAAd,EAAAW,GAIA,OAAA,EAGA/D,aAAAoD,EAAAD,GACA,IAAAiE,EAAAjE,EAAAc,UAEA,IAAA,IAAAG,EAAA,EAAAA,EAAA,EAAAA,IAAA,CACAgD,GAAA,KACA,IAAA,IAAArD,EAAA,EAAAA,EAAAX,EAAAY,OAAAD,IAAA,CACA,MAAAT,EAAA,IAAAC,KAAAH,EAAAW,GAAAP,OAAAS,UACAR,EAAA,IAAAF,KAAAH,EAAAW,GAAAL,KAAAO,UAEA,GAAAX,EAAA8D,GAAA3D,EAAA2D,EACA,OAAAhE,EAAAW,KAOA/D,WAAAgG,GAEA,MAAA,IADAA,EAAA,IAAAzC,KAAAyC,IACAE,cAAA,GAAAF,EAAAI,aAAAC,WAAArC,OAAAgC,EAAAI,aAAAC,WAAA,IAAAL,EAAAI,eAGApG,SAAA2F,EAAAxC,GAGA,GAFA6D,cAAA/G,KAAAsG,OAEAZ,GAAA,cAAAA,EAAAhB,QAAA,CACA,IAAApB,KAAAoC,EAAAnC,OAAAS,UAAAd,EAAAc,UACAhE,KAAAwG,UAAAZ,YAAA,kBAEA5F,KAAAwG,UAAAZ,YAAA,mBAEA,MAAAG,EAAA,KAAA/F,KAAA8F,WAAAJ,EAAAnC,OAAA,OAAAvD,KAAA8F,WAAAJ,EAAAjC,KACAzD,KAAAuG,WAAAX,YAAAG,EAAA,MAAAL,EAAAhB,aAGA1E,KAAAuG,WAAAX,YAAAF,EAAAhB,QAIA3E,iBACA,IAAAqH,EAAA,IACApH,KAAAsG,MAAA7D,YAAA,KACA2E,GAAA,IACApH,KAAAuG,WAAAX,YAAAwB,EACAA,EAAArD,OAAA,IAAAqD,EAAA,KACA,MCrHA,MAAAC,YACAtH,YAAAuH,EAAA,GAAAC,EAAA,SAEAvH,KAAAuH,KAAAA,EACAvH,KAAAwH,WAAA,CAAAC,SAAA,GAAAC,UAAA,IAEA1H,KAAA2H,eAAA,EACA3H,KAAA4H,WAAA1H,SAAAC,eAAA,uBACAH,KAAA6H,UAAA3H,SAAAC,eAAA,aACAH,KAAA8H,WAAA5H,SAAAC,eAAA,gBACAH,KAAA+H,gBAAA7H,SAAAC,eAAA,oBACAH,KAAAgI,aAAA9H,SAAAC,eAAA,qBACAH,KAAAiI,YAAA/H,SAAAC,eAAA,iBACAH,KAAAkI,SAAAhI,SAAAC,eAAA,aACAH,KAAAmI,SAAAjI,SAAAC,eAAA,aACAH,KAAAoI,QAAAlI,SAAAC,eAAA,gBACAH,KAAAqI,SAAAnI,SAAAC,eAAA,aACAH,KAAAsI,WAAApI,SAAAC,eAAA,eACAH,KAAAuI,UAAArI,SAAAC,eAAA,cACAH,KAAAwI,UAAAtI,SAAAC,eAAA,WACAH,KAAAyI,cAAAvI,SAAAC,eAAA,kBACAH,KAAA0I,cAAAxI,SAAAC,eAAA,mBACAH,KAAA2I,eAAAzI,SAAAC,eAAA,aACAH,KAAA4I,aAAA1I,SAAAC,eAAA,cACAH,KAAA6I,iBAAA3I,SAAAC,eAAA,oBACAH,KAAA8I,gBAAA5I,SAAAC,eAAA,mBACAH,KAAA+I,iBAAA7I,SAAAC,eAAA,eACAH,KAAAgJ,mBAAA9I,SAAAC,eAAA,qBACAH,KAAAiJ,eAAA/I,SAAAC,eAAA,oBACAH,KAAAkJ,gBAAAhJ,SAAAC,eAAA,qBACAH,KAAAmJ,aAAAjJ,SAAAC,eAAA,kBACAH,KAAAoJ,YAAAlJ,SAAAC,eAAA,iBACAH,KAAAqJ,aAAAnJ,SAAAC,eAAA,kBACAH,KAAAsJ,aAAApJ,SAAAC,eAAA,kBACAH,KAAAuJ,eAAArJ,SAAAC,eAAA,oBACAH,KAAAwJ,cAAAtJ,SAAAC,eAAA,mBACAH,KAAAyJ,gBAAAvJ,SAAAC,eAAA,oBAEA,SAAAH,KAAAuH,OACAvH,KAAA4H,WAAArH,QAAA,KACAP,KAAA+H,gBAAAvH,MAAAmC,QAAA,SAGA3C,KAAAgI,aAAAzH,QAAA,KACAP,KAAA+H,gBAAAvH,MAAAmC,QAAA,QAGA3C,KAAAiI,YAAA1H,QAAA,KACAP,KAAA0J,MAAA,EAAA,WAGA1J,KAAAkI,SAAA3H,QAAA,KACAP,KAAAkI,SAAA1H,MAAAC,YAAA,WAGAT,KAAAmI,SAAA5H,QAAA,KACAP,KAAAmI,SAAA3H,MAAAC,YAAA,WAGAT,KAAAwI,UAAAjI,QAAA,KACAP,KAAA2J,UAGA3J,KAAA6I,iBAAAtI,QAAA,KACAP,KAAA4J,SAAA,UAGA5J,KAAA8I,gBAAAvI,QAAA,KACAP,KAAA4J,SAAA,UAIA5J,KAAAgJ,mBAAAzI,QAAA,KACAP,KAAA6J,qBAGA7J,KAAA4I,aAAArI,QAAA,KACAP,KAAA+I,iBAAAvI,MAAAmC,QAAA,QACA1B,OAAA6I,SAAA,EAAA,IAGA9J,KAAA0I,cAAAnI,QAAA,KACAP,KAAAiI,YAAA1H,QAAA,KACAP,KAAA0J,MAAA,EAAA,WAEA1J,KAAA2I,eAAAnI,MAAAmC,QAAA,QAGA3C,KAAAkJ,gBAAA3I,QAAA,KACAP,KAAAiJ,eAAAzI,MAAAmC,QAAA,QAGA3C,KAAA8H,WAAAiC,QAAA,KACA/J,KAAA8H,WAAAnH,OAAA,IAAAX,KAAA8H,WAAAnH,MACAX,KAAAgK,gBAAAhK,KAAAyI,cAAAwB,UAEA,GAAA,QAAAC,KAAAlK,KAAA8H,WAAAnH,OACAX,KAAAmK,kBAAA,QAEA,CAEA,MAAAC,EAAA,CACAA,MAAApK,KAAA8H,WAAAnH,OAGAX,KAAA6H,UAAArH,MAAAmC,QAAA,QAEA,MAAA7B,QAAAC,QAAA,eAAA,OAAAqJ,GAEA,GADAtH,QAAAuH,IAAAvJ,GACA,MAAAA,EAAAE,WAAA,CACA,MAAAsJ,QAAAxJ,EAAAkC,OACAhD,KAAAmK,kBAAAG,EAAAC,OACAvK,KAAA6H,UAAArH,MAAAmC,QAAA,WACA,CACA,GAAA,UAAA7B,EACA,OAAAd,KAAA6H,UAAArH,MAAAmC,QAAA,OACA,GAAA,SAAA7B,EAAA,CACAd,KAAA6H,UAAArH,MAAAmC,QAAA,OACA,MAAA6H,EAAAtK,SAAAuK,cAAA,OACAD,EAAAE,aAAA,QAAA,iCACAF,EAAA5E,YAAA,gCACA5F,KAAAyI,cAAAkC,WAAA,IACA3K,KAAAyI,cAAAmC,YAAAJ,QAQAK,WAAA,KACA7K,KAAAgK,gBAAAhK,KAAAyI,cAAA,SACA,MAOA1I,cAAA+K,GACA,GAAAA,EAAAA,EAAA,OAAAA,EAAA,GAAAA,EAAA,EAAAA,EAAA,QAAAA,EAAA,QAIA/K,oBAAA,KACAC,KAAA2I,eAAAnI,MAAAmC,QAAA,QACA1B,OAAA6I,SAAA,EAAA,IAGA/J,qBAAA,KACAC,KAAAiJ,eAAAzI,MAAAmC,QAAA,QACA1B,OAAA6I,SAAA,EAAA,IAGA/J,gBAAA,CAAAgL,EAAAC,KACA,KAAAD,EAAAE,YACAF,EAAAE,WAAAC,SAEA,OAAAF,KAGAjL,wBAAA,CAAAoI,EAAAgD,KACA,WAAAhD,EACAnI,KAAAqJ,aAAAzD,YAAA,UAAA5F,KAAAoL,cAAAD,EAAApH,QACA,UAAAoE,IACAnI,KAAAqJ,aAAAzD,YAAA,UAAA5F,KAAAoL,cAAAD,EAAApH,SAGA/D,KAAAgK,gBAAAhK,KAAAsJ,aAAA,KACA,IAAA,IAAAxF,EAAA,EAAAA,EAAAqH,EAAApH,OAAAD,IAAA,CACA,IAAA0G,EAAAtK,SAAAuK,cAAA,OACAY,EAAAnL,SAAAuK,cAAA,QACAa,EAAApL,SAAAuK,cAAA,QAEAD,EAAAE,aAAA,QAAA,YACAW,EAAAzF,YAAA9B,EAAA,EAAA,QACAwH,EAAA1F,YAAA,GAAAuF,EAAArH,GACA0G,EAAAI,YAAAS,GACAb,EAAAI,YAAAU,GACAtL,KAAAsJ,aAAAsB,YAAAJ,OAKAzK,0BAAAwL,IAEA,GAAAA,EAAA,CAEA,GAAAvL,KAAAuJ,eAAAoB,WAAA5G,OACA/D,KAAAuJ,eAAAoB,WAAA,GAAAO,SAEA,GAAAlL,KAAAuJ,eAAAoB,WAAA5G,SACA/D,KAAAuJ,eAAAoB,WAAA,GAAAO,SACAlL,KAAAuJ,eAAAoB,WAAA,GAAAO,UAGA,MAAAM,EAAAtL,SAAAuK,cAAA,KACAe,EAAAd,aAAA,QAAA,oBACAc,EAAA5F,YAAA,UAAA5F,KAAAyL,eAAAF,SACAvL,KAAAuJ,eAAAqB,YAAAY,GACAxL,KAAA0L,oBAAAH,GAEA,MAAAI,EAAAzL,SAAAuK,cAAA,UACAkB,EAAAjB,aAAA,QAAA,kBACAiB,EAAA/F,YAAA,WACA+F,EAAApL,QAAA,KACAP,KAAAiJ,eAAAzI,MAAAoL,OAAA5L,KAAA2I,eAAAkD,aAAA,KACA7L,KAAA8L,wBAEA9L,KAAAuJ,eAAAqB,YAAAe,QAEA,GAAA,GAAA3L,KAAAuJ,eAAAoB,WAAA5G,OAAA,CACA/D,KAAAuJ,eAAAoB,WAAA,GAAAO,SACAlL,KAAAuJ,eAAAoB,WAAA,GAAAO,SACA,MAAApH,EAAA5D,SAAAuK,cAAA,KACA3G,EAAA8B,YAAA,gBACA5F,KAAAuJ,eAAAqB,YAAA9G,KAIA/D,oBAAAgM,IAqBA,GAnBA/L,KAAAmJ,aAAAvD,YAAAmG,EAAAC,KAEAD,EAAAE,QACAjM,KAAAoJ,YAAA8C,IAAAjL,OAAAC,SAAAiL,OAAA,iCAAAJ,EAAAE,OACAjM,KAAAoJ,YAAA5I,MAAAmC,QAAA,iBAEA3C,KAAAoJ,YAAA8C,IAAAjL,OAAAC,SAAAiL,OAAA,6CACAnM,KAAAoJ,YAAA5I,MAAAmC,QAAA,gBAGA3C,KAAAoM,wBAAAL,EAAArJ,KAAAqJ,EAAAZ,MACAnL,KAAAqM,0BAAAN,EAAAR,QAEA,IAAAQ,EAAAO,MACAtM,KAAAwJ,cAAA+C,UAAAR,EAAAO,MAEAtM,KAAAwJ,cAAA5D,YAAA,gBAGA,SAAA5F,KAAAuH,KAAA,CACA,IAAAoE,EAAAzL,SAAAuK,cAAA,UACAkB,EAAAjB,aAAA,QAAA,YACAiB,EAAA/F,YAAA,gBACA+F,EAAApL,QAAA,KACAP,KAAAwM,SAAAT,IAGA,IAAAU,EAAAvM,SAAAuK,cAAA,UACAgC,EAAA/B,aAAA,QAAA,eACA+B,EAAA7G,YAAA,UACA6G,EAAAlM,QAAA,KACAmM,QAAA,8CAAAX,EAAAC,mBACAhM,KAAA0J,KAAAqC,EAAAY,IAAA,WAIA,GAAA3M,KAAAmJ,aAAAyD,cAAAjC,WAAA5G,QACA/D,KAAAmJ,aAAAyD,cAAAhC,YAAAe,GACA3L,KAAAmJ,aAAAyD,cAAAhC,YAAA6B,KAEAzM,KAAAmJ,aAAAyD,cAAAjC,WAAA,GAAAO,SACAlL,KAAAmJ,aAAAyD,cAAAjC,WAAA,GAAAO,SACAlL,KAAAmJ,aAAAyD,cAAAhC,YAAAe,GACA3L,KAAAmJ,aAAAyD,cAAAhC,YAAA6B,IAIAzM,KAAAiI,YAAA1H,QAAA,KACAP,KAAA0J,KAAAqC,EAAAY,IAAA,YAIA5M,kBAAA8M,IACA,GAAA,GAAAA,EAAA9I,OAAA,CACA,MAAAyG,EAAAtK,SAAAuK,cAAA,OACAD,EAAAE,aAAA,QAAA,iCACAF,EAAA5E,YAAA,oBACA5F,KAAAyI,cAAAkC,WAAA,IACA3K,KAAAyI,cAAAmC,YAAAJ,QAGA,IAAA,IAAA1G,EAAA,EAAAA,EAAA+I,EAAA9I,OAAAD,IAAA,CACA,IAAA0G,EAAAtK,SAAAuK,cAAA,OACAD,EAAAE,aAAA,QAAA,mBACAF,EAAA5E,YAAAiH,EAAA/I,GAAAkI,KAEAxB,EAAAjK,QAAA,KACAP,KAAA8M,oBAAAD,EAAA/I,IACA9D,KAAA+M,uBAEA,IAAA,IAAA5I,EAAA,EAAAA,EAAAnE,KAAAyI,cAAAkC,WAAA5G,OAAAI,IACA,GAAAnE,KAAAyI,cAAAkC,WAAAxG,GAAAyB,aAAA4E,EAAA5E,YACA,OAGA5F,KAAAyI,cAAAmC,YAAAJ,KAMAzK,SAAAgM,IASA,GAPA/L,KAAAwH,WAAAuE,EAAAR,OACAvL,KAAA2I,eAAAnI,MAAAmC,QAAA,OACA3C,KAAA+H,gBAAAvH,MAAAmC,QAAA,QACA3C,KAAAkI,SAAAvH,MAAAoL,EAAAC,KACAhM,KAAAmI,SAAAxH,MAAAoL,EAAArJ,KACA1C,KAAAoI,QAAAzH,MAAAoL,EAAAE,OAEAF,EAAAZ,KAAApH,OAAA,EAAA,CAEA,IAAAiJ,EAAAC,EAAAC,EAAAC,EAAAxB,EAEA3L,KAAAqI,SAAAkE,UAAA,GACA,IAAA,IAAAzI,EAAA,EAAAA,EAAAiI,EAAAZ,KAAApH,OAAAD,IACAkJ,EAAA9M,SAAAuK,cAAA,OACAuC,EAAAtC,aAAA,QAAA,YACAuC,EAAA/M,SAAAuK,cAAA,QACAwC,EAAAvC,aAAA,QAAA,YACAuC,EAAArH,YAAA9B,EAAA,EAAA,IACAkJ,EAAApC,YAAAqC,GACAC,EAAAhN,SAAAuK,cAAA,SACAyC,EAAAxC,aAAA,QAAA,YACAwC,EAAAxC,aAAA,OAAA,QACAwC,EAAAxC,aAAA,cAAA,YACAwC,EAAAvM,MAAAoL,EAAAZ,KAAArH,GACAkJ,EAAApC,YAAAsC,GAEA,GAAApJ,GACA6H,EAAAzL,SAAAuK,cAAA,UACAkB,EAAAjB,aAAA,QAAA,gBACAiB,EAAA/F,YAAA,IACA+F,EAAApL,QAAA,KACAP,KAAA2J,UAEAqD,EAAApC,YAAAe,KAEAwB,EAAAjN,SAAAuK,cAAA,QACA0C,EAAAzC,aAAA,QAAA,eACAyC,EAAAvH,YAAA,IACAuH,EAAA5M,QAAA+G,IACAA,EAAA8F,OAAAR,cAAA1B,UAEA8B,EAAApC,YAAAuC,IAIAnN,KAAAqI,SAAAuC,YAAAoC,GAGAhN,KAAAqN,sBAAAtB,EAAAR,QACAvL,KAAAsN,oBAAAvB,EAAAR,QACAvL,KAAAuI,UAAA5H,MAAAoL,EAAAO,MACAtM,KAAAiI,YAAArC,YAAA,sBACA5F,KAAAiI,YAAA1H,QAAA,KACAP,KAAA0J,KAAAqC,EAAAY,IAAA,aAKA5M,sBAAAwL,IAEA,GAAAA,EAAA,CACAvL,KAAAsI,WAAAqC,WAAA,GAAAO,SACAlL,KAAAsI,WAAAqC,WAAA,GAAAO,SACA,IAAAqC,EAAArN,SAAAuK,cAAA,QACA8C,EAAA7C,aAAA,QAAA,iBACA6C,EAAA3H,YAAA5F,KAAAyL,eAAAF,GAAA,OACA,IAAAiC,EAAAtN,SAAAuK,cAAA,QACA+C,EAAA9C,aAAA,QAAA,kBACA8C,EAAA5H,YAAA,WACA4H,EAAAjN,QAAA,KACAP,KAAAsN,oBAAA/B,GACAvL,KAAA+I,iBAAAvI,MAAAoL,OAAA5L,KAAA+H,gBAAA8D,aAAA,KACA7L,KAAA+I,iBAAAvI,MAAAmC,QAAA,QACA1B,OAAA6I,SAAA,EAAA,IAEA9J,KAAAsI,WAAAsC,YAAA2C,GACAvN,KAAAsI,WAAAsC,YAAA4C,KAIAzN,QAAA0N,IACA,IAAA,IAAAC,KAAAD,EACA,GAAAA,EAAAE,eAAAD,GAAA,OAAA,EACA,OAAAE,KAAAC,UAAAJ,KAAAG,KAAAC,UAAA,KAGA9N,oBAAA,CAAAwL,EAAA,MAKA,IAAAuC,EAAAC,EAAAC,EAAAC,EAAAC,EAEA,MAAAC,EAAAjO,SAAAC,eAAA,cAAA8K,WACAmD,EAAAlO,SAAAC,eAAA,eAAA8K,WAEA,KAAAkD,EAAAxD,WAAA5G,OAAA,GACAoK,EAAAxD,WAAA,GAAAO,SAEA,KAAAkD,EAAAzD,WAAA5G,OAAA,GACAqK,EAAAzD,WAAA,GAAAO,SAGAlL,KAAA2H,eAAA3H,KAAAyL,eAAAF,GAEArL,SAAAC,eAAA,oBAAAyF,YAAA5F,KAAAyL,eAAAF,GAAA,OAEA,IAAA,MAAA8C,KAAA9C,EAAA9D,SAAA,CACA,GAAAzH,KAAAsO,QAAA/C,EAAA9D,SAAA4G,IAAA,SAEA,IAAAE,EAAAC,EAAAC,EACAX,EAAA5N,SAAAuK,cAAA,MACAqD,EAAApD,aAAA,QAAA,mBACAoD,EAAAlD,YAAA1K,SAAAuK,cAAA,OACAuD,EAAA9N,SAAAuK,cAAA,MACAwD,EAAA/N,SAAAuK,cAAA,MACAyD,EAAAhO,SAAAuK,cAAA,MACA8D,EAAArO,SAAAuK,cAAA,SACA8D,EAAA7D,aAAA,OAAA,UACA6D,EAAA7D,aAAA,QAAA,SACA6D,EAAA5N,MAAA4K,EAAA9D,SAAA4G,GAAAK,OAAAC,MAAA,KAAA,GACAH,EAAAtO,SAAAuK,cAAA,QACA+D,EAAA5I,YAAA,IACA6I,EAAAvO,SAAAuK,cAAA,SACAgE,EAAA/D,aAAA,OAAA,UACA+D,EAAA/D,aAAA,QAAA,SACA+D,EAAA9N,MAAA4K,EAAA9D,SAAA4G,GAAAK,OAAAC,MAAA,KAAA,GACAX,EAAApD,YAAA2D,GACAP,EAAApD,YAAA4D,GACAR,EAAApD,YAAA6D,GACA,IAAAG,EAAA1O,SAAAuK,cAAA,SACAmE,EAAAlE,aAAA,OAAA,UACAkE,EAAAlE,aAAA,QAAA,UACAkE,EAAAjO,MAAA4K,EAAA9D,SAAA4G,GAAAQ,OACAZ,EAAArD,YAAAgE,GACA,IAAAE,EAAA5O,SAAAuK,cAAA,SACAqE,EAAApE,aAAA,OAAA,UACAoE,EAAApE,aAAA,QAAA,WACAoE,EAAAnO,MAAA4K,EAAA9D,SAAA4G,GAAAU,QACAb,EAAAtD,YAAAkE,GACA,IAAAE,EAAA9O,SAAAuK,cAAA,QACAuE,EAAAtE,aAAA,QAAA,kBACAsE,EAAApJ,YAAA,IACAoJ,EAAAzO,QAAA+G,IACAoF,QAAA,gCACApF,EAAA8F,OAAAR,cAAAA,cAAA1B,SACAlL,KAAA2H,iBACA3H,KAAAyJ,gBAAA7D,YAAA5F,KAAA2H,eAAA,SAIAuG,EAAAtD,YAAAoE,GACAlB,EAAAlD,YAAAoD,GACAF,EAAAlD,YAAAqD,GACAH,EAAAlD,YAAAsD,GACAC,EAAAvD,YAAAkD,GAGA,IAAA,MAAAmB,KAAA1D,EAAA7D,UAAA,CAEA,GAAA1H,KAAAsO,QAAA/C,EAAA7D,UAAAuH,IAAA,SAEA,IAAAV,EAAAC,EAAAC,EACAV,EAAA7N,SAAAuK,cAAA,MACAsD,EAAArD,aAAA,QAAA,oBACAqD,EAAAnD,YAAA1K,SAAAuK,cAAA,OACAuD,EAAA9N,SAAAuK,cAAA,MACAwD,EAAA/N,SAAAuK,cAAA,MACAyD,EAAAhO,SAAAuK,cAAA,MACA8D,EAAArO,SAAAuK,cAAA,SACA8D,EAAA7D,aAAA,OAAA,UACA6D,EAAA7D,aAAA,QAAA,SACA6D,EAAA5N,MAAA4K,EAAA7D,UAAAuH,GAAAP,OAAAC,MAAA,KAAA,GACAH,EAAAtO,SAAAuK,cAAA,QACA+D,EAAAU,eAAA,IACAT,EAAAvO,SAAAuK,cAAA,SACAgE,EAAA/D,aAAA,OAAA,UACA+D,EAAA/D,aAAA,QAAA,SACA+D,EAAA9N,MAAA4K,EAAA7D,UAAAuH,GAAAP,OAAAC,MAAA,KAAA,GACAX,EAAApD,YAAA2D,GACAP,EAAApD,YAAA4D,GACAR,EAAApD,YAAA6D,GAEA,IAAAG,EAAA1O,SAAAuK,cAAA,SACAmE,EAAAlE,aAAA,OAAA,UACAkE,EAAAlE,aAAA,QAAA,UACAkE,EAAAjO,MAAA4K,EAAA7D,UAAAuH,GAAAJ,OACAZ,EAAArD,YAAAgE,GAEA,IAAAE,EAAA5O,SAAAuK,cAAA,SACAqE,EAAApE,aAAA,OAAA,UACAoE,EAAApE,aAAA,QAAA,WACAoE,EAAAnO,MAAA4K,EAAA7D,UAAAuH,GAAAF,QACAb,EAAAtD,YAAAkE,GAEA,IAAAE,EAAA9O,SAAAuK,cAAA,QACAuE,EAAAtE,aAAA,QAAA,kBACAsE,EAAApJ,YAAA,IACAoJ,EAAAzO,QAAA+G,IACAoF,QAAA,gCACApF,EAAA8F,OAAAR,cAAAA,cAAA1B,SACAlL,KAAA2H,iBACA3H,KAAAyJ,gBAAA7D,YAAA5F,KAAA2H,eAAA,SAGAuG,EAAAtD,YAAAoE,GACAjB,EAAAnD,YAAAoD,GACAD,EAAAnD,YAAAqD,GACAF,EAAAnD,YAAAsD,GACAE,EAAAxD,YAAAmD,KAIAhO,eAAAwL,IACA,IAAAT,EAAA,EACA,IAAAS,EAAA,OAAA,EACA,IAAA,IAAAnI,KAAAmI,EAAA9D,SACAzH,KAAAsO,QAAA/C,EAAA9D,SAAArE,KACA0H,IAGA,IAAA,IAAA1H,KAAAmI,EAAA7D,UACA1H,KAAAsO,QAAA/C,EAAA7D,UAAAtE,KACA0H,IAGA,OAAAA,GAGA/K,oBAAAwL,IAGA,IAAAuC,EAAAC,EAAAC,EAAAC,EAAAC,EAIAC,EAAAjO,SAAAC,eAAA,kBAAA8K,WACAmD,EAAAlO,SAAAC,eAAA,mBAAA8K,WAEA,KAAAkD,EAAAxD,WAAA5G,OAAA,GAAAoK,EAAAxD,WAAA,GAAAO,SACA,KAAAkD,EAAAzD,WAAA5G,OAAA,GAAAqK,EAAAzD,WAAA,GAAAO,SAEAhL,SAAAC,eAAA,qBAAAyF,YAAA5F,KAAAyL,eAAAF,GAAA,OAGA,IAAA,MAAA8C,KAAA9C,EAAA9D,SACAqG,EAAA5N,SAAAuK,cAAA,MACAqD,EAAAlD,YAAA1K,SAAAuK,cAAA,OACAuD,EAAA9N,SAAAuK,cAAA,MACAwD,EAAA/N,SAAAuK,cAAA,MACAyD,EAAAhO,SAAAuK,cAAA,MACAuD,EAAApI,YAAA2F,EAAA9D,SAAA4G,GAAAK,OACAZ,EAAAlD,YAAAoD,GACAC,EAAArI,YAAA2F,EAAA9D,SAAA4G,GAAAQ,OACAf,EAAAlD,YAAAqD,GACAC,EAAAtI,YAAA2F,EAAA9D,SAAA4G,GAAAU,QACAjB,EAAAlD,YAAAsD,GACAC,EAAAvD,YAAAkD,GAEA,IAAA,MAAAmB,KAAA1D,EAAA7D,UACAqG,EAAA7N,SAAAuK,cAAA,MACAsD,EAAAnD,YAAA1K,SAAAuK,cAAA,OACAuD,EAAA9N,SAAAuK,cAAA,MACAwD,EAAA/N,SAAAuK,cAAA,MACAyD,EAAAhO,SAAAuK,cAAA,MACAuD,EAAApI,YAAA2F,EAAA7D,UAAAuH,GAAAP,OACAX,EAAAnD,YAAAoD,GACAC,EAAArI,YAAA2F,EAAA7D,UAAAuH,GAAAJ,OACAd,EAAAnD,YAAAqD,GACAC,EAAAtI,YAAA2F,EAAA7D,UAAAuH,GAAAF,QACAhB,EAAAnD,YAAAsD,GACAE,EAAAxD,YAAAmD,IAIAhO,kBAAA,KACA,MAAAoP,EAAAjP,SAAAkP,uBAAA,mBACAC,EAAAnP,SAAAkP,uBAAA,oBAIA,GAFApP,KAAAwH,WAAA,CAAAC,SAAA,GAAAC,UAAA,IAEA,GAAAyH,EAAApL,QAAA,GAAAsL,EAAAtL,OAAA,CACA,IAAA,IAAAuL,EAAA,EAAAA,EAAAH,EAAApL,OAAAuL,IAAA,CACAtP,KAAAwH,WAAAC,SAAA,SAAA6H,EAAA,IAAA,GACA,IAAA,IAAAC,EAAA,EAAAA,EAAAJ,EAAAG,GAAA3E,WAAA5G,OAAAwL,IACA,GAAA,GAAAA,EAAA,CACA,IAAAC,EAAAL,EAAAG,GAAA3E,WAAA4E,GAAAtE,WACAwE,EAAAN,EAAAG,GAAA3E,WAAA4E,GAAAG,UACA,IAAAF,EAAA7O,MAOA,OALA6O,EAAA5C,cAAApM,MAAAmP,gBAAA,MACAH,EAAAjP,QAAA,KACAiP,EAAA5C,cAAApM,MAAAmP,gBAAA,gBAEA/O,MAAA,wEAGA,IAAA6O,EAAA9O,MAMA,OALA8O,EAAA7C,cAAApM,MAAAmP,gBAAA,MACAF,EAAAlP,QAAA,KACAkP,EAAA7C,cAAApM,MAAAmP,gBAAA,gBAEA/O,MAAA,wEAGAZ,KAAAwH,WAAAC,SAAA,SAAA6H,EAAA,IAAAZ,OAAAc,EAAA7O,MAAA,IAAA8O,EAAA9O,WACA,GAAA,GAAA4O,EAAA,CACA,IAAAJ,EAAAG,GAAA3E,WAAA4E,GAAAtE,WAAAtK,MAMA,OALAwO,EAAAG,GAAA3E,WAAA4E,GAAAtE,WAAA2B,cAAApM,MAAAmP,gBAAA,MACAR,EAAAG,GAAA3E,WAAA4E,GAAAtE,WAAA1K,QAAA,KACA4O,EAAAG,GAAA3E,WAAA4E,GAAAtE,WAAA2B,cAAApM,MAAAmP,gBAAA,gBAEA/O,MAAA,wEAGAZ,KAAAwH,WAAAC,SAAA,SAAA6H,EAAA,IAAAT,OAAAM,EAAAG,GAAA3E,WAAA4E,GAAAtE,WAAAtK,WACA,GAAA4O,IACAvP,KAAAwH,WAAAC,SAAA,SAAA6H,EAAA,IAAAP,QAAAI,EAAAG,GAAA3E,WAAA4E,GAAAtE,WAAAtK,OAIA,IAAA,IAAA2G,EAAA,EAAAA,EAAA+H,EAAAtL,OAAAuD,IAAA,CACAtH,KAAAwH,WAAAE,UAAA,SAAAJ,EAAA,IAAA,GAEA,IAAA,IAAAiI,EAAA,EAAAA,EAAAF,EAAA/H,GAAAqD,WAAA5G,OAAAwL,IACA,GAAA,GAAAA,EAAA,CACA,IAAAC,EAAAH,EAAA/H,GAAAqD,WAAA4E,GAAAtE,WACAwE,EAAAJ,EAAA/H,GAAAqD,WAAA4E,GAAAG,UACA,IAAAF,EAAA7O,MAMA,OALA6O,EAAA5C,cAAApM,MAAAmP,gBAAA,MACAH,EAAAjP,QAAA,KACAiP,EAAA5C,cAAApM,MAAAmP,gBAAA,gBAEA/O,MAAA,wEAGA,IAAA6O,EAAA9O,MAMA,OALA8O,EAAA7C,cAAApM,MAAAmP,gBAAA,MACAF,EAAAlP,QAAA,KACAkP,EAAA7C,cAAApM,MAAAmP,gBAAA,gBAEA/O,MAAA,wEAGAZ,KAAAwH,WAAAE,UAAA,SAAAJ,EAAA,IAAAoH,OAAAc,EAAA7O,MAAA,IAAA8O,EAAA9O,WACA,GAAA,GAAA4O,EAAA,CACA,IAAAF,EAAA/H,GAAAqD,WAAA4E,GAAAtE,WAAAtK,MAMA,OALA0O,EAAA/H,GAAAqD,WAAA4E,GAAAtE,WAAA2B,cAAApM,MAAAmP,gBAAA,MACAN,EAAA/H,GAAAqD,WAAA4E,GAAAtE,WAAA1K,QAAA,KACA8O,EAAA/H,GAAAqD,WAAA4E,GAAAtE,WAAA2B,cAAApM,MAAAmP,gBAAA,gBAEA/O,MAAA,wEAGAZ,KAAAwH,WAAAE,UAAA,SAAAJ,EAAA,IAAAuH,OAAAQ,EAAA/H,GAAAqD,WAAA4E,GAAAtE,WAAAtK,WACA,GAAA4O,IACAvP,KAAAwH,WAAAE,UAAA,SAAAJ,EAAA,IAAAyH,QAAAM,EAAA/H,GAAAqD,WAAA4E,GAAAtE,WAAAtK,OAIAX,KAAAqN,sBAAArN,KAAAwH,YACAxH,KAAA+I,iBAAAvI,MAAAmC,QAAA,YAEA3C,KAAA+I,iBAAAvI,MAAAmC,QAAA,QAIA5C,OAAA,KACA,IAAA+K,EAAA9K,KAAAqI,SAAAsC,WAAA5G,OAAA,EACAyG,EAAAtK,SAAAuK,cAAA,OACA+D,EAAAtO,SAAAuK,cAAA,QACAyC,EAAAhN,SAAAuK,cAAA,SACA0C,EAAAjN,SAAAuK,cAAA,QAEAD,EAAAE,aAAA,QAAA,YACA8D,EAAA9D,aAAA,QAAA,YACA8D,EAAA9D,aAAA,KAAA,WAAAI,GACA0D,EAAA5I,YAAAkF,EAAA,IACAoC,EAAAxC,aAAA,OAAA,QACAwC,EAAAxC,aAAA,QAAA,YACAwC,EAAAxC,aAAA,KAAA,WAAAI,GACAoC,EAAAxC,aAAA,cAAA,YACAyC,EAAAzC,aAAA,KAAA,cAAAI,GACAqC,EAAAzC,aAAA,QAAA,eACAyC,EAAAvH,YAAA,IACAuH,EAAA5M,QAAA,KACA4M,EAAAP,cAAA1B,UAEAV,EAAAI,YAAA4D,GACAhE,EAAAI,YAAAsC,GACA1C,EAAAI,YAAAuC,GACAnN,KAAAqI,SAAAuH,aAAApF,EAAAxK,KAAAqI,SAAAsC,WAAArD,KAGAvH,UAAA,KACA,IAAA8P,EAAA7P,KAAAqI,SAAAsC,WAAA5G,OACA+L,EAAA9P,KAAAqI,SAAAsC,WACA,IAAA,IAAA7G,EAAA,EAAAA,EAAA+L,EAAA/L,IACA,IAAAgM,EAAAhM,GAAA6G,WAAA,GAAAhK,MAKA,OAJAmP,EAAAhM,GAAA6G,WAAA,GAAAnK,MAAAC,YAAA,MACAqP,EAAAhM,GAAA6G,WAAA,GAAApK,QAAA,IACAuP,EAAAhM,GAAA6G,WAAA,GAAAnK,MAAAC,YAAA,WAEA,EAGA,OAAA,GAGAV,YAAA,IACAC,KAAAkI,SAAAvH,MAGAX,KAAAmI,SAAAxH,QAGAX,KAAA+P,cACA/P,KAAAqI,SAAA5H,YAAA,OACA,IAJAT,KAAAmI,SAAA3H,MAAAC,YAAA,OACA,IAJAT,KAAAkI,SAAA1H,MAAAC,YAAA,OACA,GAWAV,KAAAkK,MAAA+F,EAAAC,KACA,GAAA,WAAAA,GAAA,WAAAA,GACA,GAAAjQ,KAAAkQ,cAAA,CACA,IAAAhI,EAAAlI,KAAAkI,SAAAvH,MACAwH,EAAAnI,KAAAmI,SAAAxH,MACAyH,EAAApI,KAAAoI,QAAAzH,MACAwK,EAAA,GACA5C,EAAAvI,KAAAuI,UAAA5H,MAGA,IAAA,IAAA2G,EAAA,EAAAA,EAAAtH,KAAAqI,SAAAsC,WAAA5G,OAAAuD,IAAA,CACA,GAAAtH,KAAAqI,SAAAsC,WAAArD,GAAAqD,WAAA,GAAAhK,MAAAwP,SAAA,KACA,OAAAnQ,KAAAqI,SAAAsC,WAAArD,GAAAqD,WAAA,GAAAnK,MAAAC,YAAA,MAEA0K,EAAAtH,KAAA7D,KAAAqI,SAAAsC,WAAArD,GAAAqD,WAAA,GAAAhK,OAEA,GAAAqP,GAAA,WAAAC,EAAA,CAEA,IAAA3F,EAAA,CACA0B,KAAA9D,EACAxF,KAAAyF,EACA8D,OAAA7D,EACA+C,KAAAA,EACAI,OAAAvL,KAAAwH,WACA8E,MAAA/D,EACAyH,OAAAA,EACAC,OAAAA,GAKA,MAAA,aAFAlP,QAAA,gBAAA,OAAAuJ,IAEAtJ,YACAJ,MAAA,8BACAZ,KAAA+H,gBAAAvH,MAAAmC,QAAA,YACA1B,OAAAC,SAAAkP,eAGAxP,MAAA,8BAIA,IAAAoP,GAAA,UAAAC,EAAA,CACA,IAAA3F,EAAA,CACA0B,KAAA9D,EACAxF,KAAAyF,EACA8D,OAAA7D,EACA+C,KAAAA,EACAI,OAAAvL,KAAAwH,WACA8E,MAAA/D,EACAyH,OAAAA,EACAC,OAAAA,GAIA,GAAA,aADAlP,QAAA,gBAAA,OAAAuJ,IACAtJ,WAMA,YADAJ,MAAA,4BAJAA,MAAA,oCACAK,OAAAC,SAAAkP,gBAQA,GAAA,WAAAH,EAAA,CACA,IAAAI,EAAA,CACAL,OAAAA,EACAC,OAAAA,GAGA,MAAA,aADAlP,QAAA,gBAAA,OAAAsP,IACArP,YACAJ,MAAA,iCACAK,OAAAC,SAAAkP,eAIAxP,MAAA,qBAMAb,SAAAuQ,IAIA,MAAAC,EAAArQ,SAAAuK,cAAA,MACA+D,EAAAtO,SAAAuK,cAAA,QAEA+D,EAAA5I,YAAA,IAEA,IAAA,IAAA9B,EAAA,EAAAA,EAAA,EAAAA,IAAA,CACA,IAAA0M,EAAAtQ,SAAAuK,cAAA,MAEA,GAAA,GAAA3G,EACA,IAAA,IAAAK,EAAA,EAAAA,EAAA,EAAAA,IAAA,CACA,IAAA+I,EAAAhN,SAAAuK,cAAA,SACAyC,EAAAxC,aAAA,OAAA,UACAwC,EAAAxC,aAAA,QAAA,SACA,GAAAvG,GACAqM,EAAA5F,YAAA4D,GAEAgC,EAAA5F,YAAAsC,QAIA,GAAA,GAAApJ,EAAA,CACA,IAAAoJ,EAAAhN,SAAAuK,cAAA,SACAyC,EAAAxC,aAAA,OAAA,UACAwC,EAAAxC,aAAA,QAAA,UACA8F,EAAA5F,YAAAsC,QACA,GAAA,GAAApJ,EAAA,CAEA,IAAAoJ,EAAAhN,SAAAuK,cAAA,SACA+D,EAAAtO,SAAAuK,cAAA,QACA+D,EAAA5I,YAAA,IACA4I,EAAA9D,aAAA,QAAA,kBACA8D,EAAAjO,QAAA+G,IACAoF,QAAA,gCACApF,EAAA8F,OAAAR,cAAAA,cAAA1B,SACAlL,KAAA2H,iBACA3H,KAAAyJ,gBAAA7D,YAAA5F,KAAA2H,eAAA,SAGAuF,EAAAxC,aAAA,OAAA,UACAwC,EAAAxC,aAAA,QAAA,WACA8F,EAAA5F,YAAAsC,GACAsD,EAAA5F,YAAA4D,GAEA+B,EAAA3F,YAAA4F,GAEAD,EAAA7F,aAAA,QAAA4F,EAAA,eACApQ,SAAAC,eAAAmQ,EAAA,UAAA1F,YAAA2F,GACAvQ,KAAA2H,iBACA3H,KAAAyJ,gBAAA7D,YAAA5F,KAAA2H,eAAA,QC91BA,MAAA8I,UAGA1Q,cACAC,KAAA0Q,SAAAxQ,SAAAC,eAAA,mBACAH,KAAA2Q,IAAA,MACA3Q,KAAAqQ,GAAA,IAAA/M,KAAAA,KAAAqB,OAEA,IAAA,IAAAb,EAAA,EAAAA,EAAA,IACA9D,KAAA4Q,YAAA1Q,SAAAC,eAAA,GAAA,IAAAmD,KAAAA,KAAAqB,OAAAhB,cAAA3D,KAAAqQ,GAAAzM,cACA5D,KAAA4Q,aAFA9M,IAGA9D,KAAAqQ,GAAA,IAAA/M,KAAAtD,KAAAqQ,GAAArM,UAAAhE,KAAA2Q,KAKA3Q,KAAAoN,OAAApN,KAAA4Q,YAAAC,WAAA,IAEA5P,OAAAqB,OAAA,KACAtC,KAAA8Q,wBAIA/Q,uBACA,IACAgR,EAAA,EACAC,EAAAvO,YAAA,KACAzC,KAAA0Q,SAAAO,WAAAjR,KAAAoN,QACA2D,IACA/Q,KAAA0Q,SAAAO,YAAA,IALA,GAKAF,GAEAhK,cAAAiK,IAEA,KChCA/G,eAAAlJ,QAAA6B,EAAAsO,EAAA5G,GAQA,aAPA6G,MAAAvO,EAAA,CACAsO,OAAAA,EACAE,QAAA,CACAC,eAAA,oBAEAC,KAAA1D,KAAAC,UAAAvD","file":"../main.min.js","sourcesContent":["\nclass Authenticate {\n\n  constructor() {\n    this.login = document.getElementById(\"login\");\n    this.pass1 = document.getElementById(\"pass1\");\n    this.pass2 = document.getElementById(\"pass2\");\n    this.authBtn = document.getElementById(\"authenticate-bt\");\n\n    this.login.onclick = () => {\n      this.login.style.borderColor = \"transparent\";\n    };\n\n    this.pass1.onclick = () => {\n      this.pass1.style.borderColor = \"transparent\";\n    };\n\n    this.pass2.onclick = () => {\n      this.pass2.style.borderColor = \"transparent\";\n    };\n\n    this.authBtn.onclick = () => {\n      this.authenticate();\n    }\n  }\n\n  async authenticate () {\n    if (!this.login.value) {\n      alert('Поле \"Логин\" пусто. Придумайте себе логин, чтобы продолжить.');\n      this.login.style.borderColor = \"#f26a6a\";\n      return;\n    }\n    else if (!this.pass1.value) {\n      alert('Поле \"Пароль\" пусто. Придумайте себе пароль, чтобы продолжить.');\n      this.pass1.style.borderColor = \"#f26a6a\";\n      return;\n    }\n    else if (!this.pass2.value) {\n        alert('Поле \"Пароль повторно\" пусто. Введите пароль повторно, чтобы продолжить.');\n        this.pass2.style.borderColor = \"#f26a6a\";\n        return;\n    }\n\n    if (this.pass1.value !== this.pass2.value) {\n      alert(\"Введённые Вами пароли не совпадают\");\n      return;\n    } \n\n    const authData = {\n      login: this.login.value,\n      pass1: this.pass1.value,\n      pass2: this.pass2.value,\n    }\n    \n    const resp = await request(\"/authenticate\", \"POST\", authData);\n    \n    if (resp.statusText == \"Inconsistent data\") {\n      alert(\"Отсутсвует логин или пароль\");\n      return;\n    } if (resp.statusText == \"Duplicate\") {\n      alert(\"Такой логин уже занят, придумайте другой\");\n      return;\n    } else if (resp.statusText == \"Passwords mismatch\")  {\n      alert(\"Пароли не совпадают\");\n      return;\n    } else if(resp.statusText == \"Authenticated\") {\n      alert(\"Аутентификация успешна, сейчас вы будете перенаправлены на страницу логина\");\n      window.location.href = \"/auth\";\n      return;\n    }\n    else {\n      alert(\"Ошибка аутентификации\");\n      return;\n    }\n    \n  };\n\n}","class Authorisate {\n\n  constructor() {\n    this.authBtn = document.getElementById(\"auth-bt\");\n    this.loginInpt = document.getElementById(\"login\");\n    this.passInpt = document.getElementById(\"pass\");\n\n    this.authBtn.onclick = () => {\n      this.authorise();\n    };\n  }\n\n\n  async authorise() {\n\n    if (!this.loginInpt.value || !this.passInpt.value) {\n      return alert(\"Отсутствует логин или пароль\");\n    }\n\n    const authData = {\n      login: this.loginInpt.value,\n      pass: this.passInpt.value\n    }\n\n    const resp = await request(\"/auth\", \"POST\", authData);\n    \n    if (resp.statusText == \"Check login and password\") {\n      alert(\"Неверный логин или пароль\");\n      return;\n    } else if (resp.statusText == \"Authorised\") {\n      alert(\"Авторизация успешна и будет действительна в течение 30 дней\");\n      window.location.href = \"/performances\";\n      return;\n    } else {\n      alert(\"Произошла ошибка во время авторизации\");\n      return;\n    }\n\n  }\n}","class Calendars {\n    constructor() {\n        this.stageEvTime = document.getElementById(\"stage-ev-time\");\n        this.stageEvMsg = document.getElementById(\"stage-ev-msg\");\n\n        this.tehEvTime = document.getElementById(\"teh-ev-time\");\n        this.tehEvMsg = document.getElementById(\"teh-ev-msg\");\n\n        this.loadEvTime = document.getElementById(\"load-ev-time\");\n        this.loadEvMsg = document.getElementById(\"load-ev-msg\");\n\n        this.stagePreloader = document.getElementById(\"stage-preloader\");\n        this.tehPreloader = document.getElementById(\"teh-preloader\");\n        this.loadPreloader = document.getElementById(\"load-preloader\");\n\n\n        this.stageEvURL = \"/api/ical/stage\";\n        this.tehEvURL = \"/api/ical/teh-job\";\n        this.loadEvURL = \"/api/ical/load\";\n\n        window.onload = () => {\n            this.startUpdatingStageEvents();\n        };\n    }\n\n    startUpdatingStageEvents() {\n        this.updateAllEvents();\n        setInterval(() => {\n            this.updateAllEvents();\n        }, 60000);\n    }\n\n    showPreloader(type) {\n        if (type == \"stage\") {\n            this.stagePreloader.style.display = \"block\";\n        } else if (type == \"tech\") {\n            this.tehPreloader.style.display = \"block\";\n        } else if (type == \"load\") {\n            this.loadPreloader.style.display = \"block\";\n        }\n    }\n\n    hidePreloader(type) {\n        if (type == \"stage\") {\n            this.stagePreloader.style.display = \"none\";\n        } else if (type == \"tech\") {\n            this.tehPreloader.style.display = \"none\";\n        } else if (type == \"load\") {\n            this.loadPreloader.style.display = \"none\";\n        }\n    }\n\n    // \"/api/ical/stage\"\n    async getCalEvents(url) {\n        const resp = await request(url, \"GET\");\n        if (resp.status !== 200) {\n            console.error(\"Error uploading calendar events\");\n        }\n        const data = await resp.json();\n        return data.evts;\n    }\n\n    getTodayEvents(evts, todayDate) {\n        const todayEvents = [];\n\n        for (let key in evts) {\n            const evStart = new Date(evts[key].start);\n            const evEnd = new Date(evts[key].end);\n            if (evStart.getFullYear() == todayDate.getFullYear() && evStart.getMonth() == todayDate.getMonth() && (evStart.getDate() == todayDate.getDate() || evEnd.getDate() == todayDate.getDate())) {\n                todayEvents.push(evts[key]);\n            }\n        }\n        return todayEvents;\n    }\n\n    getCurrentEvent(evts, todayDate) {\n\n        for (let i = 0; i < evts.length; i++) {\n            const evStart = new Date(evts[i].start).getTime();\n            const evEnd = new Date(evts[i].end).getTime();\n            const currTime = todayDate.getTime();\n\n            if (evStart < currTime && evEnd > currTime) {\n                return evts[i];\n            }\n        }\n        return false;\n    }\n\n    getNextEvent(evts, todayDate) {\n        // Detect next event\n        let todayPlusHour = todayDate.getTime();\n        for (let b = 0; b < 5; b++) {\n            todayPlusHour += 1000 * 60 * 60;\n\n            for (let i = 0; i < evts.length; i++) {\n                const evStart = new Date(evts[i].start).getTime();\n                const evEnd = new Date(evts[i].end).getTime();\n\n                if (evStart < todayPlusHour && evEnd > todayPlusHour) {\n                    return evts[i];\n                }\n\n            }\n        }\n    }\n\n    async updateAllEvents() {\n        this.showPreloader(\"stage\");\n        const allStageEvents = await this.getCalEvents(this.stageEvURL);\n        this.showPreloader(\"tech\");\n        const allTehEvents = await this.getCalEvents(this.tehEvURL);\n        this.showPreloader(\"load\");\n        const allLoadEvents = await this.getCalEvents(this.loadEvURL);\n\n        const noData = { summary: \"Нет данных\" };\n        const todayDate = new Date(Date.now());\n\n        const todayStageEvents = this.getTodayEvents(allStageEvents, todayDate);\n        const currStageEvent = this.getCurrentEvent(todayStageEvents, todayDate);\n        const nextStageEvent = this.getNextEvent(todayStageEvents, todayDate);\n        this.setEvent(currStageEvent ? currStageEvent : nextStageEvent ? nextStageEvent : noData, todayDate, \"stage\");\n        this.hidePreloader(\"stage\");\n\n        const todayTehEvents = this.getTodayEvents(allTehEvents, todayDate);\n        const currTehEvent = this.getCurrentEvent(todayTehEvents, todayDate);\n        const nextTehEvent = this.getNextEvent(todayTehEvents, todayDate);\n        this.setEvent(currTehEvent ? currTehEvent : nextTehEvent ? nextTehEvent : noData, todayDate, \"tech\");\n        this.hidePreloader(\"tech\");\n\n        const todayLoadEvents = this.getTodayEvents(allLoadEvents, todayDate);\n        const currLoadEvent = this.getCurrentEvent(todayLoadEvents, todayDate);\n        const nextLoadEvent = this.getNextEvent(todayLoadEvents, todayDate);\n        this.setEvent(currLoadEvent ? currLoadEvent : nextLoadEvent ? nextLoadEvent : noData, todayDate, \"load\");\n        this.hidePreloader(\"load\");\n\n    }\n\n    setEvent(evt, todayDate, evType) {\n        if (evType == \"stage\") {\n            this.stageEvMsg.textContent = evt.summary;\n        } else if (evType == \"tech\") {\n            this.tehEvMsg.textContent = evt.summary;\n        } else if (evType == \"load\") {\n            this.loadEvMsg.textContent = evt.summary;\n        }\n\n        if (evt.start != undefined && evt.end != undefined) {\n            if (new Date(evt.start).getTime() > todayDate.getTime()) {\n                if (evType == \"stage\") {\n                    this.stageEvTime.textContent = \"Далее: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                } else if (evType == \"tech\") {\n                    this.tehEvTime.textContent = \"Далее: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                } else if (evType == \"load\") {\n                    this.loadEvTime.textContent = \"Далее: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                }\n            } else {\n                if (evType == \"stage\") {\n                    this.stageEvTime.textContent = \"Сейчас: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                } else if (evType == \"tech\") {\n                    this.tehEvTime.textContent = \"Сейчас: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                } else if (evType == \"load\") {\n                    this.loadEvTime.textContent = \"Сейчас: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                }\n            }\n\n        } else {\n            if (evType == \"stage\") {\n                this.stageEvTime.textContent = \"Сейчас: \";\n            } else if (evType == \"tech\") {\n                this.tehEvTime.textContent = \"Сейчас: \";\n            } else if (evType == \"load\") {\n                this.loadEvTime.textContent = \"Сейчас: \";\n            }\n        }\n    }\n\n    getRusTime(time) {\n        time = new Date(time);\n        let timeStr = time.getHours();\n        let minutes = time.getMinutes();\n        if (minutes.toString().length == 1) {\n            minutes = minutes.toString() + \"0\";\n        }\n        timeStr += \":\" + minutes;\n        return timeStr;\n    }\n}","class iCal {\n    constructor() {\n\n        this.intId = null;\n        this.nowOnStage = document.getElementById(\"now-on-stage\");\n        this.nowOrNext = document.getElementById(\"now-or-next\");\n\n        window.onload = () => {\n            this.startPreloader();\n            this.startUpdatingStageEvents();\n        }\n    }\n\n    startUpdatingStageEvents() {\n        this.updateStageEvent();\n        setInterval(() => {\n            this.updateStageEvent();\n        }, 120000);\n    }\n\n    async updateStageEvent() {\n        const allEvents = await this.getCalEvents();\n        const todayDate = new Date(Date.now());\n        const todayEvents = this.getTodayEvents(allEvents, todayDate);\n        const currEvent = this.getCurrEvent(todayEvents, todayDate);\n        const noData = { summary: \"Нет данных\" };\n\n        if (!currEvent) {\n            const nextEvent = this.getNextEvent(todayEvents, todayDate);\n            return this.setEvent(nextEvent ? nextEvent : noData, todayDate)\n        }\n        this.setEvent(currEvent ? currEvent : noData, todayDate);\n    }\n\n    async getCalEvents() {\n        const resp = await request(\"/api/ical/stage\", \"GET\");\n        if (resp.status !== 200) {\n            clearInterval(this.intId);\n            this.nowOnStage.textContent = \"? error ?\";\n        }\n        const data = await resp.json();\n        return data.evts;\n    }\n\n    getTodayEvents(evts, todayDate) {\n        const todayEvts = [];\n\n        for (let key in evts) {\n            const evStartDate = new Date(evts[key].start);\n            const evEndDate = new Date(evts[key].end);\n            if (evStartDate.getFullYear() == todayDate.getFullYear() && evStartDate.getMonth() == todayDate.getMonth() && (evStartDate.getDate() == todayDate.getDate() || evEndDate.getDate() == todayDate.getDate())) {\n                todayEvts.push(evts[key]);\n            }\n        }\n\n        return todayEvts;\n    }\n\n    getCurrEvent(todayEvents, todayDate) {\n        for (let i = 0; i < todayEvents.length; i++) {\n            const evStart = new Date(todayEvents[i].start).getTime();\n            const evEnd = new Date(todayEvents[i].end).getTime();\n            const currTime = todayDate.getTime();\n\n            if (evStart < currTime && evEnd > currTime) {\n                return todayEvents[i];\n            }\n        }\n\n        return false;\n    }\n\n    getNextEvent(todayEvents, todayDate) {\n        let datePlusHour = todayDate.getTime();\n\n        for (let b = 0; b < 5; b++) {\n            datePlusHour += 1000 * 60 * 60;\n            for (let i = 0; i < todayEvents.length; i++) {\n                const evStart = new Date(todayEvents[i].start).getTime();\n                const evEnd = new Date(todayEvents[i].end).getTime();\n\n                if (evStart < datePlusHour && evEnd > datePlusHour) {\n                    return todayEvents[i];\n                }\n\n            }\n        }\n    }\n\n    getRusTime(time) {\n        time = new Date(time);\n        return `${time.getHours()}:${time.getMinutes().toString().length == 1 ? time.getMinutes().toString() + \"0\" : time.getMinutes()}`;\n    }\n\n    setEvent(evt, todayDate) {\n        clearInterval(this.intId);\n\n        if (evt && (evt.summary != \"Нет данных\")) {\n            if (new Date(evt.start).getTime() > todayDate.getTime()) {\n                this.nowOrNext.textContent = \"Далее на сцене:\";\n            } else {\n                this.nowOrNext.textContent = \"Сейчас на сцене:\";\n            }\n            const time = \"C \" + this.getRusTime(evt.start) + \" до \" + this.getRusTime(evt.end);\n            this.nowOnStage.textContent = time + \" - \" + evt.summary;\n\n        } else {\n            this.nowOnStage.textContent = evt.summary;\n        }\n    }\n\n    startPreloader() {\n        let str = \".\";\n        this.intId = setInterval(() => {\n            str += \".\";\n            this.nowOnStage.textContent = str;\n            if (str.length > 2) str = \"\";\n        }, 400);\n    }\n}","class Performance {\n  constructor(e = \"\", edit = \"false\") {\n\n    this.edit = edit;\n    this.pointsData = { leftSide: {}, rightSide: {} };\n\n    this.totalPointsNum = 0;\n    this.addPerfBtn = document.getElementById(\"add-performance-btn\");\n    this.preloader = document.getElementById(\"preloader\");\n    this.searchInpt = document.getElementById(\"search-perfs\");\n    this.backgroundModal = document.getElementById(\"background-modal\");\n    this.closeAddPerf = document.getElementById(\"close-adding-perf\");\n    this.savePerfBtn = document.getElementById(\"save-perf-btn\");\n    this.perfName = document.getElementById(\"perf-name\");\n    this.perfType = document.getElementById(\"perf-type\");\n    this.perfUrl = document.getElementById(\"perf-pic-url\");\n    this.perfActs = document.getElementById(\"perf-acts\");\n    this.perfPoints = document.getElementById(\"perf-points\");\n    this.perfNotes = document.getElementById(\"perf-notes\");\n    this.addActBtn = document.getElementById(\"add-act\");\n    this.searchResults = document.getElementById(\"search-results\");\n    this.closeCardPerf = document.getElementById(\"close-card-perf\");\n    this.backgroundCard = document.getElementById(\"card-back\");\n    this.addPointsBtn = document.getElementById(\"add-points\");\n    this.addRightPointBtn = document.getElementById(\"add-right-pt-btn\");\n    this.addLeftPointBtn = document.getElementById(\"add-left-pt-btn\");\n    this.backgroundPoints = document.getElementById(\"points-back\");\n    this.closeEditPointsBtn = document.getElementById(\"close-points-perf\");\n    this.userPointsBack = document.getElementById(\"user-points-back\");\n    this.closeUserPoints = document.getElementById(\"close-user-points\");\n    this.cardPerfName = document.getElementById(\"card-perf-name\");\n    this.cardPerfImg = document.getElementById(\"card-perf-img\");\n    this.cardPerfType = document.getElementById(\"card-perf-type\");\n    this.cardPerfActs = document.getElementById(\"card-perf-acts\");\n    this.cardPerfPoints = document.getElementById(\"card-perf-points\");\n    this.cardPerfNotes = document.getElementById(\"card-perf-notes\");\n    this.totalPointsSpan = document.getElementById(\"total-points-num\");\n\n    if (this.edit === \"true\") {\n      this.addPerfBtn.onclick = () => {\n        this.backgroundModal.style.display = \"block\";\n      };\n\n      this.closeAddPerf.onclick = () => {\n        this.backgroundModal.style.display = \"none\";\n      };\n\n      this.savePerfBtn.onclick = () => {\n        this.save(!1, \"create\");\n      };\n\n      this.perfName.onclick = () => {\n        this.perfName.style.borderColor = \"initial\";\n      };\n\n      this.perfType.onclick = () => {\n        this.perfType.style.borderColor = \"initial\";\n      };\n\n      this.addActBtn.onclick = () => {\n        this.addAct();\n      };\n\n      this.addRightPointBtn.onclick = () => {\n        this.addPoint(\"right\");\n      };\n\n      this.addLeftPointBtn.onclick = () => {\n        this.addPoint(\"left\");\n      };\n    }\n\n    this.closeEditPointsBtn.onclick = () => {\n      this.saveEditingPoints();\n    };\n\n    this.addPointsBtn.onclick = () => {\n      this.backgroundPoints.style.display = \"block\";\n      window.scrollTo(0, 0);\n    };\n\n    this.closeCardPerf.onclick = () => {\n      this.savePerfBtn.onclick = () => {\n        this.save(!1, \"create\");\n      };\n      this.backgroundCard.style.display = \"none\";\n    };\n\n    this.closeUserPoints.onclick = () => {\n      this.userPointsBack.style.display = \"none\";\n    };\n\n    this.searchInpt.oninput = () => {\n      if (this.searchInpt.value && this.searchInpt.value != \"\") {\n        this.clearDomElement(this.searchResults, async () => {\n\n          if (/^\\s*$/.test(this.searchInpt.value)) {\n            this.fillSearchResults([]);\n          }\n          else {\n\n            const query = {\n              query: this.searchInpt.value\n            }\n\n            this.preloader.style.display = \"block\";\n\n            const resp = await request(\"/perf-search\", \"POST\", query);\n            console.log(resp)\n            if (resp.statusText == \"OK\") {\n              const data = await resp.json();\n              this.fillSearchResults(data.perfs);\n              this.preloader.style.display = \"none\";\n            } else {\n              if (resp === \"error\")\n                return this.preloader.style.display = \"none\";\n              if (resp == \"econn\") {\n                this.preloader.style.display = \"none\";\n                const div = document.createElement(\"div\");\n                div.setAttribute(\"class\", \"perf-name-found nothing-found\");\n                div.textContent = \"Проверьте интернет соединение\";\n                if (!this.searchResults.childNodes[0]) {\n                  this.searchResults.appendChild(div);\n                }\n              }\n            }\n          }\n        })\n      }\n      else {\n        setTimeout(() => {\n          this.clearDomElement(this.searchResults, () => { });\n        }, 100);\n      }\n    };\n\n  }\n\n\n  getActsEnding = num => {\n    let actsNum = 1 == num ? num + \" акт\" : num > 1 && num < 5 ? num + \" акта\" : num + \"актов\";\n    return actsNum;\n  };\n\n  showPerformanceCard = () => {\n    this.backgroundCard.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  showUsualPointsTable = () => {\n    this.userPointsBack.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  clearDomElement = (element, cb) => {\n    while (element.firstChild) {\n      element.firstChild.remove();\n    }\n    return cb();\n  };\n\n  fillCardPerformanceActs = (perfType, acts) => {\n    if (perfType === \"ballet\") {\n      this.cardPerfType.textContent = `Балет, ${this.getActsEnding(acts.length)}`;\n    } else if (perfType === \"opera\") {\n      this.cardPerfType.textContent = `Опера, ${this.getActsEnding(acts.length)}`;\n    }\n\n    this.clearDomElement(this.cardPerfActs, () => {\n      for (let i = 0; i < acts.length; i++) {\n        let div = document.createElement(\"div\"),\n          s1 = document.createElement(\"span\"),\n          s2 = document.createElement(\"span\");\n\n        div.setAttribute(\"class\", \"act-line\");\n        s1.textContent = `${i + 1} Акт:`;\n        s2.textContent = `${acts[i]}`;\n        div.appendChild(s1);\n        div.appendChild(s2);\n        this.cardPerfActs.appendChild(div);\n      }\n    });\n  };\n\n  fillCardPerformancePoints = (points) => {\n\n    if (points) {\n\n      if (this.cardPerfPoints.childNodes.length == 2) {\n        this.cardPerfPoints.childNodes[1].remove()\n      }\n      else if (this.cardPerfPoints.childNodes.length == 3) {\n        this.cardPerfPoints.childNodes[1].remove();\n        this.cardPerfPoints.childNodes[1].remove()\n      }\n\n      const p = document.createElement(\"p\");\n      p.setAttribute(\"class\", \"total-points-usr\");\n      p.textContent = `Всего: ${this.countPointsNum(points)} шт.`;\n      this.cardPerfPoints.appendChild(p),\n        this.fillUserPointsTable(points);\n\n      const btn = document.createElement(\"button\");\n      btn.setAttribute(\"class\", \"showPoints-btn\");\n      btn.textContent = \"Просмотр\";\n      btn.onclick = () => {\n        this.userPointsBack.style.height = this.backgroundCard.offsetHeight + \"px\";\n        this.showUsualPointsTable();\n      }\n      this.cardPerfPoints.appendChild(btn);\n\n    } else if (this.cardPerfPoints.childNodes.length == 3) {\n      this.cardPerfPoints.childNodes[1].remove();\n      this.cardPerfPoints.childNodes[1].remove();\n      const i = document.createElement(\"i\");\n      i.textContent = \"– Отсутствуют\";\n      this.cardPerfPoints.appendChild(i);\n    }\n  };\n\n  fillPerformanceCard = (perf) => {\n\n    this.cardPerfName.textContent = perf.name;\n\n    if (perf.imgUrl) {\n      this.cardPerfImg.src = window.location.origin + \"/static/imgs/performance-imgs/\" + perf.imgUrl;\n      this.cardPerfImg.style.display = \"inline-block\";\n    } else {\n      this.cardPerfImg.src = window.location.origin + \"/static/imgs/performance-imgs/no-photo.png\";\n      this.cardPerfImg.style.display = \"inline-block\";\n    }\n\n    this.fillCardPerformanceActs(perf.type, perf.acts);\n    this.fillCardPerformancePoints(perf.points);\n\n    if (perf.notes != \"\") {\n      this.cardPerfNotes.innerHTML = perf.notes;\n    } else {\n      this.cardPerfNotes.textContent = \"– Отсутствуют\";\n    }\n\n    if (this.edit === \"true\") {\n      let btn = document.createElement(\"button\");\n      btn.setAttribute(\"class\", \"edit-btn\");\n      btn.textContent = \"Редактировать\";\n      btn.onclick = () => {\n        this.openEdit(perf);\n      };\n\n      let delBtn = document.createElement(\"button\");\n      delBtn.setAttribute(\"class\", \"rm-perf-btn\");\n      delBtn.textContent = \"Удалить\";\n      delBtn.onclick = () => {\n        if (confirm(`Вы действительно хотите удалить спектакль \"${perf.name}\" из базы?`)) {\n          this.save(perf._id, \"remove\");\n        }\n      };\n\n      if (this.cardPerfName.parentElement.childNodes.length == 4) {\n        this.cardPerfName.parentElement.appendChild(btn);\n        this.cardPerfName.parentElement.appendChild(delBtn)\n      } else {\n        this.cardPerfName.parentElement.childNodes[4].remove();\n        this.cardPerfName.parentElement.childNodes[4].remove();\n        this.cardPerfName.parentElement.appendChild(btn);\n        this.cardPerfName.parentElement.appendChild(delBtn);\n      }\n    }\n\n    this.savePerfBtn.onclick = () => {\n      this.save(perf._id, \"update\");\n    };\n  };\n\n  fillSearchResults = results => {\n    if (results.length == 0) {\n      const div = document.createElement(\"div\");\n      div.setAttribute(\"class\", \"perf-name-found nothing-found\");\n      div.textContent = \"Ничего не найдено\";\n      if (!this.searchResults.childNodes[0]) {\n        this.searchResults.appendChild(div);\n      }\n    } else\n      for (let i = 0; i < results.length; i++) {\n        let div = document.createElement(\"div\");\n        div.setAttribute(\"class\", \"perf-name-found\");\n        div.textContent = results[i].name;\n\n        div.onclick = () => {\n          this.fillPerformanceCard(results[i]);\n          this.showPerformanceCard();\n        };\n        for (let b = 0; b < this.searchResults.childNodes.length; b++) {\n          if (this.searchResults.childNodes[b].textContent == div.textContent) {\n            return;\n          }\n        }\n        this.searchResults.appendChild(div);\n\n      }\n  };\n\n\n  openEdit = perf => {\n    // e = perf;\n    this.pointsData = perf.points;\n    this.backgroundCard.style.display = \"none\";\n    this.backgroundModal.style.display = \"block\";\n    this.perfName.value = perf.name;\n    this.perfType.value = perf.type;\n    this.perfUrl.value = perf.imgUrl;\n\n    if (perf.acts.length > 0) {\n      // let t, o, i, s, l;\n      let actLine, sp1, inpt, sp2, btn;\n\n      this.perfActs.innerHTML = \"\";\n      for (let i = 0; i < perf.acts.length; i++) {\n        actLine = document.createElement(\"div\");\n        actLine.setAttribute(\"class\", \"act-line\");\n        sp1 = document.createElement(\"span\");\n        sp1.setAttribute(\"class\", \"perf-act\");\n        sp1.textContent = i + 1 + \":\";\n        actLine.appendChild(sp1);\n        inpt = document.createElement(\"input\");\n        inpt.setAttribute(\"class\", \"act-time\");\n        inpt.setAttribute(\"type\", \"text\");\n        inpt.setAttribute(\"placeholder\", \"1ч 15мин\");\n        inpt.value = perf.acts[i];\n        actLine.appendChild(inpt);\n\n        if (i == 0) {\n          btn = document.createElement(\"button\");\n          btn.setAttribute(\"class\", \"add-mini-btn\");\n          btn.textContent = \"+\";\n          btn.onclick = () => {\n            this.addAct();\n          }\n          actLine.appendChild(btn)\n        } else {\n          sp2 = document.createElement(\"span\");\n          sp2.setAttribute(\"class\", \"del-act-btn\");\n          sp2.textContent = \"X\";\n          sp2.onclick = e => {\n            e.target.parentElement.remove();\n          };\n          actLine.appendChild(sp2);\n          // em = document.createElement(\"button\");\n          // sp1.setAttribute(\"class\", \"perf-act\");\n        }\n        this.perfActs.appendChild(actLine);\n      }\n\n      this.fillEditCardPointsDiv(perf.points);\n      this.fillPointsEditModal(perf.points);\n      this.perfNotes.value = perf.notes;\n      this.savePerfBtn.textContent = \"Сохранить изменения\";\n      this.savePerfBtn.onclick = () => {\n        this.save(perf._id, \"update\");\n      };\n    }\n  };\n\n  fillEditCardPointsDiv = points => {\n    // e = points\n    if (points) {\n      this.perfPoints.childNodes[0].remove();\n      this.perfPoints.childNodes[0].remove();\n      let span = document.createElement(\"span\"); // t\n      span.setAttribute(\"class\", \"points-number\");\n      span.textContent = this.countPointsNum(points) + \" шт.\";\n      let span2 = document.createElement(\"span\"); // o\n      span2.setAttribute(\"class\", \"showPoints-btn\");\n      span2.textContent = \"Редактор\";\n      span2.onclick = () => {\n        this.fillPointsEditModal(points);\n        this.backgroundPoints.style.height = this.backgroundModal.offsetHeight + \"px\";\n        this.backgroundPoints.style.display = \"block\";\n        window.scrollTo(0, 0);\n      };\n      this.perfPoints.appendChild(span),\n        this.perfPoints.appendChild(span2);\n    }\n  };\n\n  isEmpty = obj => {\n    for (var prop in obj)\n      if (obj.hasOwnProperty(prop)) return false;\n    return JSON.stringify(obj) === JSON.stringify({});\n  };\n\n  fillPointsEditModal = (points = {}) => {\n    // e = points\n\n    // let t, o, i, s, l, a = document.getElementById(\"left-table\").firstChild,\n    // d = document.getElementById(\"right-table\").firstChild;\n    let trLeft, trRight, td1, td2, td3;\n\n    const leftTableFirstChild = document.getElementById(\"left-table\").firstChild;\n    const rightTableFirstChild = document.getElementById(\"right-table\").firstChild;\n\n    while (leftTableFirstChild.childNodes.length > 1) {\n      leftTableFirstChild.childNodes[1].remove();\n    }\n    while (rightTableFirstChild.childNodes.length > 1) {\n      rightTableFirstChild.childNodes[1].remove();\n    }\n\n    this.totalPointsNum = this.countPointsNum(points);\n\n    document.getElementById(\"total-points-num\").textContent = this.countPointsNum(points) + \" шт.\";\n\n    for (const leftPoint in points.leftSide) {\n      if (this.isEmpty(points.leftSide[leftPoint])) continue;\n      // let d, r, c\n      let input, sp, input2;\n      trLeft = document.createElement(\"tr\");\n      trLeft.setAttribute(\"class\", \"left-point-rope\");\n      trLeft.appendChild(document.createElement(\"td\"));\n      td1 = document.createElement(\"td\");\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      input = document.createElement(\"input\");\n      input.setAttribute(\"type\", \"number\");\n      input.setAttribute(\"class\", \"lines\");\n      input.value = points.leftSide[leftPoint].stalls.split(\"/\")[0];\n      sp = document.createElement(\"span\");\n      sp.textContent = \"/\";\n      input2 = document.createElement(\"input\");\n      input2.setAttribute(\"type\", \"number\");\n      input2.setAttribute(\"class\", \"lines\");\n      input2.value = points.leftSide[leftPoint].stalls.split(\"/\")[1];\n      td1.appendChild(input);\n      td1.appendChild(sp);\n      td1.appendChild(input2);\n      let input3 = document.createElement(\"input\");\n      input3.setAttribute(\"type\", \"number\");\n      input3.setAttribute(\"class\", \"meters\");\n      input3.value = points.leftSide[leftPoint].meters;\n      td2.appendChild(input3);\n      let input4 = document.createElement(\"input\");\n      input4.setAttribute(\"type\", \"number\");\n      input4.setAttribute(\"class\", \"machine\");\n      input4.value = points.leftSide[leftPoint].machine;\n      td3.appendChild(input4);\n      let delSpan = document.createElement(\"span\");\n      delSpan.setAttribute(\"class\", \"del-point-rope\");\n      delSpan.textContent = \"X\";\n      delSpan.onclick = e => {\n        if (confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          this.totalPointsNum--;\n          this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\n        }\n      };\n\n      td3.appendChild(delSpan);\n      trLeft.appendChild(td1);\n      trLeft.appendChild(td2);\n      trLeft.appendChild(td3);\n      leftTableFirstChild.appendChild(trLeft);\n    }\n\n    for (const rightPoint in points.rightSide) {\n      \n      if (this.isEmpty(points.rightSide[rightPoint])) continue;\n      // let a, r, c;\n      let input, sp, input2;\n      trRight = document.createElement(\"tr\");\n      trRight.setAttribute(\"class\", \"right-point-rope\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td1 = document.createElement(\"td\");\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      input = document.createElement(\"input\");\n      input.setAttribute(\"type\", \"number\");\n      input.setAttribute(\"class\", \"lines\");\n      input.value = points.rightSide[rightPoint].stalls.split(\"/\")[0];\n      sp = document.createElement(\"span\");\n      sp.thenextContent = \"/\";\n      input2 = document.createElement(\"input\");\n      input2.setAttribute(\"type\", \"number\");\n      input2.setAttribute(\"class\", \"lines\");\n      input2.value = points.rightSide[rightPoint].stalls.split(\"/\")[1];\n      td1.appendChild(input);\n      td1.appendChild(sp);\n      td1.appendChild(input2);\n\n      let input3 = document.createElement(\"input\");\n      input3.setAttribute(\"type\", \"number\");\n      input3.setAttribute(\"class\", \"meters\");\n      input3.value = points.rightSide[rightPoint].meters;\n      td2.appendChild(input3);\n\n      let input4 = document.createElement(\"input\");\n      input4.setAttribute(\"type\", \"number\");\n      input4.setAttribute(\"class\", \"machine\");\n      input4.value = points.rightSide[rightPoint].machine;\n      td3.appendChild(input4);\n\n      let delSpan = document.createElement(\"span\");\n      delSpan.setAttribute(\"class\", \"del-point-rope\");\n      delSpan.textContent = \"X\";\n      delSpan.onclick = e => {\n        if (confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          this.totalPointsNum--;\n          this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\n        }\n      }\n      td3.appendChild(delSpan);\n      trRight.appendChild(td1);\n      trRight.appendChild(td2);\n      trRight.appendChild(td3);\n      rightTableFirstChild.appendChild(trRight);\n    }\n  };\n\n  countPointsNum = points => {\n    let num = 0;\n    if (!points) return 0;\n    for (let key in points.leftSide) {\n      if (!this.isEmpty(points.leftSide[key])) {\n        num++;\n      }\n    }\n    for (let key in points.rightSide) {\n      if (!this.isEmpty(points.rightSide[key])) {\n        num++;\n      }\n    }\n    return num;\n  };\n\n  fillUserPointsTable = points => {\n    // e = points\n    // let t-tr, o, i-td1, s-td2, l-td3,\n    let trLeft, trRight, td1, td2, td3;\n    // a = document.getElementById(\"left-usr-table\").firstChild,\n    // d = document.getElementById(\"right-usr-table\").firstChild;\n\n    let leftTableFirstChild = document.getElementById(\"left-usr-table\").firstChild;\n    let rightTableFirstChild = document.getElementById(\"right-usr-table\").firstChild;\n\n    while (leftTableFirstChild.childNodes.length > 1) leftTableFirstChild.childNodes[1].remove();\n    while (rightTableFirstChild.childNodes.length > 1) rightTableFirstChild.childNodes[1].remove();\n\n    document.getElementById(\"total-user-points\").textContent = this.countPointsNum(points) + \" шт.\";\n\n    // n - point\n    for (const leftPoint in points.leftSide) {\n      trLeft = document.createElement(\"tr\");\n      trLeft.appendChild(document.createElement(\"td\"));\n      td1 = document.createElement(\"td\");\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td1.textContent = points.leftSide[leftPoint].stalls;\n      trLeft.appendChild(td1);\n      td2.textContent = points.leftSide[leftPoint].meters;\n      trLeft.appendChild(td2);\n      td3.textContent = points.leftSide[leftPoint].machine;\n      trLeft.appendChild(td3);\n      leftTableFirstChild.appendChild(trLeft);\n    }\n    for (const rightPoint in points.rightSide) {\n      trRight = document.createElement(\"tr\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td1 = document.createElement(\"td\");\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td1.textContent = points.rightSide[rightPoint].stalls;\n      trRight.appendChild(td1);\n      td2.textContent = points.rightSide[rightPoint].meters;\n      trRight.appendChild(td2);\n      td3.textContent = points.rightSide[rightPoint].machine;\n      trRight.appendChild(td3);\n      rightTableFirstChild.appendChild(trRight);\n    }\n  };\n\n  saveEditingPoints = () => {\n    const left = document.getElementsByClassName(\"left-point-rope\"); // e\n    const right = document.getElementsByClassName(\"right-point-rope\"); // t\n\n    this.pointsData = { leftSide: {}, rightSide: {} };\n\n    if (left.length != 0 || right.length != 0) {\n      for (let t = 0; t < left.length; t++) {\n        this.pointsData.leftSide[\"point\" + (t + 1)] = {};\n        for (let o = 1; o < left[t].childNodes.length; o++)\n          if (o == 1) {\n            let first = left[t].childNodes[o].firstChild, // i\n              last = left[t].childNodes[o].lastChild; // s\n            if (!first.value) {\n              ;\n              first.parentElement.style.backgroundColor = \"red\";\n              first.onclick = () => {\n                first.parentElement.style.backgroundColor = \"initial\";\n              }\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            if (!last.value) {\n              last.parentElement.style.backgroundColor = \"red\";\n              last.onclick = () => {\n                last.parentElement.style.backgroundColor = \"initial\";\n              }\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            this.pointsData.leftSide[\"point\" + (t + 1)].stalls = first.value + \"/\" + last.value;\n          } else if (o == 2) {\n            if (!left[t].childNodes[o].firstChild.value) {\n              left[t].childNodes[o].firstChild.parentElement.style.backgroundColor = \"red\";\n              left[t].childNodes[o].firstChild.onclick = () => {\n                left[t].childNodes[o].firstChild.parentElement.style.backgroundColor = \"initial\";\n              }\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            this.pointsData.leftSide[\"point\" + (t + 1)].meters = left[t].childNodes[o].firstChild.value;\n          } else if (o == 3) {\n            this.pointsData.leftSide[\"point\" + (t + 1)].machine = left[t].childNodes[o].firstChild.value;\n          }\n      }\n\n      for (let e = 0; e < right.length; e++) {\n        this.pointsData.rightSide[\"point\" + (e + 1)] = {};\n\n        for (let o = 1; o < right[e].childNodes.length; o++) {\n          if (o == 1) {\n            let first = right[e].childNodes[o].firstChild, // i\n              last = right[e].childNodes[o].lastChild; // s\n            if (!first.value) {\n              first.parentElement.style.backgroundColor = \"red\";\n              first.onclick = () => {\n                first.parentElement.style.backgroundColor = \"initial\";\n              };\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            if (!last.value) {\n              last.parentElement.style.backgroundColor = \"red\";\n              last.onclick = () => {\n                last.parentElement.style.backgroundColor = \"initial\";\n              };\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            this.pointsData.rightSide[\"point\" + (e + 1)].stalls = first.value + \"/\" + last.value;\n          } else if (o == 2) {\n            if (!right[e].childNodes[o].firstChild.value) {\n              right[e].childNodes[o].firstChild.parentElement.style.backgroundColor = \"red\";\n              right[e].childNodes[o].firstChild.onclick = () => {\n                right[e].childNodes[o].firstChild.parentElement.style.backgroundColor = \"initial\";\n              }\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            this.pointsData.rightSide[\"point\" + (e + 1)].meters = right[e].childNodes[o].firstChild.value;\n          } else if (o == 3) {\n            this.pointsData.rightSide[\"point\" + (e + 1)].machine = right[e].childNodes[o].firstChild.value;\n          }\n        }\n      }\n      this.fillEditCardPointsDiv(this.pointsData);\n      this.backgroundPoints.style.display = \"none\";\n    } else {\n      this.backgroundPoints.style.display = \"none\";\n    }\n  };\n\n  addAct = () => {\n    let num = this.perfActs.childNodes.length + 1, // t\n      div = document.createElement(\"div\"), // o\n      sp = document.createElement(\"span\"), // i\n      inpt = document.createElement(\"input\"), // s\n      sp2 = document.createElement(\"span\"); // l\n\n    div.setAttribute(\"class\", \"act-line\");\n    sp.setAttribute(\"class\", \"perf-act\");\n    sp.setAttribute(\"id\", \"perf-act\" + num);\n    sp.textContent = num + \":\";\n    inpt.setAttribute(\"type\", \"text\");\n    inpt.setAttribute(\"class\", \"act-time\");\n    inpt.setAttribute(\"id\", \"act-time\" + num);\n    inpt.setAttribute(\"placeholder\", \"1ч 15мин\");\n    sp2.setAttribute(\"id\", \"del-act-btn\" + num);\n    sp2.setAttribute(\"class\", \"del-act-btn\");\n    sp2.textContent = \"X\";\n    sp2.onclick = () => {\n      sp2.parentElement.remove();\n    };\n    div.appendChild(sp);\n    div.appendChild(inpt);\n    div.appendChild(sp2);\n    this.perfActs.insertBefore(div, this.perfActs.childNodes[e]);\n  };\n\n  checkActs = () => {\n    let childLen = this.perfActs.childNodes.length, //e\n      children = this.perfActs.childNodes; //t\n    for (let i = 0; i < childLen; i++) { // n\n      if (!children[i].childNodes[1].value) {\n        children[i].childNodes[1].style.borderColor = \"red\"\n        children[i].childNodes[1].onclick = () => {\n          return children[i].childNodes[1].style.borderColor = \"initial\";\n        }\n        return false;\n      }\n    }\n    return true;\n  };\n\n  inputsValid = () => {\n    if (!this.perfName.value) {\n      this.perfName.style.borderColor = \"red\"\n      return false;\n    } else if (!this.perfType.value) {\n      this.perfType.style.borderColor = \"red\"\n      return false;\n    } else if (!this.checkActs()) {\n      this.perfActs.borderColor = \"red\";\n      return false;\n    }\n    return true;\n  };\n\n  save = async (perfId, action) => { // e , t\n    if (\"update\" === action || \"create\" === action) {\n      if (this.inputsValid()) {\n        let perfName = this.perfName.value, //o\n          perfType = this.perfType.value, // i\n          perfUrl = this.perfUrl.value, // s\n          acts = [], // l\n          perfNotes = this.perfNotes.value; // a\n\n\n        for (let e = 0; e < this.perfActs.childNodes.length; e++) {\n          if (this.perfActs.childNodes[e].childNodes[1].value.includes(\",\")) {\n            return this.perfActs.childNodes[e].childNodes[1].style.borderColor = \"red\";\n          }\n          acts.push(this.perfActs.childNodes[e].childNodes[1].value);\n        }\n        if (perfId && action === \"update\") {\n          // let query = `name=${perfName}&type=${perfType}&imgUrl=${perfUrl}&acts=${acts}&points=${JSON.stringify()}&notes=${perfNotes}&perfId=${perfId}&action=${action}`;\n          let data = {\n            name: perfName,\n            type: perfType,\n            imgUrl: perfUrl,\n            acts: acts,\n            points: this.pointsData,\n            notes: perfNotes,\n            perfId: perfId,\n            action: action\n          }\n\n          const resp = await request(\"/performances\", \"POST\", data);\n\n          if (resp.statusText == \"OK\") {\n            alert(\"Спектакль обновлен успешно\");\n            this.backgroundModal.style.display = \"none\";\n            window.location.reload();\n            return;\n          } else {\n            alert(\"Ошибка во время сохранения\");\n            return;\n          }\n\n        } else if (!perfId && action == \"create\") {\n          let data = {\n            name: perfName,\n            type: perfType,\n            imgUrl: perfUrl,\n            acts: acts,\n            points: this.pointsData,\n            notes: perfNotes,\n            perfId: perfId,\n            action: action\n          }\n\n          const resp = await request(\"/performances\", \"POST\", data);\n          if (resp.statusText == \"OK\") {\n            alert(\"Новый спектакль успешно добавлен\");\n            window.location.reload();\n          }\n          else {\n            alert(\"Ошибка во время создания\");\n            return;\n          }\n        }\n      }\n    } else if (action === \"remove\") {\n      let dt = {\n        perfId: perfId,\n        action: action\n      }\n      let resp = await request(\"/performances\", \"POST\", dt);\n      if (resp.statusText == \"OK\") {\n        alert(\"Спектакль успешно удалён\");\n        window.location.reload();\n        return;\n      }\n      else {\n        alert(\"Ошибка удаления\");\n        return;\n      };\n    }\n  };\n\n  addPoint = point => {\n    // e - point\n    // t-tr, o-sp\n\n    const tr = document.createElement(\"tr\");\n    const sp = document.createElement(\"span\");\n\n    sp.textContent = \"/\";\n\n    for (let i = 0; i < 4; i++) {\n      let td = document.createElement(\"td\");\n\n      if (i == 1) {\n        for (let b = 0; b < 2; b++) {\n          let inpt = document.createElement(\"input\");\n          inpt.setAttribute(\"type\", \"number\");\n          inpt.setAttribute(\"class\", \"lines\");\n          if (b == 1) {\n            td.appendChild(sp);\n          }\n          td.appendChild(inpt);\n        }\n      }\n\n      else if (i == 2) {\n        let inpt = document.createElement(\"input\");\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"meters\");\n        td.appendChild(inpt);\n      } else if (i == 3) {\n        // e-inpt, t -sp\n        let inpt = document.createElement(\"input\");\n        let sp = document.createElement(\"span\");\n        sp.textContent = \"X\";\n        sp.setAttribute(\"class\", \"del-point-rope\");\n        sp.onclick = e => {\n          if (confirm(\"Удалить эту точку подвеса?\")) {\n            e.target.parentElement.parentElement.remove();\n            this.totalPointsNum--;\n            this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\n          }\n        }\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"machine\");\n        td.appendChild(inpt);\n        td.appendChild(sp);\n      }\n      tr.appendChild(td);\n    }\n    tr.setAttribute(\"class\", point + \"-point-rope\");\n    document.getElementById(point + \"-table\").appendChild(tr);\n    this.totalPointsNum++;\n    this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\n  };\n}\n","class Repertuar {\n\n\n  constructor() {\n    this.rollLine = document.getElementById(\"event-container\");\n    this.day = 1000 * 60 * 60 * 24;\n    this.dt = new Date(Date.now());\n\n    for(let i=0; i < 5; i++) {\n      this.todaySquare = document.getElementById(`${new Date(Date.now()).getMonth()}-${this.dt.getDate()}`);\n      if (!this.todaySquare) {\n        this.dt = new Date(this.dt.getTime() + this.day);\n      } else {\n        break\n      }\n    }\n    this.target = this.todaySquare.offsetLeft - 200;\n\n    window.onload = () => {\n      this.startAnimatingScroll();\n    };\n  }\n\n  startAnimatingScroll() {\n    let speed = 10;\n    let d = 1;\n    let id = setInterval(() => {\n      if (this.rollLine.scrollLeft < this.target) {\n        d++;\n        this.rollLine.scrollLeft += 500 + (speed*d);\n      } else {\n        clearInterval(id);\n      }\n    }, 50);\n  }\n}\n","\nasync function request(url, method, data) {\n  const response = await fetch(url, {\n    method: method,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body:  JSON.stringify(data) \n  });\n  return response;\n}"]}