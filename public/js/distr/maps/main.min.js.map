{"version":3,"sources":["authenticate.js","authorisate.js","performances.js","request.js"],"names":["Authenticate","[object Object]","this","login","document","getElementById","pass1","pass2","authBtn","onclick","style","borderColor","authenticate","value","alert","authData","resp","request","statusText","window","location","href","Authorisate","loginInpt","passInpt","authorise","pass","Performance","e","edit","pointsData","leftSide","rightSide","totalPointsNum","addPerfBtn","preloader","searchInpt","backgroundModal","closeAddPerf","savePerfBtn","perfName","perfType","perfUrl","perfActs","perfPoints","perfNotes","addActBtn","searchResults","closeCardPerf","backgroundCard","addPointsBtn","addRightPointBtn","addLeftPointBtn","backgroundPoints","closeEditPointsBtn","userPointsBack","closeUserPoints","cardPerfName","cardPerfImg","cardPerfType","cardPerfActs","cardPerfPoints","cardPerfNotes","totalPointsSpan","display","save","addAct","addPoint","saveEditingPoints","scrollTo","oninput","clearDomElement","async","test","fillSearchResults","query","data","json","perfs","div","createElement","setAttribute","textContent","childNodes","appendChild","setTimeout","num","element","cb","firstChild","remove","acts","getActsEnding","length","i","s1","s2","points","p","countPointsNum","fillUserPointsTable","btn","height","offsetHeight","showUsualPointsTable","perf","name","imgUrl","src","origin","fillCardPerformanceActs","type","fillCardPerformancePoints","notes","innerHTML","openEdit","delBtn","confirm","_id","parentElement","results","fillPerformanceCard","showPerformanceCard","b","actLine","sp1","inpt","sp2","target","fillEditCardPointsDiv","fillPointsEditModal","span","span2","obj","prop","hasOwnProperty","JSON","stringify","trLeft","trRight","td1","td2","td3","leftTableFirstChild","rightTableFirstChild","leftPoint","isEmpty","input","sp","input2","stalls","split","input3","meters","input4","machine","delSpan","rightPoint","thenextContent","t","key","left","getElementsByClassName","right","o","first","last","lastChild","backgroundColor","insertBefore","childLen","children","checkActs","perfId","action","inputsValid","includes","push","reload","dt","point","tr","td","url","method","fetch","headers","Content-Type","body"],"mappings":"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","file":"../main.min.js","sourcesContent":["\r\nclass Authenticate {\r\n\r\n  constructor() {\r\n    this.login = document.getElementById(\"login\");\r\n    this.pass1 = document.getElementById(\"pass1\");\r\n    this.pass2 = document.getElementById(\"pass2\");\r\n    this.authBtn = document.getElementById(\"authenticate-bt\");\r\n\r\n    this.login.onclick = () => {\r\n      this.login.style.borderColor = \"transparent\";\r\n    };\r\n\r\n    this.pass1.onclick = () => {\r\n      this.pass1.style.borderColor = \"transparent\";\r\n    };\r\n\r\n    this.pass2.onclick = () => {\r\n      this.pass2.style.borderColor = \"transparent\";\r\n    };\r\n\r\n    this.authBtn.onclick = () => {\r\n      this.authenticate();\r\n    }\r\n  }\r\n\r\n  async authenticate () {\r\n    if (!this.login.value) {\r\n      alert('Поле \"Логин\" пусто. Придумайте себе логин, чтобы продолжить.');\r\n      this.login.style.borderColor = \"#f26a6a\";\r\n      return;\r\n    }\r\n    else if (!this.pass1.value) {\r\n      alert('Поле \"Пароль\" пусто. Придумайте себе пароль, чтобы продолжить.');\r\n      this.pass1.style.borderColor = \"#f26a6a\";\r\n      return;\r\n    }\r\n    else if (!this.pass2.value) {\r\n        alert('Поле \"Пароль повторно\" пусто. Введите пароль повторно, чтобы продолжить.');\r\n        this.pass2.style.borderColor = \"#f26a6a\";\r\n        return;\r\n    }\r\n\r\n    if (this.pass1.value !== this.pass2.value) {\r\n      alert(\"Введённые Вами пароли не совпадают\");\r\n      return;\r\n    } \r\n\r\n    const authData = {\r\n      login: this.login.value,\r\n      pass1: this.pass1.value,\r\n      pass2: this.pass2.value,\r\n    }\r\n    \r\n    const resp = await request(\"/authenticate\", \"POST\", authData);\r\n    \r\n    if (resp.statusText == \"Inconsistent data\") {\r\n      alert(\"Отсутсвует логин или пароль\");\r\n      return;\r\n    } if (resp.statusText == \"Duplicate\") {\r\n      alert(\"Такой логин уже занят, придумайте другой\");\r\n      return;\r\n    } else if (resp.statusText == \"Passwords mismatch\")  {\r\n      alert(\"Пароли не совпадают\");\r\n      return;\r\n    } else if(resp.statusText == \"Authenticated\") {\r\n      alert(\"Аутентификация успешна, сейчас вы будете перенаправлены на страницу логина\");\r\n      window.location.href = \"/auth\";\r\n      return;\r\n    }\r\n    else {\r\n      alert(\"Ошибка аутентификации\");\r\n      return;\r\n    }\r\n    \r\n  };\r\n\r\n}","class Authorisate {\r\n\r\n  constructor() {\r\n    this.authBtn = document.getElementById(\"auth-bt\");\r\n    this.loginInpt = document.getElementById(\"login\");\r\n    this.passInpt = document.getElementById(\"pass\");\r\n\r\n    this.authBtn.onclick = () => {\r\n      this.authorise();\r\n    };\r\n  }\r\n\r\n\r\n  async authorise() {\r\n\r\n    if (!this.loginInpt.value || !this.passInpt.value) {\r\n      return alert(\"Отсутствует логин или пароль\");\r\n    }\r\n\r\n    const authData = {\r\n      login: this.loginInpt.value,\r\n      pass: this.passInpt.value\r\n    }\r\n\r\n    const resp = await request(\"/auth\", \"POST\", authData);\r\n    \r\n    if (resp.statusText == \"Check login and password\") {\r\n      alert(\"Неверный логин или пароль\");\r\n      return;\r\n    } else if (resp.statusText == \"Authorised\") {\r\n      alert(\"Авторизация успешна и будет действительна в течение 30 дней\");\r\n      window.location.href = \"/performances\";\r\n      return;\r\n    } else {\r\n      alert(\"Произошла ошибка во время авторизации\");\r\n      return;\r\n    }\r\n\r\n  }\r\n}","class Performance {\r\n\r\n  // const n = this;\r\n  // (this.BASE_URL = e),\r\n  constructor(e = \"\", edit = \"false\") {\r\n\r\n    this.edit = edit;\r\n    this.pointsData = { leftSide: {}, rightSide: {} };\r\n\r\n    this.totalPointsNum = 0;\r\n    this.addPerfBtn = document.getElementById(\"add-performance-btn\");\r\n    this.preloader = document.getElementById(\"preloader\");\r\n    this.searchInpt = document.getElementById(\"search-perfs\");\r\n    this.backgroundModal = document.getElementById(\"background-modal\");\r\n    this.closeAddPerf = document.getElementById(\"close-adding-perf\");\r\n    this.savePerfBtn = document.getElementById(\"save-perf-btn\");\r\n    this.perfName = document.getElementById(\"perf-name\");\r\n    this.perfType = document.getElementById(\"perf-type\");\r\n    this.perfUrl = document.getElementById(\"perf-pic-url\");\r\n    this.perfActs = document.getElementById(\"perf-acts\");\r\n    this.perfPoints = document.getElementById(\"perf-points\");\r\n    this.perfNotes = document.getElementById(\"perf-notes\");\r\n    this.addActBtn = document.getElementById(\"add-act\");\r\n    this.searchResults = document.getElementById(\"search-results\");\r\n    this.closeCardPerf = document.getElementById(\"close-card-perf\");\r\n    this.backgroundCard = document.getElementById(\"card-back\");\r\n    this.addPointsBtn = document.getElementById(\"add-points\");\r\n    this.addRightPointBtn = document.getElementById(\"add-right-pt-btn\");\r\n    this.addLeftPointBtn = document.getElementById(\"add-left-pt-btn\");\r\n    this.backgroundPoints = document.getElementById(\"points-back\");\r\n    this.closeEditPointsBtn = document.getElementById(\"close-points-perf\");\r\n    this.userPointsBack = document.getElementById(\"user-points-back\");\r\n    this.closeUserPoints = document.getElementById(\"close-user-points\");\r\n    this.cardPerfName = document.getElementById(\"card-perf-name\");\r\n    this.cardPerfImg = document.getElementById(\"card-perf-img\");\r\n    this.cardPerfType = document.getElementById(\"card-perf-type\");\r\n    this.cardPerfActs = document.getElementById(\"card-perf-acts\");\r\n    this.cardPerfPoints = document.getElementById(\"card-perf-points\");\r\n    this.cardPerfNotes = document.getElementById(\"card-perf-notes\");\r\n    this.totalPointsSpan = document.getElementById(\"total-points-num\");\r\n\r\n    if (this.edit === \"true\") {\r\n      this.addPerfBtn.onclick = () => {\r\n        this.backgroundModal.style.display = \"block\";\r\n      };\r\n\r\n      this.closeAddPerf.onclick = () => {\r\n        this.backgroundModal.style.display = \"none\";\r\n      };\r\n\r\n      this.savePerfBtn.onclick = () => {\r\n        this.save(!1, \"create\");\r\n      };\r\n\r\n      this.perfName.onclick = () => {\r\n        this.perfName.style.borderColor = \"initial\";\r\n      };\r\n\r\n      this.perfType.onclick = () => {\r\n        this.perfType.style.borderColor = \"initial\";\r\n      };\r\n\r\n      this.addActBtn.onclick = () => {\r\n        this.addAct();\r\n      };\r\n\r\n      this.addRightPointBtn.onclick = () => {\r\n        this.addPoint(\"right\");\r\n      };\r\n\r\n      this.addLeftPointBtn.onclick = () => {\r\n        this.addPoint(\"left\");\r\n      };\r\n    }\r\n\r\n    this.closeEditPointsBtn.onclick = () => {\r\n      this.saveEditingPoints();\r\n    };\r\n\r\n    this.addPointsBtn.onclick = () => {\r\n      this.backgroundPoints.style.display = \"block\";\r\n      window.scrollTo(0, 0);\r\n    };\r\n\r\n    this.closeCardPerf.onclick = () => {\r\n      this.savePerfBtn.onclick = () => {\r\n        this.save(!1, \"create\");\r\n      };\r\n      this.backgroundCard.style.display = \"none\";\r\n    };\r\n\r\n    this.closeUserPoints.onclick = () => {\r\n      this.userPointsBack.style.display = \"none\";\r\n    };\r\n\r\n    this.searchInpt.oninput = () => {\r\n      if (this.searchInpt.value && this.searchInpt.value != \"\") {\r\n        this.clearDomElement(this.searchResults, async () => {\r\n\r\n          if (/^\\s*$/.test(this.searchInpt.value)) {\r\n            this.fillSearchResults([]);\r\n          }\r\n          else {\r\n\r\n            const query = {\r\n              query: this.searchInpt.value\r\n            }\r\n\r\n            this.preloader.style.display = \"block\";\r\n\r\n            const resp = await request(\"/perf-search\", \"POST\", query);\r\n            if (resp.statusText == \"OK\") {\r\n              const data = await resp.json();\r\n              this.fillSearchResults(data.perfs);\r\n              this.preloader.style.display = \"none\";\r\n            } else {\r\n              if (resp === \"error\")\r\n                return this.preloader.style.display = \"none\";\r\n              if (resp == \"econn\") {\r\n                this.preloader.style.display = \"none\";\r\n                const div = document.createElement(\"div\");\r\n                div.setAttribute(\"class\", \"perf-name-found nothing-found\");\r\n                div.textContent = \"Проверьте интернет соединение\";\r\n                if (!this.searchResults.childNodes[0]) {\r\n                  this.searchResults.appendChild(div);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        })\r\n      }\r\n      else {\r\n        setTimeout(() => {\r\n          this.clearDomElement(this.searchResults, () => { });\r\n        }, 100);\r\n      }\r\n    };\r\n\r\n  }\r\n\r\n\r\n  getActsEnding = num => {\r\n    let actsNum = 1 == num ? num + \" акт\" : num > 1 && num < 5 ? num + \" акта\" : num + \"актов\";\r\n    return actsNum;\r\n  };\r\n\r\n  showPerformanceCard = () => {\r\n    this.backgroundCard.style.display = \"block\";\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  showUsualPointsTable = () => {\r\n    this.userPointsBack.style.display = \"block\";\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  clearDomElement = (element, cb) => {\r\n    while (element.firstChild) {\r\n      element.firstChild.remove();\r\n    }\r\n    return cb();\r\n  };\r\n\r\n  fillCardPerformanceActs = (perfType, acts) => {\r\n    if (perfType === \"ballet\") {\r\n      this.cardPerfType.textContent = `Балет, ${this.getActsEnding(acts.length)}`;\r\n    } else if (perfType === \"opera\") {\r\n      this.cardPerfType.textContent = `Опера, ${this.getActsEnding(acts.length)}`;\r\n    }\r\n\r\n    this.clearDomElement(this.cardPerfActs, () => {\r\n      for (let i = 0; i < acts.length; i++) {\r\n        let div = document.createElement(\"div\"),\r\n          s1 = document.createElement(\"span\"),\r\n          s2 = document.createElement(\"span\");\r\n\r\n        div.setAttribute(\"class\", \"act-line\");\r\n        s1.textContent = `${i + 1} Акт:`;\r\n        s2.textContent = `${acts[i]}`;\r\n        div.appendChild(s1);\r\n        div.appendChild(s2);\r\n        this.cardPerfActs.appendChild(div);\r\n      }\r\n    });\r\n  };\r\n\r\n  fillCardPerformancePoints = (points) => {\r\n\r\n    if (points) {\r\n\r\n      if (this.cardPerfPoints.childNodes.length == 2) {\r\n        this.cardPerfPoints.childNodes[1].remove()\r\n      }\r\n      else if (this.cardPerfPoints.childNodes.length == 3) {\r\n        this.cardPerfPoints.childNodes[1].remove();\r\n        this.cardPerfPoints.childNodes[1].remove()\r\n      }\r\n\r\n      const p = document.createElement(\"p\");\r\n      p.setAttribute(\"class\", \"total-points-usr\");\r\n      p.textContent = `Всего: ${this.countPointsNum(points)} шт.`;\r\n      this.cardPerfPoints.appendChild(p),\r\n        this.fillUserPointsTable(points);\r\n\r\n      const btn = document.createElement(\"button\");\r\n      btn.setAttribute(\"class\", \"showPoints-btn\");\r\n      btn.textContent = \"Просмотр\";\r\n      btn.onclick = () => {\r\n        this.userPointsBack.style.height = this.backgroundCard.offsetHeight + \"px\";\r\n        this.showUsualPointsTable();\r\n      }\r\n      this.cardPerfPoints.appendChild(btn);\r\n\r\n    } else if (this.cardPerfPoints.childNodes.length == 3) {\r\n      this.cardPerfPoints.childNodes[1].remove();\r\n      this.cardPerfPoints.childNodes[1].remove();\r\n      const i = document.createElement(\"i\");\r\n      i.textContent = \"– Отсутствуют\";\r\n      this.cardPerfPoints.appendChild(i);\r\n    }\r\n  };\r\n\r\n  fillPerformanceCard = (perf) => {\r\n\r\n    this.cardPerfName.textContent = perf.name;\r\n\r\n    if (perf.imgUrl) {\r\n      this.cardPerfImg.src = window.location.origin + \"/static/imgs/performance-imgs/\" + perf.imgUrl;\r\n      this.cardPerfImg.style.display = \"inline-block\";\r\n    } else {\r\n      this.cardPerfImg.src = window.location.origin + \"/static/imgs/performance-imgs/no-photo.png\";\r\n      this.cardPerfImg.style.display = \"inline-block\";\r\n    }\r\n\r\n    this.fillCardPerformanceActs(perf.type, perf.acts);\r\n    this.fillCardPerformancePoints(perf.points);\r\n\r\n    if (perf.notes != \"\") {\r\n      this.cardPerfNotes.innerHTML = perf.notes;\r\n    } else {\r\n      this.cardPerfNotes.textContent = \"– Отсутствуют\";\r\n    }\r\n\r\n    if (this.edit === \"true\") {\r\n      let btn = document.createElement(\"button\");\r\n      btn.setAttribute(\"class\", \"edit-btn\");\r\n      btn.textContent = \"Редактировать\";\r\n      btn.onclick = () => {\r\n        this.openEdit(perf);\r\n      };\r\n\r\n      let delBtn = document.createElement(\"button\");\r\n      delBtn.setAttribute(\"class\", \"rm-perf-btn\");\r\n      delBtn.textContent = \"Удалить\";\r\n      delBtn.onclick = () => {\r\n        if (confirm(`Вы действительно хотите удалить спектакль \"${perf.name}\" из базы?`)) {\r\n          this.save(perf._id, \"remove\");\r\n        }\r\n      };\r\n\r\n      if (this.cardPerfName.parentElement.childNodes.length == 4) {\r\n        this.cardPerfName.parentElement.appendChild(btn);\r\n        this.cardPerfName.parentElement.appendChild(delBtn)\r\n      } else {\r\n        this.cardPerfName.parentElement.childNodes[4].remove();\r\n        this.cardPerfName.parentElement.childNodes[4].remove();\r\n        this.cardPerfName.parentElement.appendChild(btn);\r\n        this.cardPerfName.parentElement.appendChild(delBtn);\r\n      }\r\n    }\r\n\r\n    this.savePerfBtn.onclick = () => {\r\n      this.save(perf._id, \"update\");\r\n    };\r\n  };\r\n\r\n  fillSearchResults = results => {\r\n    if (results.length == 0) {\r\n      const div = document.createElement(\"div\");\r\n      div.setAttribute(\"class\", \"perf-name-found nothing-found\");\r\n      div.textContent = \"Ничего не найдено\";\r\n      if (!this.searchResults.childNodes[0]) {\r\n        this.searchResults.appendChild(div);\r\n      }\r\n    } else\r\n      for (let i = 0; i < results.length; i++) {\r\n        let div = document.createElement(\"div\");\r\n        div.setAttribute(\"class\", \"perf-name-found\");\r\n        div.textContent = results[i].name;\r\n\r\n        div.onclick = () => {\r\n          this.fillPerformanceCard(results[i]);\r\n          this.showPerformanceCard();\r\n        };\r\n        for (let b = 0; b < this.searchResults.childNodes.length; b++) {\r\n          if (this.searchResults.childNodes[b].textContent == div.textContent) {\r\n            return;\r\n          }\r\n        }\r\n        this.searchResults.appendChild(div);\r\n\r\n      }\r\n  };\r\n\r\n\r\n  openEdit = perf => {\r\n    // e = perf;\r\n    this.pointsData = perf.points;\r\n    this.backgroundCard.style.display = \"none\";\r\n    this.backgroundModal.style.display = \"block\";\r\n    this.perfName.value = perf.name;\r\n    this.perfType.value = perf.type;\r\n    this.perfUrl.value = perf.imgUrl;\r\n\r\n    if (perf.acts.length > 0) {\r\n      // let t, o, i, s, l;\r\n      let actLine, sp1, inpt, sp2, btn;\r\n\r\n      this.perfActs.innerHTML = \"\";\r\n      for (let i = 0; i < perf.acts.length; i++) {\r\n        actLine = document.createElement(\"div\");\r\n        actLine.setAttribute(\"class\", \"act-line\");\r\n        sp1 = document.createElement(\"span\");\r\n        sp1.setAttribute(\"class\", \"perf-act\");\r\n        sp1.textContent = i + 1 + \":\";\r\n        actLine.appendChild(sp1);\r\n        inpt = document.createElement(\"input\");\r\n        inpt.setAttribute(\"class\", \"act-time\");\r\n        inpt.setAttribute(\"type\", \"text\");\r\n        inpt.setAttribute(\"placeholder\", \"1ч 15мин\");\r\n        inpt.value = perf.acts[i];\r\n        actLine.appendChild(inpt);\r\n\r\n        if (i == 0) {\r\n          btn = document.createElement(\"button\");\r\n          btn.setAttribute(\"class\", \"add-mini-btn\");\r\n          btn.textContent = \"+\";\r\n          btn.onclick = () => {\r\n            this.addAct();\r\n          }\r\n          actLine.appendChild(btn)\r\n        } else {\r\n          sp2 = document.createElement(\"span\");\r\n          sp2.setAttribute(\"class\", \"del-act-btn\");\r\n          sp2.textContent = \"X\";\r\n          sp2.onclick = e => {\r\n            e.target.parentElement.remove();\r\n          };\r\n          actLine.appendChild(sp2);\r\n          // em = document.createElement(\"button\");\r\n          // sp1.setAttribute(\"class\", \"perf-act\");\r\n        }\r\n        this.perfActs.appendChild(actLine);\r\n      }\r\n\r\n      this.fillEditCardPointsDiv(perf.points);\r\n      this.fillPointsEditModal(perf.points);\r\n      this.perfNotes.value = perf.notes;\r\n      this.savePerfBtn.textContent = \"Сохранить изменения\";\r\n      this.savePerfBtn.onclick = () => {\r\n        this.save(perf._id, \"update\");\r\n      };\r\n    }\r\n  };\r\n\r\n  fillEditCardPointsDiv = points => {\r\n    // e = points\r\n    if (points) {\r\n      this.perfPoints.childNodes[0].remove();\r\n      this.perfPoints.childNodes[0].remove();\r\n      let span = document.createElement(\"span\"); // t\r\n      span.setAttribute(\"class\", \"points-number\");\r\n      span.textContent = this.countPointsNum(points) + \" шт.\";\r\n      let span2 = document.createElement(\"span\"); // o\r\n      span2.setAttribute(\"class\", \"showPoints-btn\");\r\n      span2.textContent = \"Редактор\";\r\n      span2.onclick = () => {\r\n        this.fillPointsEditModal(points);\r\n        this.backgroundPoints.style.height = this.backgroundModal.offsetHeight + \"px\";\r\n        this.backgroundPoints.style.display = \"block\";\r\n        window.scrollTo(0, 0);\r\n      };\r\n      this.perfPoints.appendChild(span),\r\n        this.perfPoints.appendChild(span2);\r\n    }\r\n  };\r\n\r\n  isEmpty = obj => {\r\n    for (var prop in obj)\r\n      if (obj.hasOwnProperty(prop)) return false;\r\n    return JSON.stringify(obj) === JSON.stringify({});\r\n  };\r\n\r\n  fillPointsEditModal = (points = {}) => {\r\n    // e = points\r\n    // if (!points) {\r\n    //   points = {};\r\n    // }\r\n\r\n    // let t, o, i, s, l, a = document.getElementById(\"left-table\").firstChild,\r\n    // d = document.getElementById(\"right-table\").firstChild;\r\n    let trLeft, trRight, td1, td2, td3;\r\n\r\n    const leftTableFirstChild = document.getElementById(\"left-table\").firstChild;\r\n    const rightTableFirstChild = document.getElementById(\"right-table\").firstChild;\r\n\r\n    while (leftTableFirstChild.childNodes.length > 1) {\r\n      leftTableFirstChild.childNodes[1].remove();\r\n    }\r\n    while (rightTableFirstChild.childNodes.length > 1) {\r\n      rightTableFirstChild.childNodes[1].remove();\r\n    }\r\n\r\n    this.totalPointsNum = this.countPointsNum(points);\r\n\r\n    document.getElementById(\"total-points-num\").textContent = this.countPointsNum(points) + \" шт.\";\r\n\r\n    for (const leftPoint in points.leftSide) {\r\n      if (this.isEmpty(points.leftSide[leftPoint])) continue;\r\n      // let d, r, c\r\n      let input, sp, input2;\r\n      trLeft = document.createElement(\"tr\");\r\n      trLeft.setAttribute(\"class\", \"left-point-rope\");\r\n      trLeft.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      input = document.createElement(\"input\");\r\n      input.setAttribute(\"type\", \"number\");\r\n      input.setAttribute(\"class\", \"lines\");\r\n      input.value = points.leftSide[leftPoint].stalls.split(\"/\")[0];\r\n      sp = document.createElement(\"span\");\r\n      sp.textContent = \"/\";\r\n      input2 = document.createElement(\"input\");\r\n      input2.setAttribute(\"type\", \"number\");\r\n      input2.setAttribute(\"class\", \"lines\");\r\n      input2.value = points.leftSide[leftPoint].stalls.split(\"/\")[1];\r\n      td1.appendChild(input);\r\n      td1.appendChild(sp);\r\n      td1.appendChild(input2);\r\n      let input3 = document.createElement(\"input\");\r\n      input3.setAttribute(\"type\", \"number\");\r\n      input3.setAttribute(\"class\", \"meters\");\r\n      input3.value = points.leftSide[leftPoint].meters;\r\n      td2.appendChild(input3);\r\n      let input4 = document.createElement(\"input\");\r\n      input4.setAttribute(\"type\", \"number\");\r\n      input4.setAttribute(\"class\", \"machine\");\r\n      input4.value = points.leftSide[leftPoint].machine;\r\n      td3.appendChild(input4);\r\n      let delSpan = document.createElement(\"span\");\r\n      delSpan.setAttribute(\"class\", \"del-point-rope\");\r\n      delSpan.textContent = \"X\";\r\n      delSpan.onclick = e => {\r\n        if (confirm(\"Удалить эту точку подвеса?\")) {\r\n          e.target.parentElement.parentElement.remove();\r\n          this.totalPointsNum--;\r\n          this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n        }\r\n      };\r\n\r\n      td3.appendChild(delSpan);\r\n      trLeft.appendChild(td1);\r\n      trLeft.appendChild(td2);\r\n      trLeft.appendChild(td3);\r\n      leftTableFirstChild.appendChild(trLeft);\r\n    }\r\n\r\n    for (const rightPoint in points.rightSide) {\r\n      if (this.isEmpty(points.rightSide[rightPoint])) continue;\r\n      // let a, r, c;\r\n      let input, sp, input2;\r\n      trRight = document.createElement(\"tr\");\r\n      trRight.setAttribute(\"class\", \"right-point-rope\");\r\n      trRight.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      input = document.createElement(\"input\");\r\n      input.setAttribute(\"type\", \"number\");\r\n      input.setAttribute(\"class\", \"lines\");\r\n      input.value = points.rightSide[rightPoint].stalls.split(\"/\")[0];\r\n      sp = document.createElement(\"span\");\r\n      sp.thenextContent = \"/\";\r\n      input2 = document.createElement(\"input\");\r\n      input2.setAttribute(\"type\", \"number\");\r\n      input2.setAttribute(\"class\", \"lines\");\r\n      input2.value = points.rightSide[rightPoint].stalls.split(\"/\")[1];\r\n      td1.appendChild(input);\r\n      td1.appendChild(sp);\r\n      td1.appendChild(input2);\r\n\r\n      let input3 = document.createElement(\"input\");\r\n      input3.setAttribute(\"type\", \"number\");\r\n      input3.setAttribute(\"class\", \"meters\");\r\n      input3.value = points.rightSide[t].meters;\r\n      td2.appendChild(input3);\r\n\r\n      let input4 = document.createElement(\"input\");\r\n      input4.setAttribute(\"type\", \"number\");\r\n      input4.setAttribute(\"class\", \"machine\");\r\n      input4.value = points.rightSide[rightPoint].machine;\r\n      td3.appendChild(input4);\r\n\r\n      let delSpan = document.createElement(\"span\");\r\n      delSpan.setAttribute(\"class\", \"del-point-rope\");\r\n      delSpan.textContent = \"X\";\r\n      delSpan.onclick = e => {\r\n        if (confirm(\"Удалить эту точку подвеса?\")) {\r\n          e.target.parentElement.parentElement.remove();\r\n          this.totalPointsNum--;\r\n          this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n        }\r\n\r\n        td3.appendChild(delSpan);\r\n        trLeft.appendChild(td1);\r\n        trLeft.appendChild(td2);\r\n        trLeft.appendChild(td3);\r\n        rightTableFirstChild.appendChild(trRight);\r\n      }\r\n    }\r\n  };\r\n\r\n  countPointsNum = points => {\r\n    let num = 0;\r\n    if (!points) return 0;\r\n    for (let key in points.leftSide) {\r\n      if (!this.isEmpty(points.leftSide[key])) {\r\n        num++;\r\n      }\r\n    }\r\n    for (let key in points.rightSide) {\r\n      if (!this.isEmpty(points.rightSide[key])) {\r\n        num++;\r\n      }\r\n    }\r\n    return num;\r\n  };\r\n\r\n  fillUserPointsTable = points => {\r\n    // e = points\r\n    // let t-tr, o, i-td1, s-td2, l-td3,\r\n    let trLeft, trRight, td1, td2, td3;\r\n    // a = document.getElementById(\"left-usr-table\").firstChild,\r\n    // d = document.getElementById(\"right-usr-table\").firstChild;\r\n\r\n    let leftTableFirstChild = document.getElementById(\"left-usr-table\").firstChild;\r\n    let rightTableFirstChild = document.getElementById(\"right-usr-table\").firstChild;\r\n\r\n    while (leftTableFirstChild.childNodes.length > 1) leftTableFirstChild.childNodes[1].remove();\r\n    while (rightTableFirstChild.childNodes.length > 1) rightTableFirstChild.childNodes[1].remove();\r\n\r\n    document.getElementById(\"total-user-points\").textContent = this.countPointsNum(points) + \" шт.\";\r\n\r\n    // n - point\r\n    for (const leftPoint in points.leftSide) {\r\n      trLeft = document.createElement(\"tr\");\r\n      trLeft.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      td1.textContent = points.leftSide[leftPoint].stalls;\r\n      trLeft.appendChild(td1);\r\n      td2.textContent = points.leftSide[leftPoint].meters;\r\n      trLeft.appendChild(td2);\r\n      td3.textContent = points.leftSide[leftPoint].machine;\r\n      trLeft.appendChild(td3);\r\n      leftTableFirstChild.appendChild(trLeft);\r\n    }\r\n    for (const rightPoint in points.rightSide) {\r\n      trRight = document.createElement(\"tr\");\r\n      trRight.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      td1.textContent = points.rightSide[rightPoint].stalls;\r\n      trRight.appendChild(td1);\r\n      td2.textContent = points.rightSide[rightPoint].meters;\r\n      trRight.appendChild(td2);\r\n      td3.textContent = points.rightSide[rightPoint].machine;\r\n      trRight.appendChild(td3);\r\n      rightTableFirstChild.appendChild(trRight);\r\n    }\r\n  };\r\n\r\n  saveEditingPoints = () => {\r\n    const left = document.getElementsByClassName(\"left-point-rope\"); // e\r\n    const right = document.getElementsByClassName(\"right-point-rope\"); // t\r\n\r\n    this.pointsData = { leftSide: {}, rightSide: {} };\r\n\r\n    if (left.length != 0 || right.length != 0) {\r\n      for (let t = 0; t < left.length; t++) {\r\n        this.pointsData.leftSide[\"point\" + (t + 1)] = {};\r\n        for (let o = 1; o < left[t].childNodes.length; o++)\r\n          if (o == 1) {\r\n            let first = left[t].childNodes[o].firstChild, // i\r\n              last = left[t].childNodes[o].lastChild; // s\r\n            if (!first.value) {\r\n              ;\r\n              first.parentElement.style.backgroundColor = \"red\";\r\n              first.onclick = () => {\r\n                first.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            if (!last.value) {\r\n              last.parentElement.style.backgroundColor = \"red\";\r\n              last.onclick = () => {\r\n                last.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.leftSide[\"point\" + (t + 1)].stalls = first.value + \"/\" + last.value;\r\n          } else if (o == 2) {\r\n            if (!left[t].childNodes[o].firstChild.value) {\r\n              left[t].childNodes[o].firstChild.parentElement.style.backgroundColor = \"red\";\r\n              left[t].childNodes[o].firstChild.onclick = () => {\r\n                left[t].childNodes[o].firstChild.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.leftSide[\"point\" + (t + 1)].meters = left[t].childNodes[o].firstChild.value;\r\n          } else if (o == 3) {\r\n            this.pointsData.leftSide[\"point\" + (t + 1)].machine = left[t].childNodes[o].firstChild.value;\r\n          }\r\n      }\r\n\r\n      for (let e = 0; e < right.length; e++) {\r\n        this.pointsData.rightSide[\"point\" + (e + 1)] = {};\r\n\r\n        for (let o = 1; o < right[e].childNodes.length; o++) {\r\n          if (o == 1) {\r\n            let first = right[e].childNodes[o].firstChild, // i\r\n              last = right[e].childNodes[o].lastChild; // s\r\n            if (!first.value) {\r\n              first.parentElement.style.backgroundColor = \"red\";\r\n              first.onclick = () => {\r\n                first.parentElement.style.backgroundColor = \"initial\";\r\n              };\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            if (!last.value) {\r\n              last.parentElement.style.backgroundColor = \"red\";\r\n              last.onclick = () => {\r\n                last.parentElement.style.backgroundColor = \"initial\";\r\n              };\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.rightSide[\"point\" + (e + 1)].stalls = first.value + \"/\" + last.value;\r\n          } else if (o == 2) {\r\n            if (!right[e].childNodes[o].firstChild.value) {\r\n              right[e].childNodes[o].firstChild.parentElement.style.backgroundColor = \"red\";\r\n              right[e].childNodes[o].firstChild.onclick = () => {\r\n                right[e].childNodes[o].firstChild.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.rightSide[\"point\" + (e + 1)].meters = right[e].childNodes[o].firstChild.value;\r\n          } else if (o == 3) {\r\n            this.pointsData.rightSide[\"point\" + (e + 1)].machine = t[e].childNodes[o].firstChild.value;\r\n          }\r\n        }\r\n      }\r\n      this.fillEditCardPointsDiv(this.pointsData);\r\n      this.backgroundPoints.style.display = \"none\";\r\n    } else {\r\n      this.backgroundPoints.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  addAct = () => {\r\n    let num = this.perfActs.childNodes.length + 1, // t\r\n      div = document.createElement(\"div\"), // o\r\n      sp = document.createElement(\"span\"), // i\r\n      inpt = document.createElement(\"input\"), // s\r\n      sp2 = document.createElement(\"span\"); // l\r\n\r\n    div.setAttribute(\"class\", \"act-line\");\r\n    sp.setAttribute(\"class\", \"perf-act\");\r\n    sp.setAttribute(\"id\", \"perf-act\" + t);\r\n    sp.textContent = num + \":\";\r\n    inpt.setAttribute(\"type\", \"text\");\r\n    inpt.setAttribute(\"class\", \"act-time\");\r\n    inpt.setAttribute(\"id\", \"act-time\" + num);\r\n    inpt.setAttribute(\"placeholder\", \"1ч 15мин\");\r\n    sp2.setAttribute(\"id\", \"del-act-btn\" + t);\r\n    sp2.setAttribute(\"class\", \"del-act-btn\");\r\n    sp2.textContent = \"X\";\r\n    sp2.onclick = () => {\r\n      sp2.parentElement.remove();\r\n    };\r\n    div.appendChild(sp);\r\n    div.appendChild(inpt);\r\n    div.appendChild(sp2);\r\n    this.perfActs.insertBefore(div, this.perfActs.childNodes[e]);\r\n  };\r\n\r\n  checkActs = () => {\r\n    let childLen = this.perfActs.childNodes.length, //e\r\n      children = this.perfActs.childNodes; //t\r\n    for (let i = 0; i < childLen; i++) { // n\r\n      if (!children[i].childNodes[1].value) {\r\n        children[i].childNodes[1].style.borderColor = \"red\"\r\n        children[i].childNodes[1].onclick = () => {\r\n          return children[i].childNodes[1].style.borderColor = \"initial\";\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  inputsValid = () => {\r\n    if (!this.perfName.value) {\r\n      this.perfName.style.borderColor = \"red\"\r\n      return false;\r\n    } else if (!this.perfType.value) {\r\n      this.perfType.style.borderColor = \"red\"\r\n      return false;\r\n    } else if (!this.checkActs()) {\r\n      this.perfActs.borderColor = \"red\";\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  save = async (perfId, action) => { // e , t\r\n    if (\"update\" === action || \"create\" === action) {\r\n      if (this.inputsValid()) {\r\n        let perfName = this.perfName.value, //o\r\n          perfType = this.perfType.value, // i\r\n          perfUrl = this.perfUrl.value, // s\r\n          acts = [], // l\r\n          perfNotes = this.perfNotes.value; // a\r\n\r\n\r\n        for (let e = 0; e < this.perfActs.childNodes.length; e++) {\r\n          if (this.perfActs.childNodes[e].childNodes[1].value.includes(\",\")) {\r\n            return this.perfActs.childNodes[e].childNodes[1].style.borderColor = \"red\";\r\n          }\r\n          acts.push(this.perfActs.childNodes[e].childNodes[1].value);\r\n        }\r\n        if (perfId && action === \"update\") {\r\n          // let query = `name=${perfName}&type=${perfType}&imgUrl=${perfUrl}&acts=${acts}&points=${JSON.stringify()}&notes=${perfNotes}&perfId=${perfId}&action=${action}`;\r\n          let data = {\r\n            name: perfName,\r\n            type: perfType,\r\n            imgUrl: perfUrl,\r\n            acts: acts,\r\n            points: this.pointsData,\r\n            notes: perfNotes,\r\n            perfId: perfId,\r\n            action: action\r\n          }\r\n\r\n          const resp = await request(\"/performances\", \"POST\", data);\r\n\r\n          if (resp.statusText == \"OK\") {\r\n            alert(\"Спектакль обновлен успешно\");\r\n            this.backgroundModal.style.display = \"none\";\r\n            window.location.reload();\r\n            return;\r\n          } else {\r\n            alert(\"Ошибка во время сохранения\");\r\n            return;\r\n          }\r\n\r\n        } else if (!perfId && action == \"create\") {\r\n          let data = {\r\n            name: perfName,\r\n            type: perfType,\r\n            imgUrl: perfUrl,\r\n            acts: acts,\r\n            points: this.pointsData,\r\n            notes: perfNotes,\r\n            perfId: perfId,\r\n            action: action\r\n          }\r\n\r\n          const resp = await request(\"/performances\", \"POST\", data);\r\n          if (resp.statusText == \"OK\") {\r\n            alert(\"Новый спектакль успешно добавлен\");\r\n            window.location.reload();\r\n          }\r\n          else {\r\n            alert(\"Ошибка во время создания\");\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    } else if (action === \"remove\") {\r\n      let dt = {\r\n        perfId: perfId,\r\n        action: action\r\n      }\r\n      let resp = await request(\"/performances\", \"POST\", dt);\r\n      if (resp.statusText == \"OK\") {\r\n        alert(\"Спектакль успешно удалён\");\r\n        window.location.reload();\r\n        return;\r\n      }\r\n      else {\r\n        alert(\"Ошибка удаления\");\r\n        return;\r\n      };\r\n    }\r\n  };\r\n\r\n  addPoint = point => {\r\n    // e - point\r\n    // t-tr, o-sp\r\n\r\n    const tr = document.createElement(\"tr\");\r\n    const sp = document.createElement(\"span\");\r\n\r\n    sp.textContent = \"/\";\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      let td = document.createElement(\"td\");\r\n\r\n      if (i == 1) {\r\n        for (let b = 0; b < 2; b++) {\r\n          let inpt = document.createElement(\"input\");\r\n          inpt.setAttribute(\"type\", \"number\");\r\n          inpt.setAttribute(\"class\", \"lines\");\r\n          if (b == 1) {\r\n            td.appendChild(sp);\r\n          }\r\n          td.appendChild(inpt);\r\n        }\r\n      }\r\n\r\n      else if (i == 2) {\r\n        let inpt = document.createElement(\"input\");\r\n        inpt.setAttribute(\"type\", \"number\");\r\n        inpt.setAttribute(\"class\", \"meters\");\r\n        td.appendChild(inpt);\r\n      } else if (i == 3) {\r\n        // e-inpt, t -sp\r\n        let inpt = document.createElement(\"input\");\r\n        let sp = document.createElement(\"span\");\r\n        sp.textContent = \"X\";\r\n        sp.setAttribute(\"class\", \"del-point-rope\");\r\n        sp.onclick = e => {\r\n          if (confirm(\"Удалить эту точку подвеса?\")) {\r\n            e.target.parentElement.parentElement.remove();\r\n            this.totalPointsNum--;\r\n            this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n          }\r\n        }\r\n        inpt.setAttribute(\"type\", \"number\");\r\n        inpt.setAttribute(\"class\", \"machine\");\r\n        td.appendChild(inpt);\r\n        td.appendChild(sp);\r\n      }\r\n      tr.appendChild(td);\r\n    }\r\n    tr.setAttribute(\"class\", point + \"-point-rope\");\r\n    document.getElementById(point + \"-table\").appendChild(tr);\r\n    this.totalPointsNum++;\r\n    this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n  };\r\n}\r\n","\r\nasync function request(url, method, data) {\r\n  const response = await fetch(url, {\r\n    method: method,\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body:  JSON.stringify(data) \r\n  });\r\n  return response;\r\n}"]}