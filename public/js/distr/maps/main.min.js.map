{"version":3,"sources":["authenticate.js","authorisate.js","calendars.js","ical.js","performances.js","repertuar.js","request.js"],"names":["Authenticate","[object Object]","this","login","document","getElementById","pass1","pass2","authBtn","onclick","style","borderColor","authenticate","value","alert","authData","resp","request","statusText","window","location","href","Authorisate","loginInpt","passInpt","authorise","pass","message","headers","get","Calendars","stageEvTime","stageEvMsg","tehEvTime","tehEvMsg","loadEvTime","loadEvMsg","stagePreloader","tehPreloader","loadPreloader","stageEvURL","tehEvURL","loadEvURL","onload","startUpdatingStageEvents","updateAllEvents","setInterval","type","display","url","status","console","error","json","evts","todayDate","todayEvents","key","evStart","Date","start","evEnd","end","getFullYear","getMonth","getDate","push","i","length","getTime","currTime","todayPlusHour","b","showPreloader","allStageEvents","getCalEvents","allTehEvents","allLoadEvents","noData","summary","now","todayStageEvents","getTodayEvents","currStageEvent","getCurrentEvent","nextStageEvent","getNextEvent","setEvent","hidePreloader","todayTehEvents","currTehEvent","nextTehEvent","todayLoadEvents","currLoadEvent","nextLoadEvent","evt","evType","textContent","undefined","getRusTime","time","timeStr","getHours","minutes","getMinutes","toString","iCal","intId","nowOnStage","nowOrNext","startPreloader","updateStageEvent","allEvents","currEvent","getCurrEvent","nextEvent","clearInterval","todayEvts","evStartDate","evEndDate","datePlusHour","str","Performance","e","edit","pointsData","leftSide","rightSide","totalPointsNum","addPerfBtn","preloader","searchInpt","backgroundModal","closeAddPerf","savePerfBtn","perfName","perfType","perfUrl","perfActs","perfPoints","perfNotes","addActBtn","searchResults","closeCardPerf","backgroundCard","addPointsBtn","addRightPointBtn","addLeftPointBtn","backgroundPoints","closeEditPointsBtn","userPointsBack","closeUserPoints","cardPerfName","cardPerfImg","cardPerfType","cardPerfActs","cardPerfPoints","cardPerfNotes","totalPointsSpan","save","addAct","addPoint","saveEditingPoints","scrollTo","oninput","clearDomElement","async","test","fillSearchResults","query","data","perfs","div","createElement","setAttribute","childNodes","appendChild","setTimeout","num","element","cb","firstChild","remove","acts","getActsEnding","s1","s2","points","p","countPointsNum","fillUserPointsTable","btn","height","offsetHeight","showUsualPointsTable","perf","name","imgUrl","src","origin","fillCardPerformanceActs","fillCardPerformancePoints","notes","innerHTML","openEdit","delBtn","confirm","_id","parentElement","results","fillPerformanceCard","showPerformanceCard","actLine","sp1","inpt","sp2","target","fillEditCardPointsDiv","fillPointsEditModal","span","span2","obj","prop","hasOwnProperty","JSON","stringify","trLeft","trRight","td1","td2","td3","leftTableFirstChild","rightTableFirstChild","leftPoint","isEmpty","input","sp","input2","stalls","split","input3","meters","input4","machine","delSpan","rightPoint","thenextContent","left","getElementsByClassName","right","t","o","first","last","lastChild","backgroundColor","insertBefore","childLen","children","checkActs","perfId","action","inputsValid","includes","reload","dt","point","tr","td","Repertuar","rollLine","day","todaySquare","offsetLeft","startAnimatingScroll","d","id","scrollLeft","method","fetch","Content-Type","body"],"mappings":"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","file":"../main.min.js","sourcesContent":["\nclass Authenticate {\n\n  constructor() {\n    this.login = document.getElementById(\"login\");\n    this.pass1 = document.getElementById(\"pass1\");\n    this.pass2 = document.getElementById(\"pass2\");\n    this.authBtn = document.getElementById(\"authenticate-bt\");\n\n    this.login.onclick = () => {\n      this.login.style.borderColor = \"transparent\";\n    };\n\n    this.pass1.onclick = () => {\n      this.pass1.style.borderColor = \"transparent\";\n    };\n\n    this.pass2.onclick = () => {\n      this.pass2.style.borderColor = \"transparent\";\n    };\n\n    this.authBtn.onclick = () => {\n      this.authenticate();\n    }\n  }\n\n  async authenticate () {\n    if (!this.login.value) {\n      alert('Поле \"Логин\" пусто. Придумайте себе логин, чтобы продолжить.');\n      this.login.style.borderColor = \"#f26a6a\";\n      return;\n    }\n    else if (!this.pass1.value) {\n      alert('Поле \"Пароль\" пусто. Придумайте себе пароль, чтобы продолжить.');\n      this.pass1.style.borderColor = \"#f26a6a\";\n      return;\n    }\n    else if (!this.pass2.value) {\n        alert('Поле \"Пароль повторно\" пусто. Введите пароль повторно, чтобы продолжить.');\n        this.pass2.style.borderColor = \"#f26a6a\";\n        return;\n    }\n\n    if (this.pass1.value !== this.pass2.value) {\n      alert(\"Введённые Вами пароли не совпадают\");\n      return;\n    } \n\n    const authData = {\n      login: this.login.value,\n      pass1: this.pass1.value,\n      pass2: this.pass2.value,\n    }\n    \n    const resp = await request(\"/authenticate\", \"POST\", authData);\n    \n    if (resp.statusText == \"Inconsistent data\") {\n      alert(\"Отсутсвует логин или пароль\");\n      return;\n    } if (resp.statusText == \"Duplicate\") {\n      alert(\"Такой логин уже занят, придумайте другой\");\n      return;\n    } else if (resp.statusText == \"Passwords mismatch\")  {\n      alert(\"Пароли не совпадают\");\n      return;\n    } else if(resp.statusText == \"Authenticated\") {\n      alert(\"Аутентификация успешна, сейчас вы будете перенаправлены на страницу логина\");\n      window.location.href = \"/auth\";\n      return;\n    }\n    else {\n      alert(\"Ошибка аутентификации\");\n      return;\n    }\n    \n  };\n\n}","class Authorisate {\n\n  constructor() {\n    this.authBtn = document.getElementById(\"auth-bt\");\n    this.loginInpt = document.getElementById(\"login\");\n    this.passInpt = document.getElementById(\"pass\");\n\n    this.authBtn.onclick = () => {\n      this.authorise();\n    };\n  }\n\n\n  async authorise() {\n\n    if (!this.loginInpt.value || !this.passInpt.value) {\n      return alert(\"Отсутствует логин или пароль\");\n    }\n\n    const authData = {\n      login: this.loginInpt.value,\n      pass: this.passInpt.value\n    }\n\n    const resp = await request(\"/auth\", \"POST\", authData);\n    var message;\n    if (resp.statusText && resp.statusText != \"\") {\n      message = resp.statusText\n    } else {\n      message = resp.headers.get(\"statusmessage\")\n    }\n\n    if (message == \"Check login and password\") {\n      alert(\"Неверный логин или пароль\");\n      return;\n    } else if (message == \"Authorised\") {\n      alert(\"Авторизация успешна и будет действительна в течение 30 дней\");\n      window.location.href = \"/performances\";\n      return;\n    } else {\n      alert(\"Произошла ошибка во время авторизации\");\n      return;\n    }\n\n  }\n}","class Calendars {\n    constructor() {\n        this.stageEvTime = document.getElementById(\"stage-ev-time\");\n        this.stageEvMsg = document.getElementById(\"stage-ev-msg\");\n\n        this.tehEvTime = document.getElementById(\"teh-ev-time\");\n        this.tehEvMsg = document.getElementById(\"teh-ev-msg\");\n\n        this.loadEvTime = document.getElementById(\"load-ev-time\");\n        this.loadEvMsg = document.getElementById(\"load-ev-msg\");\n\n        this.stagePreloader = document.getElementById(\"stage-preloader\");\n        this.tehPreloader = document.getElementById(\"teh-preloader\");\n        this.loadPreloader = document.getElementById(\"load-preloader\");\n\n\n        this.stageEvURL = \"/api/ical/stage\";\n        this.tehEvURL = \"/api/ical/teh-job\";\n        this.loadEvURL = \"/api/ical/load\";\n\n        window.onload = () => {\n            this.startUpdatingStageEvents();\n        };\n    }\n\n    startUpdatingStageEvents() {\n        this.updateAllEvents();\n        setInterval(() => {\n            this.updateAllEvents();\n        }, 60000);\n    }\n\n    showPreloader(type) {\n        if (type == \"stage\") {\n            this.stagePreloader.style.display = \"block\";\n        } else if (type == \"tech\") {\n            this.tehPreloader.style.display = \"block\";\n        } else if (type == \"load\") {\n            this.loadPreloader.style.display = \"block\";\n        }\n    }\n\n    hidePreloader(type) {\n        if (type == \"stage\") {\n            this.stagePreloader.style.display = \"none\";\n        } else if (type == \"tech\") {\n            this.tehPreloader.style.display = \"none\";\n        } else if (type == \"load\") {\n            this.loadPreloader.style.display = \"none\";\n        }\n    }\n\n    // \"/api/ical/stage\"\n    async getCalEvents(url) {\n        const resp = await request(url, \"GET\");\n        if (resp.status !== 200) {\n            console.error(\"Error uploading calendar events\");\n        }\n        const data = await resp.json();\n        return data.evts;\n    }\n\n    getTodayEvents(evts, todayDate) {\n        const todayEvents = [];\n\n        for (let key in evts) {\n            const evStart = new Date(evts[key].start);\n            const evEnd = new Date(evts[key].end);\n            if (evStart.getFullYear() == todayDate.getFullYear() && evStart.getMonth() == todayDate.getMonth() && (evStart.getDate() == todayDate.getDate() || evEnd.getDate() == todayDate.getDate())) {\n                todayEvents.push(evts[key]);\n            }\n        }\n        return todayEvents;\n    }\n\n    getCurrentEvent(evts, todayDate) {\n\n        for (let i = 0; i < evts.length; i++) {\n            const evStart = new Date(evts[i].start).getTime();\n            const evEnd = new Date(evts[i].end).getTime();\n            const currTime = todayDate.getTime();\n\n            if (evStart < currTime && evEnd > currTime) {\n                return evts[i];\n            }\n        }\n        return false;\n    }\n\n    getNextEvent(evts, todayDate) {\n        // Detect next event\n        let todayPlusHour = todayDate.getTime();\n        for (let b = 0; b < 5; b++) {\n            todayPlusHour += 1000 * 60 * 60;\n\n            for (let i = 0; i < evts.length; i++) {\n                const evStart = new Date(evts[i].start).getTime();\n                const evEnd = new Date(evts[i].end).getTime();\n\n                if (evStart < todayPlusHour && evEnd > todayPlusHour) {\n                    return evts[i];\n                }\n\n            }\n        }\n    }\n\n    async updateAllEvents() {\n        this.showPreloader(\"stage\");\n        const allStageEvents = await this.getCalEvents(this.stageEvURL);\n        this.showPreloader(\"tech\");\n        const allTehEvents = await this.getCalEvents(this.tehEvURL);\n        this.showPreloader(\"load\");\n        const allLoadEvents = await this.getCalEvents(this.loadEvURL);\n\n        const noData = { summary: \"Нет данных\" };\n        const todayDate = new Date(Date.now());\n\n        const todayStageEvents = this.getTodayEvents(allStageEvents, todayDate);\n        const currStageEvent = this.getCurrentEvent(todayStageEvents, todayDate);\n        const nextStageEvent = this.getNextEvent(todayStageEvents, todayDate);\n        this.setEvent(currStageEvent ? currStageEvent : nextStageEvent ? nextStageEvent : noData, todayDate, \"stage\");\n        this.hidePreloader(\"stage\");\n\n        const todayTehEvents = this.getTodayEvents(allTehEvents, todayDate);\n        const currTehEvent = this.getCurrentEvent(todayTehEvents, todayDate);\n        const nextTehEvent = this.getNextEvent(todayTehEvents, todayDate);\n        this.setEvent(currTehEvent ? currTehEvent : nextTehEvent ? nextTehEvent : noData, todayDate, \"tech\");\n        this.hidePreloader(\"tech\");\n\n        const todayLoadEvents = this.getTodayEvents(allLoadEvents, todayDate);\n        const currLoadEvent = this.getCurrentEvent(todayLoadEvents, todayDate);\n        const nextLoadEvent = this.getNextEvent(todayLoadEvents, todayDate);\n        this.setEvent(currLoadEvent ? currLoadEvent : nextLoadEvent ? nextLoadEvent : noData, todayDate, \"load\");\n        this.hidePreloader(\"load\");\n\n    }\n\n    setEvent(evt, todayDate, evType) {\n        if (evType == \"stage\") {\n            this.stageEvMsg.textContent = evt.summary;\n        } else if (evType == \"tech\") {\n            this.tehEvMsg.textContent = evt.summary;\n        } else if (evType == \"load\") {\n            this.loadEvMsg.textContent = evt.summary;\n        }\n\n        if (evt.start != undefined && evt.end != undefined) {\n            if (new Date(evt.start).getTime() > todayDate.getTime()) {\n                if (evType == \"stage\") {\n                    this.stageEvTime.textContent = \"Далее: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                } else if (evType == \"tech\") {\n                    this.tehEvTime.textContent = \"Далее: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                } else if (evType == \"load\") {\n                    this.loadEvTime.textContent = \"Далее: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                }\n            } else {\n                if (evType == \"stage\") {\n                    this.stageEvTime.textContent = \"Сейчас: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                } else if (evType == \"tech\") {\n                    this.tehEvTime.textContent = \"Сейчас: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                } else if (evType == \"load\") {\n                    this.loadEvTime.textContent = \"Сейчас: \" + this.getRusTime(evt.start) + \" - \" + this.getRusTime(evt.end);\n                }\n            }\n\n        } else {\n            if (evType == \"stage\") {\n                this.stageEvTime.textContent = \"Сейчас: \";\n            } else if (evType == \"tech\") {\n                this.tehEvTime.textContent = \"Сейчас: \";\n            } else if (evType == \"load\") {\n                this.loadEvTime.textContent = \"Сейчас: \";\n            }\n        }\n    }\n\n    getRusTime(time) {\n        time = new Date(time);\n        let timeStr = time.getHours();\n        let minutes = time.getMinutes();\n        if (minutes.toString().length == 1) {\n            minutes = minutes.toString() + \"0\";\n        }\n        timeStr += \":\" + minutes;\n        return timeStr;\n    }\n}","class iCal {\n    constructor() {\n\n        this.intId = null;\n        this.nowOnStage = document.getElementById(\"now-on-stage\");\n        this.nowOrNext = document.getElementById(\"now-or-next\");\n\n        window.onload = () => {\n            this.startPreloader();\n            this.startUpdatingStageEvents();\n        }\n    }\n\n    startUpdatingStageEvents() {\n        this.updateStageEvent();\n        setInterval(() => {\n            this.updateStageEvent();\n        }, 120000);\n    }\n\n    async updateStageEvent() {\n        const allEvents = await this.getCalEvents();\n        const todayDate = new Date(Date.now());\n        const todayEvents = this.getTodayEvents(allEvents, todayDate);\n        const currEvent = this.getCurrEvent(todayEvents, todayDate);\n        const noData = { summary: \"Нет данных\" };\n\n        if (!currEvent) {\n            const nextEvent = this.getNextEvent(todayEvents, todayDate);\n            return this.setEvent(nextEvent ? nextEvent : noData, todayDate)\n        }\n        this.setEvent(currEvent ? currEvent : noData, todayDate);\n    }\n\n    async getCalEvents() {\n        const resp = await request(\"/api/ical/stage\", \"GET\");\n        if (resp.status !== 200) {\n            clearInterval(this.intId);\n            this.nowOnStage.textContent = \"? error ?\";\n        }\n        const data = await resp.json();\n        return data.evts;\n    }\n\n    getTodayEvents(evts, todayDate) {\n        const todayEvts = [];\n\n        for (let key in evts) {\n            const evStartDate = new Date(evts[key].start);\n            const evEndDate = new Date(evts[key].end);\n            if (evStartDate.getFullYear() == todayDate.getFullYear() && evStartDate.getMonth() == todayDate.getMonth() && (evStartDate.getDate() == todayDate.getDate() || evEndDate.getDate() == todayDate.getDate())) {\n                todayEvts.push(evts[key]);\n            }\n        }\n\n        return todayEvts;\n    }\n\n    getCurrEvent(todayEvents, todayDate) {\n        for (let i = 0; i < todayEvents.length; i++) {\n            const evStart = new Date(todayEvents[i].start).getTime();\n            const evEnd = new Date(todayEvents[i].end).getTime();\n            const currTime = todayDate.getTime();\n\n            if (evStart < currTime && evEnd > currTime) {\n                return todayEvents[i];\n            }\n        }\n\n        return false;\n    }\n\n    getNextEvent(todayEvents, todayDate) {\n        let datePlusHour = todayDate.getTime();\n\n        for (let b = 0; b < 5; b++) {\n            datePlusHour += 1000 * 60 * 60;\n            for (let i = 0; i < todayEvents.length; i++) {\n                const evStart = new Date(todayEvents[i].start).getTime();\n                const evEnd = new Date(todayEvents[i].end).getTime();\n\n                if (evStart < datePlusHour && evEnd > datePlusHour) {\n                    return todayEvents[i];\n                }\n\n            }\n        }\n    }\n\n    getRusTime(time) {\n        time = new Date(time);\n        return `${time.getHours()}:${time.getMinutes().toString().length == 1 ? time.getMinutes().toString() + \"0\" : time.getMinutes()}`;\n    }\n\n    setEvent(evt, todayDate) {\n        clearInterval(this.intId);\n\n        if (evt && (evt.summary != \"Нет данных\")) {\n            if (new Date(evt.start).getTime() > todayDate.getTime()) {\n                this.nowOrNext.textContent = \"Далее на сцене:\";\n            } else {\n                this.nowOrNext.textContent = \"Сейчас на сцене:\";\n            }\n            const time = \"C \" + this.getRusTime(evt.start) + \" до \" + this.getRusTime(evt.end);\n            this.nowOnStage.textContent = time + \" - \" + evt.summary;\n\n        } else {\n            this.nowOnStage.textContent = evt.summary;\n        }\n    }\n\n    startPreloader() {\n        let str = \".\";\n        this.intId = setInterval(() => {\n            str += \".\";\n            this.nowOnStage.textContent = str;\n            if (str.length > 2) str = \"\";\n        }, 400);\n    }\n}","class Performance {\n  constructor(e = \"\", edit = \"false\") {\n\n    this.edit = edit;\n    this.pointsData = { leftSide: {}, rightSide: {} };\n\n    this.totalPointsNum = 0;\n    this.addPerfBtn = document.getElementById(\"add-performance-btn\");\n    this.preloader = document.getElementById(\"preloader\");\n    this.searchInpt = document.getElementById(\"search-perfs\");\n    this.backgroundModal = document.getElementById(\"background-modal\");\n    this.closeAddPerf = document.getElementById(\"close-adding-perf\");\n    this.savePerfBtn = document.getElementById(\"save-perf-btn\");\n    this.perfName = document.getElementById(\"perf-name\");\n    this.perfType = document.getElementById(\"perf-type\");\n    this.perfUrl = document.getElementById(\"perf-pic-url\");\n    this.perfActs = document.getElementById(\"perf-acts\");\n    this.perfPoints = document.getElementById(\"perf-points\");\n    this.perfNotes = document.getElementById(\"perf-notes\");\n    this.addActBtn = document.getElementById(\"add-act\");\n    this.searchResults = document.getElementById(\"search-results\");\n    this.closeCardPerf = document.getElementById(\"close-card-perf\");\n    this.backgroundCard = document.getElementById(\"card-back\");\n    this.addPointsBtn = document.getElementById(\"add-points\");\n    this.addRightPointBtn = document.getElementById(\"add-right-pt-btn\");\n    this.addLeftPointBtn = document.getElementById(\"add-left-pt-btn\");\n    this.backgroundPoints = document.getElementById(\"points-back\");\n    this.closeEditPointsBtn = document.getElementById(\"close-points-perf\");\n    this.userPointsBack = document.getElementById(\"user-points-back\");\n    this.closeUserPoints = document.getElementById(\"close-user-points\");\n    this.cardPerfName = document.getElementById(\"card-perf-name\");\n    this.cardPerfImg = document.getElementById(\"card-perf-img\");\n    this.cardPerfType = document.getElementById(\"card-perf-type\");\n    this.cardPerfActs = document.getElementById(\"card-perf-acts\");\n    this.cardPerfPoints = document.getElementById(\"card-perf-points\");\n    this.cardPerfNotes = document.getElementById(\"card-perf-notes\");\n    this.totalPointsSpan = document.getElementById(\"total-points-num\");\n\n    if (this.edit === \"true\") {\n      this.addPerfBtn.onclick = () => {\n        this.backgroundModal.style.display = \"block\";\n      };\n\n      this.closeAddPerf.onclick = () => {\n        this.backgroundModal.style.display = \"none\";\n      };\n\n      this.savePerfBtn.onclick = () => {\n        this.save(!1, \"create\");\n      };\n\n      this.perfName.onclick = () => {\n        this.perfName.style.borderColor = \"initial\";\n      };\n\n      this.perfType.onclick = () => {\n        this.perfType.style.borderColor = \"initial\";\n      };\n\n      this.addActBtn.onclick = () => {\n        this.addAct();\n      };\n\n      this.addRightPointBtn.onclick = () => {\n        this.addPoint(\"right\");\n      };\n\n      this.addLeftPointBtn.onclick = () => {\n        this.addPoint(\"left\");\n      };\n    }\n\n    this.closeEditPointsBtn.onclick = () => {\n      this.saveEditingPoints();\n    };\n\n    this.addPointsBtn.onclick = () => {\n      this.backgroundPoints.style.display = \"block\";\n      window.scrollTo(0, 0);\n    };\n\n    this.closeCardPerf.onclick = () => {\n      this.savePerfBtn.onclick = () => {\n        this.save(!1, \"create\");\n      };\n      this.backgroundCard.style.display = \"none\";\n    };\n\n    this.closeUserPoints.onclick = () => {\n      this.userPointsBack.style.display = \"none\";\n    };\n\n    this.searchInpt.oninput = () => {\n      if (this.searchInpt.value && this.searchInpt.value != \"\") {\n        this.clearDomElement(this.searchResults, async () => {\n\n          if (/^\\s*$/.test(this.searchInpt.value)) {\n            this.fillSearchResults([]);\n          }\n          else {\n\n            const query = {\n              query: this.searchInpt.value\n            }\n\n            this.preloader.style.display = \"block\";\n\n            const resp = await request(\"/perf-search\", \"POST\", query);\n            \n            var message;\n\n            if (resp.statusText && resp.statusText != \"\") {\n              message = resp.statusText\n            } else {\n              message = resp.headers.get(\"statusmessage\")\n            }\n\n            if (message == \"OK\") {\n              const data = await resp.json();\n              this.fillSearchResults(data.perfs);\n              this.preloader.style.display = \"none\";\n            } else {\n              if (resp === \"error\")\n                return this.preloader.style.display = \"none\";\n              if (resp == \"econn\") {\n                this.preloader.style.display = \"none\";\n                const div = document.createElement(\"div\");\n                div.setAttribute(\"class\", \"perf-name-found nothing-found\");\n                div.textContent = \"Проверьте интернет соединение\";\n                if (!this.searchResults.childNodes[0]) {\n                  this.searchResults.appendChild(div);\n                }\n              }\n            }\n          }\n        })\n      }\n      else {\n        setTimeout(() => {\n          this.clearDomElement(this.searchResults, () => { });\n        }, 100);\n      }\n    };\n\n  }\n\n\n  getActsEnding = num => {\n    let actsNum = 1 == num ? num + \" акт\" : num > 1 && num < 5 ? num + \" акта\" : num + \"актов\";\n    return actsNum;\n  };\n\n  showPerformanceCard = () => {\n    this.backgroundCard.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  showUsualPointsTable = () => {\n    this.userPointsBack.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  clearDomElement = (element, cb) => {\n    while (element.firstChild) {\n      element.firstChild.remove();\n    }\n    return cb();\n  };\n\n  fillCardPerformanceActs = (perfType, acts) => {\n    if (perfType === \"ballet\") {\n      this.cardPerfType.textContent = `Балет, ${this.getActsEnding(acts.length)}`;\n    } else if (perfType === \"opera\") {\n      this.cardPerfType.textContent = `Опера, ${this.getActsEnding(acts.length)}`;\n    }\n\n    this.clearDomElement(this.cardPerfActs, () => {\n      for (let i = 0; i < acts.length; i++) {\n        let div = document.createElement(\"div\"),\n          s1 = document.createElement(\"span\"),\n          s2 = document.createElement(\"span\");\n\n        div.setAttribute(\"class\", \"act-line\");\n        s1.textContent = `${i + 1} Акт:`;\n        s2.textContent = `${acts[i]}`;\n        div.appendChild(s1);\n        div.appendChild(s2);\n        this.cardPerfActs.appendChild(div);\n      }\n    });\n  };\n\n  fillCardPerformancePoints = (points) => {\n\n    if (points) {\n\n      if (this.cardPerfPoints.childNodes.length == 2) {\n        this.cardPerfPoints.childNodes[1].remove()\n      }\n      else if (this.cardPerfPoints.childNodes.length == 3) {\n        this.cardPerfPoints.childNodes[1].remove();\n        this.cardPerfPoints.childNodes[1].remove()\n      }\n\n      const p = document.createElement(\"p\");\n      p.setAttribute(\"class\", \"total-points-usr\");\n      p.textContent = `Всего: ${this.countPointsNum(points)} шт.`;\n      this.cardPerfPoints.appendChild(p),\n        this.fillUserPointsTable(points);\n\n      const btn = document.createElement(\"button\");\n      btn.setAttribute(\"class\", \"showPoints-btn\");\n      btn.textContent = \"Просмотр\";\n      btn.onclick = () => {\n        this.userPointsBack.style.height = this.backgroundCard.offsetHeight + \"px\";\n        this.showUsualPointsTable();\n      }\n      this.cardPerfPoints.appendChild(btn);\n\n    } else if (this.cardPerfPoints.childNodes.length == 3) {\n      this.cardPerfPoints.childNodes[1].remove();\n      this.cardPerfPoints.childNodes[1].remove();\n      const i = document.createElement(\"i\");\n      i.textContent = \"– Отсутствуют\";\n      this.cardPerfPoints.appendChild(i);\n    }\n  };\n\n  fillPerformanceCard = (perf) => {\n\n    this.cardPerfName.textContent = perf.name;\n\n    if (perf.imgUrl) {\n      this.cardPerfImg.src = window.location.origin + \"/static/imgs/performance-imgs/\" + perf.imgUrl;\n      this.cardPerfImg.style.display = \"inline-block\";\n    } else {\n      this.cardPerfImg.src = window.location.origin + \"/static/imgs/performance-imgs/no-photo.png\";\n      this.cardPerfImg.style.display = \"inline-block\";\n    }\n\n    this.fillCardPerformanceActs(perf.type, perf.acts);\n    this.fillCardPerformancePoints(perf.points);\n\n    if (perf.notes != \"\") {\n      this.cardPerfNotes.innerHTML = perf.notes;\n    } else {\n      this.cardPerfNotes.textContent = \"– Отсутствуют\";\n    }\n\n    if (this.edit === \"true\") {\n      let btn = document.createElement(\"button\");\n      btn.setAttribute(\"class\", \"edit-btn\");\n      btn.textContent = \"Редактировать\";\n      btn.onclick = () => {\n        this.openEdit(perf);\n      };\n\n      let delBtn = document.createElement(\"button\");\n      delBtn.setAttribute(\"class\", \"rm-perf-btn\");\n      delBtn.textContent = \"Удалить\";\n      delBtn.onclick = () => {\n        if (confirm(`Вы действительно хотите удалить спектакль \"${perf.name}\" из базы?`)) {\n          this.save(perf._id, \"remove\");\n        }\n      };\n\n      if (this.cardPerfName.parentElement.childNodes.length == 4) {\n        this.cardPerfName.parentElement.appendChild(btn);\n        this.cardPerfName.parentElement.appendChild(delBtn)\n      } else {\n        this.cardPerfName.parentElement.childNodes[4].remove();\n        this.cardPerfName.parentElement.childNodes[4].remove();\n        this.cardPerfName.parentElement.appendChild(btn);\n        this.cardPerfName.parentElement.appendChild(delBtn);\n      }\n    }\n\n    this.savePerfBtn.onclick = () => {\n      this.save(perf._id, \"update\");\n    };\n  };\n\n  fillSearchResults = results => {\n    if (results.length == 0) {\n      const div = document.createElement(\"div\");\n      div.setAttribute(\"class\", \"perf-name-found nothing-found\");\n      div.textContent = \"Ничего не найдено\";\n      if (!this.searchResults.childNodes[0]) {\n        this.searchResults.appendChild(div);\n      }\n    } else\n      for (let i = 0; i < results.length; i++) {\n        let div = document.createElement(\"div\");\n        div.setAttribute(\"class\", \"perf-name-found\");\n        div.textContent = results[i].name;\n\n        div.onclick = () => {\n          this.fillPerformanceCard(results[i]);\n          this.showPerformanceCard();\n        };\n        for (let b = 0; b < this.searchResults.childNodes.length; b++) {\n          if (this.searchResults.childNodes[b].textContent == div.textContent) {\n            return;\n          }\n        }\n        this.searchResults.appendChild(div);\n\n      }\n  };\n\n\n  openEdit = perf => {\n    // e = perf;\n    this.pointsData = perf.points;\n    this.backgroundCard.style.display = \"none\";\n    this.backgroundModal.style.display = \"block\";\n    this.perfName.value = perf.name;\n    this.perfType.value = perf.type;\n    this.perfUrl.value = perf.imgUrl;\n\n    if (perf.acts.length > 0) {\n      // let t, o, i, s, l;\n      let actLine, sp1, inpt, sp2, btn;\n\n      this.perfActs.innerHTML = \"\";\n      for (let i = 0; i < perf.acts.length; i++) {\n        actLine = document.createElement(\"div\");\n        actLine.setAttribute(\"class\", \"act-line\");\n        sp1 = document.createElement(\"span\");\n        sp1.setAttribute(\"class\", \"perf-act\");\n        sp1.textContent = i + 1 + \":\";\n        actLine.appendChild(sp1);\n        inpt = document.createElement(\"input\");\n        inpt.setAttribute(\"class\", \"act-time\");\n        inpt.setAttribute(\"type\", \"text\");\n        inpt.setAttribute(\"placeholder\", \"1ч 15мин\");\n        inpt.value = perf.acts[i];\n        actLine.appendChild(inpt);\n\n        if (i == 0) {\n          btn = document.createElement(\"button\");\n          btn.setAttribute(\"class\", \"add-mini-btn\");\n          btn.textContent = \"+\";\n          btn.onclick = () => {\n            this.addAct();\n          }\n          actLine.appendChild(btn)\n        } else {\n          sp2 = document.createElement(\"span\");\n          sp2.setAttribute(\"class\", \"del-act-btn\");\n          sp2.textContent = \"X\";\n          sp2.onclick = e => {\n            e.target.parentElement.remove();\n          };\n          actLine.appendChild(sp2);\n          // em = document.createElement(\"button\");\n          // sp1.setAttribute(\"class\", \"perf-act\");\n        }\n        this.perfActs.appendChild(actLine);\n      }\n\n      this.fillEditCardPointsDiv(perf.points);\n      this.fillPointsEditModal(perf.points);\n      this.perfNotes.value = perf.notes;\n      this.savePerfBtn.textContent = \"Сохранить изменения\";\n      this.savePerfBtn.onclick = () => {\n        this.save(perf._id, \"update\");\n      };\n    }\n  };\n\n  fillEditCardPointsDiv = points => {\n    // e = points\n    if (points) {\n      this.perfPoints.childNodes[0].remove();\n      this.perfPoints.childNodes[0].remove();\n      let span = document.createElement(\"span\"); // t\n      span.setAttribute(\"class\", \"points-number\");\n      span.textContent = this.countPointsNum(points) + \" шт.\";\n      let span2 = document.createElement(\"span\"); // o\n      span2.setAttribute(\"class\", \"showPoints-btn\");\n      span2.textContent = \"Редактор\";\n      span2.onclick = () => {\n        this.fillPointsEditModal(points);\n        this.backgroundPoints.style.height = this.backgroundModal.offsetHeight + \"px\";\n        this.backgroundPoints.style.display = \"block\";\n        window.scrollTo(0, 0);\n      };\n      this.perfPoints.appendChild(span),\n        this.perfPoints.appendChild(span2);\n    }\n  };\n\n  isEmpty = obj => {\n    for (var prop in obj)\n      if (obj.hasOwnProperty(prop)) return false;\n    return JSON.stringify(obj) === JSON.stringify({});\n  };\n\n  fillPointsEditModal = (points = {}) => {\n    // e = points\n\n    // let t, o, i, s, l, a = document.getElementById(\"left-table\").firstChild,\n    // d = document.getElementById(\"right-table\").firstChild;\n    let trLeft, trRight, td1, td2, td3;\n\n    const leftTableFirstChild = document.getElementById(\"left-table\").firstChild;\n    const rightTableFirstChild = document.getElementById(\"right-table\").firstChild;\n\n    while (leftTableFirstChild.childNodes.length > 1) {\n      leftTableFirstChild.childNodes[1].remove();\n    }\n    while (rightTableFirstChild.childNodes.length > 1) {\n      rightTableFirstChild.childNodes[1].remove();\n    }\n\n    this.totalPointsNum = this.countPointsNum(points);\n\n    document.getElementById(\"total-points-num\").textContent = this.countPointsNum(points) + \" шт.\";\n\n    for (const leftPoint in points.leftSide) {\n      if (this.isEmpty(points.leftSide[leftPoint])) continue;\n      // let d, r, c\n      let input, sp, input2;\n      trLeft = document.createElement(\"tr\");\n      trLeft.setAttribute(\"class\", \"left-point-rope\");\n      trLeft.appendChild(document.createElement(\"td\"));\n      td1 = document.createElement(\"td\");\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      input = document.createElement(\"input\");\n      input.setAttribute(\"type\", \"number\");\n      input.setAttribute(\"class\", \"lines\");\n      input.value = points.leftSide[leftPoint].stalls.split(\"/\")[0];\n      sp = document.createElement(\"span\");\n      sp.textContent = \"/\";\n      input2 = document.createElement(\"input\");\n      input2.setAttribute(\"type\", \"number\");\n      input2.setAttribute(\"class\", \"lines\");\n      input2.value = points.leftSide[leftPoint].stalls.split(\"/\")[1];\n      td1.appendChild(input);\n      td1.appendChild(sp);\n      td1.appendChild(input2);\n      let input3 = document.createElement(\"input\");\n      input3.setAttribute(\"type\", \"number\");\n      input3.setAttribute(\"class\", \"meters\");\n      input3.value = points.leftSide[leftPoint].meters;\n      td2.appendChild(input3);\n      let input4 = document.createElement(\"input\");\n      input4.setAttribute(\"type\", \"number\");\n      input4.setAttribute(\"class\", \"machine\");\n      input4.value = points.leftSide[leftPoint].machine;\n      td3.appendChild(input4);\n      let delSpan = document.createElement(\"span\");\n      delSpan.setAttribute(\"class\", \"del-point-rope\");\n      delSpan.textContent = \"X\";\n      delSpan.onclick = e => {\n        if (confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          this.totalPointsNum--;\n          this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\n        }\n      };\n\n      td3.appendChild(delSpan);\n      trLeft.appendChild(td1);\n      trLeft.appendChild(td2);\n      trLeft.appendChild(td3);\n      leftTableFirstChild.appendChild(trLeft);\n    }\n\n    for (const rightPoint in points.rightSide) {\n      \n      if (this.isEmpty(points.rightSide[rightPoint])) continue;\n      // let a, r, c;\n      let input, sp, input2;\n      trRight = document.createElement(\"tr\");\n      trRight.setAttribute(\"class\", \"right-point-rope\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td1 = document.createElement(\"td\");\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      input = document.createElement(\"input\");\n      input.setAttribute(\"type\", \"number\");\n      input.setAttribute(\"class\", \"lines\");\n      input.value = points.rightSide[rightPoint].stalls.split(\"/\")[0];\n      sp = document.createElement(\"span\");\n      sp.thenextContent = \"/\";\n      input2 = document.createElement(\"input\");\n      input2.setAttribute(\"type\", \"number\");\n      input2.setAttribute(\"class\", \"lines\");\n      input2.value = points.rightSide[rightPoint].stalls.split(\"/\")[1];\n      td1.appendChild(input);\n      td1.appendChild(sp);\n      td1.appendChild(input2);\n\n      let input3 = document.createElement(\"input\");\n      input3.setAttribute(\"type\", \"number\");\n      input3.setAttribute(\"class\", \"meters\");\n      input3.value = points.rightSide[rightPoint].meters;\n      td2.appendChild(input3);\n\n      let input4 = document.createElement(\"input\");\n      input4.setAttribute(\"type\", \"number\");\n      input4.setAttribute(\"class\", \"machine\");\n      input4.value = points.rightSide[rightPoint].machine;\n      td3.appendChild(input4);\n\n      let delSpan = document.createElement(\"span\");\n      delSpan.setAttribute(\"class\", \"del-point-rope\");\n      delSpan.textContent = \"X\";\n      delSpan.onclick = e => {\n        if (confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          this.totalPointsNum--;\n          this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\n        }\n      }\n      td3.appendChild(delSpan);\n      trRight.appendChild(td1);\n      trRight.appendChild(td2);\n      trRight.appendChild(td3);\n      rightTableFirstChild.appendChild(trRight);\n    }\n  };\n\n  countPointsNum = points => {\n    let num = 0;\n    if (!points) return 0;\n    for (let key in points.leftSide) {\n      if (!this.isEmpty(points.leftSide[key])) {\n        num++;\n      }\n    }\n    for (let key in points.rightSide) {\n      if (!this.isEmpty(points.rightSide[key])) {\n        num++;\n      }\n    }\n    return num;\n  };\n\n  fillUserPointsTable = points => {\n    // e = points\n    // let t-tr, o, i-td1, s-td2, l-td3,\n    let trLeft, trRight, td1, td2, td3;\n    // a = document.getElementById(\"left-usr-table\").firstChild,\n    // d = document.getElementById(\"right-usr-table\").firstChild;\n\n    let leftTableFirstChild = document.getElementById(\"left-usr-table\").firstChild;\n    let rightTableFirstChild = document.getElementById(\"right-usr-table\").firstChild;\n\n    while (leftTableFirstChild.childNodes.length > 1) leftTableFirstChild.childNodes[1].remove();\n    while (rightTableFirstChild.childNodes.length > 1) rightTableFirstChild.childNodes[1].remove();\n\n    document.getElementById(\"total-user-points\").textContent = this.countPointsNum(points) + \" шт.\";\n\n    // n - point\n    for (const leftPoint in points.leftSide) {\n      trLeft = document.createElement(\"tr\"); \n      trLeft.appendChild(document.createElement(\"td\"));\n      td1 = document.createElement(\"td\");\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td1.textContent = points.leftSide[leftPoint].stalls;\n      trLeft.appendChild(td1);\n      td2.textContent = points.leftSide[leftPoint].meters;\n      trLeft.appendChild(td2);\n      td3.textContent = points.leftSide[leftPoint].machine;\n      trLeft.appendChild(td3);\n      leftTableFirstChild.appendChild(trLeft);\n    }\n    for (const rightPoint in points.rightSide) {\n      trRight = document.createElement(\"tr\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td1 = document.createElement(\"td\");\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td1.textContent = points.rightSide[rightPoint].stalls;\n      trRight.appendChild(td1);\n      td2.textContent = points.rightSide[rightPoint].meters;\n      trRight.appendChild(td2);\n      td3.textContent = points.rightSide[rightPoint].machine;\n      trRight.appendChild(td3);\n      rightTableFirstChild.appendChild(trRight);\n    }\n  };\n\n  saveEditingPoints = () => {\n    const left = document.getElementsByClassName(\"left-point-rope\"); // e\n    const right = document.getElementsByClassName(\"right-point-rope\"); // t\n\n    this.pointsData = { leftSide: {}, rightSide: {} };\n\n    if (left.length != 0 || right.length != 0) {\n      for (let t = 0; t < left.length; t++) {\n        this.pointsData.leftSide[\"point\" + (t + 1)] = {};\n        for (let o = 1; o < left[t].childNodes.length; o++)\n          if (o == 1) {\n            let first = left[t].childNodes[o].firstChild, // i\n              last = left[t].childNodes[o].lastChild; // s\n            if (!first.value) {\n              ;\n              first.parentElement.style.backgroundColor = \"red\";\n              first.onclick = () => {\n                first.parentElement.style.backgroundColor = \"initial\";\n              }\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            if (!last.value) {\n              last.parentElement.style.backgroundColor = \"red\";\n              last.onclick = () => {\n                last.parentElement.style.backgroundColor = \"initial\";\n              }\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            this.pointsData.leftSide[\"point\" + (t + 1)].stalls = first.value + \"/\" + last.value;\n          } else if (o == 2) {\n            if (!left[t].childNodes[o].firstChild.value) {\n              left[t].childNodes[o].firstChild.parentElement.style.backgroundColor = \"red\";\n              left[t].childNodes[o].firstChild.onclick = () => {\n                left[t].childNodes[o].firstChild.parentElement.style.backgroundColor = \"initial\";\n              }\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            this.pointsData.leftSide[\"point\" + (t + 1)].meters = left[t].childNodes[o].firstChild.value;\n          } else if (o == 3) {\n            this.pointsData.leftSide[\"point\" + (t + 1)].machine = left[t].childNodes[o].firstChild.value;\n          }\n      }\n\n      for (let e = 0; e < right.length; e++) {\n        this.pointsData.rightSide[\"point\" + (e + 1)] = {};\n\n        for (let o = 1; o < right[e].childNodes.length; o++) {\n          if (o == 1) {\n            let first = right[e].childNodes[o].firstChild, // i\n              last = right[e].childNodes[o].lastChild; // s\n            if (!first.value) {\n              first.parentElement.style.backgroundColor = \"red\";\n              first.onclick = () => {\n                first.parentElement.style.backgroundColor = \"initial\";\n              };\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            if (!last.value) {\n              last.parentElement.style.backgroundColor = \"red\";\n              last.onclick = () => {\n                last.parentElement.style.backgroundColor = \"initial\";\n              };\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            this.pointsData.rightSide[\"point\" + (e + 1)].stalls = first.value + \"/\" + last.value;\n          } else if (o == 2) {\n            if (!right[e].childNodes[o].firstChild.value) {\n              right[e].childNodes[o].firstChild.parentElement.style.backgroundColor = \"red\";\n              right[e].childNodes[o].firstChild.onclick = () => {\n                right[e].childNodes[o].firstChild.parentElement.style.backgroundColor = \"initial\";\n              }\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n              return;\n            }\n            this.pointsData.rightSide[\"point\" + (e + 1)].meters = right[e].childNodes[o].firstChild.value;\n          } else if (o == 3) {\n            this.pointsData.rightSide[\"point\" + (e + 1)].machine = right[e].childNodes[o].firstChild.value;\n          }\n        }\n      }\n      this.fillEditCardPointsDiv(this.pointsData);\n      this.backgroundPoints.style.display = \"none\";\n    } else {\n      this.backgroundPoints.style.display = \"none\";\n    }\n  };\n\n  addAct = () => {\n    let num = this.perfActs.childNodes.length + 1, // t\n      div = document.createElement(\"div\"), // o\n      sp = document.createElement(\"span\"), // i\n      inpt = document.createElement(\"input\"), // s\n      sp2 = document.createElement(\"span\"); // l\n\n    div.setAttribute(\"class\", \"act-line\");\n    sp.setAttribute(\"class\", \"perf-act\");\n    sp.setAttribute(\"id\", \"perf-act\" + num);\n    sp.textContent = num + \":\";\n    inpt.setAttribute(\"type\", \"text\");\n    inpt.setAttribute(\"class\", \"act-time\");\n    inpt.setAttribute(\"id\", \"act-time\" + num);\n    inpt.setAttribute(\"placeholder\", \"1ч 15мин\");\n    sp2.setAttribute(\"id\", \"del-act-btn\" + num);\n    sp2.setAttribute(\"class\", \"del-act-btn\");\n    sp2.textContent = \"X\";\n    sp2.onclick = () => {\n      sp2.parentElement.remove();\n    };\n    div.appendChild(sp);\n    div.appendChild(inpt);\n    div.appendChild(sp2);\n    this.perfActs.insertBefore(div, this.perfActs.childNodes[num]);\n  };\n\n  checkActs = () => {\n    let childLen = this.perfActs.childNodes.length, //e\n      children = this.perfActs.childNodes; //t\n    for (let i = 0; i < childLen; i++) { // n\n      if (!children[i].childNodes[1].value) {\n        children[i].childNodes[1].style.borderColor = \"red\"\n        children[i].childNodes[1].onclick = () => {\n          return children[i].childNodes[1].style.borderColor = \"initial\";\n        }\n        return false;\n      }\n    }\n    return true;\n  };\n\n  inputsValid = () => {\n    if (!this.perfName.value) {\n      this.perfName.style.borderColor = \"red\"\n      return false;\n    } else if (!this.perfType.value) {\n      this.perfType.style.borderColor = \"red\"\n      return false;\n    } else if (!this.checkActs()) {\n      this.perfActs.borderColor = \"red\";\n      return false;\n    }\n    return true;\n  };\n\n  save = async (perfId, action) => { // e , t\n    if (\"update\" === action || \"create\" === action) {\n      if (this.inputsValid()) {\n        let perfName = this.perfName.value, //o\n          perfType = this.perfType.value, // i\n          perfUrl = this.perfUrl.value, // s\n          acts = [], // l\n          perfNotes = this.perfNotes.value; // a\n\n\n        for (let e = 0; e < this.perfActs.childNodes.length; e++) {\n          if (this.perfActs.childNodes[e].childNodes[1].value.includes(\",\")) {\n            return this.perfActs.childNodes[e].childNodes[1].style.borderColor = \"red\";\n          }\n          acts.push(this.perfActs.childNodes[e].childNodes[1].value);\n        }\n        if (perfId && action === \"update\") {\n          // let query = `name=${perfName}&type=${perfType}&imgUrl=${perfUrl}&acts=${acts}&points=${JSON.stringify()}&notes=${perfNotes}&perfId=${perfId}&action=${action}`;\n          let data = {\n            name: perfName,\n            type: perfType,\n            imgUrl: perfUrl,\n            acts: acts,\n            points: this.pointsData,\n            notes: perfNotes,\n            perfId: perfId,\n            action: action\n          }\n\n          const resp = await request(\"/performances\", \"POST\", data);\n          var message;\n\n          if (resp.statusText && resp.statusText != \"\") {\n            message = resp.statusText\n          } else {\n            message = resp.headers.get(\"statusmessage\")\n          }\n\n          if (message == \"OK\") {\n            alert(\"Спектакль обновлен успешно\");\n            this.backgroundModal.style.display = \"none\";\n            window.location.reload();\n            return;\n          } else {\n            alert(\"Ошибка во время сохранения\");\n            return;\n          }\n\n        } else if (!perfId && action == \"create\") {\n          let data = {\n            name: perfName,\n            type: perfType,\n            imgUrl: perfUrl,\n            acts: acts,\n            points: this.pointsData,\n            notes: perfNotes,\n            perfId: perfId,\n            action: action\n          }\n\n          const resp = await request(\"/performances\", \"POST\", data);\n\n          var message;\n\n          if (resp.statusText && resp.statusText != \"\") {\n            message = resp.statusText\n          } else {\n            message = resp.headers.get(\"statusmessage\")\n          }\n\n          if (message == \"OK\") {\n            alert(\"Новый спектакль успешно добавлен\");\n            window.location.reload();\n          }\n          else {\n            alert(\"Ошибка во время создания\");\n            return;\n          }\n        }\n      }\n    } else if (action === \"remove\") {\n      let dt = {\n        perfId: perfId,\n        action: action\n      }\n      let resp = await request(\"/performances\", \"POST\", dt);\n      \n      var message;\n\n      if (resp.statusText && resp.statusText != \"\") {\n        message = resp.statusText\n      } else {\n        message = resp.headers.get(\"statusmessage\")\n      }\n\n      if (message == \"OK\") {\n        alert(\"Спектакль успешно удалён\");\n        window.location.reload();\n        return;\n      }\n      else {\n        alert(\"Ошибка удаления\");\n        return;\n      };\n    }\n  };\n\n  addPoint = point => {\n    // e - point\n    // t-tr, o-sp\n\n    const tr = document.createElement(\"tr\");\n    const sp = document.createElement(\"span\");\n\n    sp.textContent = \"/\";\n\n    for (let i = 0; i < 4; i++) {\n      let td = document.createElement(\"td\");\n\n      if (i == 1) {\n        for (let b = 0; b < 2; b++) {\n          let inpt = document.createElement(\"input\");\n          inpt.setAttribute(\"type\", \"number\");\n          inpt.setAttribute(\"class\", \"lines\");\n          if (b == 1) {\n            td.appendChild(sp);\n          }\n          td.appendChild(inpt);\n        }\n      }\n\n      else if (i == 2) {\n        let inpt = document.createElement(\"input\");\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"meters\");\n        td.appendChild(inpt);\n      } else if (i == 3) {\n        // e-inpt, t -sp\n        let inpt = document.createElement(\"input\");\n        let sp = document.createElement(\"span\");\n        sp.textContent = \"X\";\n        sp.setAttribute(\"class\", \"del-point-rope\");\n        sp.onclick = e => {\n          if (confirm(\"Удалить эту точку подвеса?\")) {\n            e.target.parentElement.parentElement.remove();\n            this.totalPointsNum--;\n            this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\n          }\n        }\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"machine\");\n        td.appendChild(inpt);\n        td.appendChild(sp);\n      }\n      tr.appendChild(td);\n    }\n    tr.setAttribute(\"class\", point + \"-point-rope\");\n    document.getElementById(point + \"-table\").appendChild(tr);\n    this.totalPointsNum++;\n    this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\n  };\n}\n","class Repertuar {\n\n\n  constructor() {\n    this.rollLine = document.getElementById(\"event-container\");\n    this.day = 1000 * 60 * 60 * 24;\n    this.dt = new Date(Date.now());\n\n    for(let i=0; i < 5; i++) {\n      this.todaySquare = document.getElementById(`${new Date(Date.now()).getMonth()}-${this.dt.getDate()}`);\n      if (!this.todaySquare) {\n        this.dt = new Date(this.dt.getTime() + this.day);\n      } else {\n        break\n      }\n    }\n    this.target = this.todaySquare.offsetLeft - 200;\n\n    window.onload = () => {\n      this.startAnimatingScroll();\n    };\n  }\n\n  startAnimatingScroll() {\n    let speed = 10;\n    let d = 1;\n    let id = setInterval(() => {\n      if (this.rollLine.scrollLeft < this.target) {\n        d++;\n        this.rollLine.scrollLeft += 500 + (speed*d);\n      } else {\n        clearInterval(id);\n      }\n    }, 50);\n  }\n}\n","\nasync function request(url, method, data) {\n  const response = await fetch(url, {\n    method: method,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body:  JSON.stringify(data) \n  });\n  return response;\n}"]}