{"version":3,"sources":["authenticate.js","authorisate.js","ical.js","performances.js","request.js"],"names":["Authenticate","[object Object]","this","login","document","getElementById","pass1","pass2","authBtn","onclick","style","borderColor","authenticate","value","alert","authData","resp","request","statusText","window","location","href","Authorisate","loginInpt","passInpt","authorise","pass","iCal","today","Date","now","intId","nowOnStage","divScroll","onload","startPreloader","updateStageEvent","currMonthEvents","getCurrMonthEvents","todayEvents","getTodayEvents","currEvent","getCurrEvent","setEvent","status","clearInterval","textContent","json","evts","i","length","start","getDate","push","evStart","getTime","evEnd","end","currTime","summary","time","timeStr","getHours","minutes","getMinutes","toString","evt","getRusTime","str","setInterval","prevNum","firstTime","scrollInt","scrollLeft","Performance","e","edit","pointsData","leftSide","rightSide","totalPointsNum","addPerfBtn","preloader","searchInpt","backgroundModal","closeAddPerf","savePerfBtn","perfName","perfType","perfUrl","perfActs","perfPoints","perfNotes","addActBtn","searchResults","closeCardPerf","backgroundCard","addPointsBtn","addRightPointBtn","addLeftPointBtn","backgroundPoints","closeEditPointsBtn","userPointsBack","closeUserPoints","cardPerfName","cardPerfImg","cardPerfType","cardPerfActs","cardPerfPoints","cardPerfNotes","totalPointsSpan","display","save","addAct","addPoint","saveEditingPoints","scrollTo","oninput","clearDomElement","async","test","fillSearchResults","query","data","perfs","div","createElement","setAttribute","childNodes","appendChild","setTimeout","num","element","cb","firstChild","remove","acts","getActsEnding","s1","s2","points","p","countPointsNum","fillUserPointsTable","btn","height","offsetHeight","showUsualPointsTable","perf","name","imgUrl","src","origin","fillCardPerformanceActs","type","fillCardPerformancePoints","notes","innerHTML","openEdit","delBtn","confirm","_id","parentElement","results","fillPerformanceCard","showPerformanceCard","b","actLine","sp1","inpt","sp2","target","fillEditCardPointsDiv","fillPointsEditModal","span","span2","obj","prop","hasOwnProperty","JSON","stringify","trLeft","trRight","td1","td2","td3","leftTableFirstChild","rightTableFirstChild","leftPoint","isEmpty","input","sp","input2","stalls","split","input3","meters","input4","machine","delSpan","rightPoint","thenextContent","t","key","left","getElementsByClassName","right","o","first","last","lastChild","backgroundColor","insertBefore","childLen","children","checkActs","perfId","action","inputsValid","includes","reload","dt","point","tr","td","url","method","fetch","headers","Content-Type","body"],"mappings":"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","file":"../main.min.js","sourcesContent":["\r\nclass Authenticate {\r\n\r\n  constructor() {\r\n    this.login = document.getElementById(\"login\");\r\n    this.pass1 = document.getElementById(\"pass1\");\r\n    this.pass2 = document.getElementById(\"pass2\");\r\n    this.authBtn = document.getElementById(\"authenticate-bt\");\r\n\r\n    this.login.onclick = () => {\r\n      this.login.style.borderColor = \"transparent\";\r\n    };\r\n\r\n    this.pass1.onclick = () => {\r\n      this.pass1.style.borderColor = \"transparent\";\r\n    };\r\n\r\n    this.pass2.onclick = () => {\r\n      this.pass2.style.borderColor = \"transparent\";\r\n    };\r\n\r\n    this.authBtn.onclick = () => {\r\n      this.authenticate();\r\n    }\r\n  }\r\n\r\n  async authenticate () {\r\n    if (!this.login.value) {\r\n      alert('Поле \"Логин\" пусто. Придумайте себе логин, чтобы продолжить.');\r\n      this.login.style.borderColor = \"#f26a6a\";\r\n      return;\r\n    }\r\n    else if (!this.pass1.value) {\r\n      alert('Поле \"Пароль\" пусто. Придумайте себе пароль, чтобы продолжить.');\r\n      this.pass1.style.borderColor = \"#f26a6a\";\r\n      return;\r\n    }\r\n    else if (!this.pass2.value) {\r\n        alert('Поле \"Пароль повторно\" пусто. Введите пароль повторно, чтобы продолжить.');\r\n        this.pass2.style.borderColor = \"#f26a6a\";\r\n        return;\r\n    }\r\n\r\n    if (this.pass1.value !== this.pass2.value) {\r\n      alert(\"Введённые Вами пароли не совпадают\");\r\n      return;\r\n    } \r\n\r\n    const authData = {\r\n      login: this.login.value,\r\n      pass1: this.pass1.value,\r\n      pass2: this.pass2.value,\r\n    }\r\n    \r\n    const resp = await request(\"/authenticate\", \"POST\", authData);\r\n    \r\n    if (resp.statusText == \"Inconsistent data\") {\r\n      alert(\"Отсутсвует логин или пароль\");\r\n      return;\r\n    } if (resp.statusText == \"Duplicate\") {\r\n      alert(\"Такой логин уже занят, придумайте другой\");\r\n      return;\r\n    } else if (resp.statusText == \"Passwords mismatch\")  {\r\n      alert(\"Пароли не совпадают\");\r\n      return;\r\n    } else if(resp.statusText == \"Authenticated\") {\r\n      alert(\"Аутентификация успешна, сейчас вы будете перенаправлены на страницу логина\");\r\n      window.location.href = \"/auth\";\r\n      return;\r\n    }\r\n    else {\r\n      alert(\"Ошибка аутентификации\");\r\n      return;\r\n    }\r\n    \r\n  };\r\n\r\n}","class Authorisate {\r\n\r\n  constructor() {\r\n    this.authBtn = document.getElementById(\"auth-bt\");\r\n    this.loginInpt = document.getElementById(\"login\");\r\n    this.passInpt = document.getElementById(\"pass\");\r\n\r\n    this.authBtn.onclick = () => {\r\n      this.authorise();\r\n    };\r\n  }\r\n\r\n\r\n  async authorise() {\r\n\r\n    if (!this.loginInpt.value || !this.passInpt.value) {\r\n      return alert(\"Отсутствует логин или пароль\");\r\n    }\r\n\r\n    const authData = {\r\n      login: this.loginInpt.value,\r\n      pass: this.passInpt.value\r\n    }\r\n\r\n    const resp = await request(\"/auth\", \"POST\", authData);\r\n    \r\n    if (resp.statusText == \"Check login and password\") {\r\n      alert(\"Неверный логин или пароль\");\r\n      return;\r\n    } else if (resp.statusText == \"Authorised\") {\r\n      alert(\"Авторизация успешна и будет действительна в течение 30 дней\");\r\n      window.location.href = \"/performances\";\r\n      return;\r\n    } else {\r\n      alert(\"Произошла ошибка во время авторизации\");\r\n      return;\r\n    }\r\n\r\n  }\r\n}","class iCal {\r\n    constructor() {\r\n        this.today = new Date(Date.now());\r\n        this.intId = null;\r\n        this.nowOnStage = document.getElementById(\"now-on-stage\");\r\n        this.divScroll = document.getElementById(\"div-scroll\"); \r\n        window.onload = () => {\r\n            this.startPreloader();\r\n            this.updateStageEvent();\r\n            // this.startScrolling();\r\n        }\r\n    }\r\n\r\n    async updateStageEvent() {\r\n        const currMonthEvents = await this.getCurrMonthEvents();\r\n        const todayEvents = this.getTodayEvents(currMonthEvents);\r\n        const currEvent = this.getCurrEvent(todayEvents);\r\n        this.setEvent(currEvent);\r\n\r\n    }\r\n\r\n    async getCurrMonthEvents() {\r\n        const resp = await request(\"/api/ical\", \"GET\");\r\n        if (resp.status !== 200) {\r\n            clearInterval(this.intId);\r\n            this.nowOnStage.textContent = \"?\";\r\n        }\r\n        const data = await resp.json();\r\n        const evts = data.evts;\r\n        return evts\r\n    }\r\n\r\n    getTodayEvents(evts) {\r\n        const todayEvents = [];\r\n\r\n        for(let i = 0; i < evts.length; i++) {\r\n            if (new Date(evts[i].start).getDate() == this.today.getDate()) {\r\n                todayEvents.push(evts[i]);\r\n            }\r\n        }\r\n        return todayEvents;\r\n    }\r\n\r\n    getCurrEvent(todayEvents) {\r\n\r\n        for(let i = 0; i < todayEvents.length; i++) {\r\n            const evStart = new Date(todayEvents[i].start).getTime();\r\n            const evEnd = new Date(todayEvents[i].end).getTime();\r\n            const currTime = this.today.getTime();\r\n\r\n            if (evStart < currTime && evEnd > currTime) {\r\n                return todayEvents[i];\r\n            }\r\n        }\r\n\r\n        return {summary: \"Hичего\"};\r\n\r\n    }\r\n\r\n    getRusTime(time) {\r\n        let timeStr = time.getHours();\r\n        let minutes = time.getMinutes();\r\n        if ( minutes.toString().length == 1) {\r\n            minutes = minutes.toString() + \"0\";\r\n        }\r\n        timeStr += \":\" + minutes;\r\n        return timeStr;\r\n    }\r\n\r\n    setEvent(evt) {\r\n        clearInterval(this.intId);\r\n\r\n        if (evt && (evt.summary != \"Hичего\")) {\r\n            const evStart = new Date(evt.start);\r\n            const evEnd = new Date(evt.end);\r\n            const time = \"C \" + this.getRusTime(evStart) + \" до \" + this.getRusTime(evEnd);\r\n            this.nowOnStage.textContent = time + \" - \" + evt.summary;\r\n\r\n        } else {\r\n            this.nowOnStage.textContent = evt.summary;\r\n        }\r\n\r\n    }\r\n\r\n    startPreloader() {\r\n        let str = \".\";\r\n        this.intId = setInterval(() => {\r\n            str += \".\";\r\n            this.nowOnStage.textContent = str;\r\n            if (str.length > 2) str = \"\";\r\n        }, 500);\r\n    }\r\n\r\n    startScrolling() {\r\n        let prevNum = 0;\r\n        let firstTime = true;\r\n        let scrollStep = 1;\r\n\r\n        this.scrollInt = setInterval(() => { \r\n            if (firstTime) {\r\n                this.divScroll.scrollLeft += scrollStep;\r\n                if (this.divScroll.scrollLeft != 0) {\r\n                    firstTime = false;\r\n                }\r\n            }\r\n            else if (prevNum < this.divScroll.scrollLeft) {\r\n                prevNum = this.divScroll.scrollLeft;\r\n                this.divScroll.scrollLeft += scrollStep;\r\n            } else if (prevNum == this.divScroll.scrollLeft) {\r\n                this.divScroll.scrollLeft -= scrollStep;\r\n            } else if (prevNum > this.divScroll.scrollLeft) {\r\n                prevNum = this.divScroll.scrollLeft;\r\n                this.divScroll.scrollLeft -= scrollStep;\r\n                if (this.divScroll.scrollLeft == 0) {\r\n                    this.divScroll.scrollLeft = scrollStep;\r\n                }\r\n            }\r\n        }, 50);\r\n\r\n    }\r\n}","class Performance {\r\n\r\n  // const n = this;\r\n  // (this.BASE_URL = e),\r\n  constructor(e = \"\", edit = \"false\") {\r\n\r\n    this.edit = edit;\r\n    this.pointsData = { leftSide: {}, rightSide: {} };\r\n\r\n    this.totalPointsNum = 0;\r\n    this.addPerfBtn = document.getElementById(\"add-performance-btn\");\r\n    this.preloader = document.getElementById(\"preloader\");\r\n    this.searchInpt = document.getElementById(\"search-perfs\");\r\n    this.backgroundModal = document.getElementById(\"background-modal\");\r\n    this.closeAddPerf = document.getElementById(\"close-adding-perf\");\r\n    this.savePerfBtn = document.getElementById(\"save-perf-btn\");\r\n    this.perfName = document.getElementById(\"perf-name\");\r\n    this.perfType = document.getElementById(\"perf-type\");\r\n    this.perfUrl = document.getElementById(\"perf-pic-url\");\r\n    this.perfActs = document.getElementById(\"perf-acts\");\r\n    this.perfPoints = document.getElementById(\"perf-points\");\r\n    this.perfNotes = document.getElementById(\"perf-notes\");\r\n    this.addActBtn = document.getElementById(\"add-act\");\r\n    this.searchResults = document.getElementById(\"search-results\");\r\n    this.closeCardPerf = document.getElementById(\"close-card-perf\");\r\n    this.backgroundCard = document.getElementById(\"card-back\");\r\n    this.addPointsBtn = document.getElementById(\"add-points\");\r\n    this.addRightPointBtn = document.getElementById(\"add-right-pt-btn\");\r\n    this.addLeftPointBtn = document.getElementById(\"add-left-pt-btn\");\r\n    this.backgroundPoints = document.getElementById(\"points-back\");\r\n    this.closeEditPointsBtn = document.getElementById(\"close-points-perf\");\r\n    this.userPointsBack = document.getElementById(\"user-points-back\");\r\n    this.closeUserPoints = document.getElementById(\"close-user-points\");\r\n    this.cardPerfName = document.getElementById(\"card-perf-name\");\r\n    this.cardPerfImg = document.getElementById(\"card-perf-img\");\r\n    this.cardPerfType = document.getElementById(\"card-perf-type\");\r\n    this.cardPerfActs = document.getElementById(\"card-perf-acts\");\r\n    this.cardPerfPoints = document.getElementById(\"card-perf-points\");\r\n    this.cardPerfNotes = document.getElementById(\"card-perf-notes\");\r\n    this.totalPointsSpan = document.getElementById(\"total-points-num\");\r\n\r\n    if (this.edit === \"true\") {\r\n      this.addPerfBtn.onclick = () => {\r\n        this.backgroundModal.style.display = \"block\";\r\n      };\r\n\r\n      this.closeAddPerf.onclick = () => {\r\n        this.backgroundModal.style.display = \"none\";\r\n      };\r\n\r\n      this.savePerfBtn.onclick = () => {\r\n        this.save(!1, \"create\");\r\n      };\r\n\r\n      this.perfName.onclick = () => {\r\n        this.perfName.style.borderColor = \"initial\";\r\n      };\r\n\r\n      this.perfType.onclick = () => {\r\n        this.perfType.style.borderColor = \"initial\";\r\n      };\r\n\r\n      this.addActBtn.onclick = () => {\r\n        this.addAct();\r\n      };\r\n\r\n      this.addRightPointBtn.onclick = () => {\r\n        this.addPoint(\"right\");\r\n      };\r\n\r\n      this.addLeftPointBtn.onclick = () => {\r\n        this.addPoint(\"left\");\r\n      };\r\n    }\r\n\r\n    this.closeEditPointsBtn.onclick = () => {\r\n      this.saveEditingPoints();\r\n    };\r\n\r\n    this.addPointsBtn.onclick = () => {\r\n      this.backgroundPoints.style.display = \"block\";\r\n      window.scrollTo(0, 0);\r\n    };\r\n\r\n    this.closeCardPerf.onclick = () => {\r\n      this.savePerfBtn.onclick = () => {\r\n        this.save(!1, \"create\");\r\n      };\r\n      this.backgroundCard.style.display = \"none\";\r\n    };\r\n\r\n    this.closeUserPoints.onclick = () => {\r\n      this.userPointsBack.style.display = \"none\";\r\n    };\r\n\r\n    this.searchInpt.oninput = () => {\r\n      if (this.searchInpt.value && this.searchInpt.value != \"\") {\r\n        this.clearDomElement(this.searchResults, async () => {\r\n\r\n          if (/^\\s*$/.test(this.searchInpt.value)) {\r\n            this.fillSearchResults([]);\r\n          }\r\n          else {\r\n\r\n            const query = {\r\n              query: this.searchInpt.value\r\n            }\r\n\r\n            this.preloader.style.display = \"block\";\r\n\r\n            const resp = await request(\"/perf-search\", \"POST\", query);\r\n            if (resp.statusText == \"OK\") {\r\n              const data = await resp.json();\r\n              this.fillSearchResults(data.perfs);\r\n              this.preloader.style.display = \"none\";\r\n            } else {\r\n              if (resp === \"error\")\r\n                return this.preloader.style.display = \"none\";\r\n              if (resp == \"econn\") {\r\n                this.preloader.style.display = \"none\";\r\n                const div = document.createElement(\"div\");\r\n                div.setAttribute(\"class\", \"perf-name-found nothing-found\");\r\n                div.textContent = \"Проверьте интернет соединение\";\r\n                if (!this.searchResults.childNodes[0]) {\r\n                  this.searchResults.appendChild(div);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        })\r\n      }\r\n      else {\r\n        setTimeout(() => {\r\n          this.clearDomElement(this.searchResults, () => { });\r\n        }, 100);\r\n      }\r\n    };\r\n\r\n  }\r\n\r\n\r\n  getActsEnding = num => {\r\n    let actsNum = 1 == num ? num + \" акт\" : num > 1 && num < 5 ? num + \" акта\" : num + \"актов\";\r\n    return actsNum;\r\n  };\r\n\r\n  showPerformanceCard = () => {\r\n    this.backgroundCard.style.display = \"block\";\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  showUsualPointsTable = () => {\r\n    this.userPointsBack.style.display = \"block\";\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  clearDomElement = (element, cb) => {\r\n    while (element.firstChild) {\r\n      element.firstChild.remove();\r\n    }\r\n    return cb();\r\n  };\r\n\r\n  fillCardPerformanceActs = (perfType, acts) => {\r\n    if (perfType === \"ballet\") {\r\n      this.cardPerfType.textContent = `Балет, ${this.getActsEnding(acts.length)}`;\r\n    } else if (perfType === \"opera\") {\r\n      this.cardPerfType.textContent = `Опера, ${this.getActsEnding(acts.length)}`;\r\n    }\r\n\r\n    this.clearDomElement(this.cardPerfActs, () => {\r\n      for (let i = 0; i < acts.length; i++) {\r\n        let div = document.createElement(\"div\"),\r\n          s1 = document.createElement(\"span\"),\r\n          s2 = document.createElement(\"span\");\r\n\r\n        div.setAttribute(\"class\", \"act-line\");\r\n        s1.textContent = `${i + 1} Акт:`;\r\n        s2.textContent = `${acts[i]}`;\r\n        div.appendChild(s1);\r\n        div.appendChild(s2);\r\n        this.cardPerfActs.appendChild(div);\r\n      }\r\n    });\r\n  };\r\n\r\n  fillCardPerformancePoints = (points) => {\r\n\r\n    if (points) {\r\n\r\n      if (this.cardPerfPoints.childNodes.length == 2) {\r\n        this.cardPerfPoints.childNodes[1].remove()\r\n      }\r\n      else if (this.cardPerfPoints.childNodes.length == 3) {\r\n        this.cardPerfPoints.childNodes[1].remove();\r\n        this.cardPerfPoints.childNodes[1].remove()\r\n      }\r\n\r\n      const p = document.createElement(\"p\");\r\n      p.setAttribute(\"class\", \"total-points-usr\");\r\n      p.textContent = `Всего: ${this.countPointsNum(points)} шт.`;\r\n      this.cardPerfPoints.appendChild(p),\r\n        this.fillUserPointsTable(points);\r\n\r\n      const btn = document.createElement(\"button\");\r\n      btn.setAttribute(\"class\", \"showPoints-btn\");\r\n      btn.textContent = \"Просмотр\";\r\n      btn.onclick = () => {\r\n        this.userPointsBack.style.height = this.backgroundCard.offsetHeight + \"px\";\r\n        this.showUsualPointsTable();\r\n      }\r\n      this.cardPerfPoints.appendChild(btn);\r\n\r\n    } else if (this.cardPerfPoints.childNodes.length == 3) {\r\n      this.cardPerfPoints.childNodes[1].remove();\r\n      this.cardPerfPoints.childNodes[1].remove();\r\n      const i = document.createElement(\"i\");\r\n      i.textContent = \"– Отсутствуют\";\r\n      this.cardPerfPoints.appendChild(i);\r\n    }\r\n  };\r\n\r\n  fillPerformanceCard = (perf) => {\r\n\r\n    this.cardPerfName.textContent = perf.name;\r\n\r\n    if (perf.imgUrl) {\r\n      this.cardPerfImg.src = window.location.origin + \"/static/imgs/performance-imgs/\" + perf.imgUrl;\r\n      this.cardPerfImg.style.display = \"inline-block\";\r\n    } else {\r\n      this.cardPerfImg.src = window.location.origin + \"/static/imgs/performance-imgs/no-photo.png\";\r\n      this.cardPerfImg.style.display = \"inline-block\";\r\n    }\r\n\r\n    this.fillCardPerformanceActs(perf.type, perf.acts);\r\n    this.fillCardPerformancePoints(perf.points);\r\n\r\n    if (perf.notes != \"\") {\r\n      this.cardPerfNotes.innerHTML = perf.notes;\r\n    } else {\r\n      this.cardPerfNotes.textContent = \"– Отсутствуют\";\r\n    }\r\n\r\n    if (this.edit === \"true\") {\r\n      let btn = document.createElement(\"button\");\r\n      btn.setAttribute(\"class\", \"edit-btn\");\r\n      btn.textContent = \"Редактировать\";\r\n      btn.onclick = () => {\r\n        this.openEdit(perf);\r\n      };\r\n\r\n      let delBtn = document.createElement(\"button\");\r\n      delBtn.setAttribute(\"class\", \"rm-perf-btn\");\r\n      delBtn.textContent = \"Удалить\";\r\n      delBtn.onclick = () => {\r\n        if (confirm(`Вы действительно хотите удалить спектакль \"${perf.name}\" из базы?`)) {\r\n          this.save(perf._id, \"remove\");\r\n        }\r\n      };\r\n\r\n      if (this.cardPerfName.parentElement.childNodes.length == 4) {\r\n        this.cardPerfName.parentElement.appendChild(btn);\r\n        this.cardPerfName.parentElement.appendChild(delBtn)\r\n      } else {\r\n        this.cardPerfName.parentElement.childNodes[4].remove();\r\n        this.cardPerfName.parentElement.childNodes[4].remove();\r\n        this.cardPerfName.parentElement.appendChild(btn);\r\n        this.cardPerfName.parentElement.appendChild(delBtn);\r\n      }\r\n    }\r\n\r\n    this.savePerfBtn.onclick = () => {\r\n      this.save(perf._id, \"update\");\r\n    };\r\n  };\r\n\r\n  fillSearchResults = results => {\r\n    if (results.length == 0) {\r\n      const div = document.createElement(\"div\");\r\n      div.setAttribute(\"class\", \"perf-name-found nothing-found\");\r\n      div.textContent = \"Ничего не найдено\";\r\n      if (!this.searchResults.childNodes[0]) {\r\n        this.searchResults.appendChild(div);\r\n      }\r\n    } else\r\n      for (let i = 0; i < results.length; i++) {\r\n        let div = document.createElement(\"div\");\r\n        div.setAttribute(\"class\", \"perf-name-found\");\r\n        div.textContent = results[i].name;\r\n\r\n        div.onclick = () => {\r\n          this.fillPerformanceCard(results[i]);\r\n          this.showPerformanceCard();\r\n        };\r\n        for (let b = 0; b < this.searchResults.childNodes.length; b++) {\r\n          if (this.searchResults.childNodes[b].textContent == div.textContent) {\r\n            return;\r\n          }\r\n        }\r\n        this.searchResults.appendChild(div);\r\n\r\n      }\r\n  };\r\n\r\n\r\n  openEdit = perf => {\r\n    // e = perf;\r\n    this.pointsData = perf.points;\r\n    this.backgroundCard.style.display = \"none\";\r\n    this.backgroundModal.style.display = \"block\";\r\n    this.perfName.value = perf.name;\r\n    this.perfType.value = perf.type;\r\n    this.perfUrl.value = perf.imgUrl;\r\n\r\n    if (perf.acts.length > 0) {\r\n      // let t, o, i, s, l;\r\n      let actLine, sp1, inpt, sp2, btn;\r\n\r\n      this.perfActs.innerHTML = \"\";\r\n      for (let i = 0; i < perf.acts.length; i++) {\r\n        actLine = document.createElement(\"div\");\r\n        actLine.setAttribute(\"class\", \"act-line\");\r\n        sp1 = document.createElement(\"span\");\r\n        sp1.setAttribute(\"class\", \"perf-act\");\r\n        sp1.textContent = i + 1 + \":\";\r\n        actLine.appendChild(sp1);\r\n        inpt = document.createElement(\"input\");\r\n        inpt.setAttribute(\"class\", \"act-time\");\r\n        inpt.setAttribute(\"type\", \"text\");\r\n        inpt.setAttribute(\"placeholder\", \"1ч 15мин\");\r\n        inpt.value = perf.acts[i];\r\n        actLine.appendChild(inpt);\r\n\r\n        if (i == 0) {\r\n          btn = document.createElement(\"button\");\r\n          btn.setAttribute(\"class\", \"add-mini-btn\");\r\n          btn.textContent = \"+\";\r\n          btn.onclick = () => {\r\n            this.addAct();\r\n          }\r\n          actLine.appendChild(btn)\r\n        } else {\r\n          sp2 = document.createElement(\"span\");\r\n          sp2.setAttribute(\"class\", \"del-act-btn\");\r\n          sp2.textContent = \"X\";\r\n          sp2.onclick = e => {\r\n            e.target.parentElement.remove();\r\n          };\r\n          actLine.appendChild(sp2);\r\n          // em = document.createElement(\"button\");\r\n          // sp1.setAttribute(\"class\", \"perf-act\");\r\n        }\r\n        this.perfActs.appendChild(actLine);\r\n      }\r\n\r\n      this.fillEditCardPointsDiv(perf.points);\r\n      this.fillPointsEditModal(perf.points);\r\n      this.perfNotes.value = perf.notes;\r\n      this.savePerfBtn.textContent = \"Сохранить изменения\";\r\n      this.savePerfBtn.onclick = () => {\r\n        this.save(perf._id, \"update\");\r\n      };\r\n    }\r\n  };\r\n\r\n  fillEditCardPointsDiv = points => {\r\n    // e = points\r\n    if (points) {\r\n      this.perfPoints.childNodes[0].remove();\r\n      this.perfPoints.childNodes[0].remove();\r\n      let span = document.createElement(\"span\"); // t\r\n      span.setAttribute(\"class\", \"points-number\");\r\n      span.textContent = this.countPointsNum(points) + \" шт.\";\r\n      let span2 = document.createElement(\"span\"); // o\r\n      span2.setAttribute(\"class\", \"showPoints-btn\");\r\n      span2.textContent = \"Редактор\";\r\n      span2.onclick = () => {\r\n        this.fillPointsEditModal(points);\r\n        this.backgroundPoints.style.height = this.backgroundModal.offsetHeight + \"px\";\r\n        this.backgroundPoints.style.display = \"block\";\r\n        window.scrollTo(0, 0);\r\n      };\r\n      this.perfPoints.appendChild(span),\r\n        this.perfPoints.appendChild(span2);\r\n    }\r\n  };\r\n\r\n  isEmpty = obj => {\r\n    for (var prop in obj)\r\n      if (obj.hasOwnProperty(prop)) return false;\r\n    return JSON.stringify(obj) === JSON.stringify({});\r\n  };\r\n\r\n  fillPointsEditModal = (points = {}) => {\r\n    // e = points\r\n    // if (!points) {\r\n    //   points = {};\r\n    // }\r\n\r\n    // let t, o, i, s, l, a = document.getElementById(\"left-table\").firstChild,\r\n    // d = document.getElementById(\"right-table\").firstChild;\r\n    let trLeft, trRight, td1, td2, td3;\r\n\r\n    const leftTableFirstChild = document.getElementById(\"left-table\").firstChild;\r\n    const rightTableFirstChild = document.getElementById(\"right-table\").firstChild;\r\n\r\n    while (leftTableFirstChild.childNodes.length > 1) {\r\n      leftTableFirstChild.childNodes[1].remove();\r\n    }\r\n    while (rightTableFirstChild.childNodes.length > 1) {\r\n      rightTableFirstChild.childNodes[1].remove();\r\n    }\r\n\r\n    this.totalPointsNum = this.countPointsNum(points);\r\n\r\n    document.getElementById(\"total-points-num\").textContent = this.countPointsNum(points) + \" шт.\";\r\n\r\n    for (const leftPoint in points.leftSide) {\r\n      if (this.isEmpty(points.leftSide[leftPoint])) continue;\r\n      // let d, r, c\r\n      let input, sp, input2;\r\n      trLeft = document.createElement(\"tr\");\r\n      trLeft.setAttribute(\"class\", \"left-point-rope\");\r\n      trLeft.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      input = document.createElement(\"input\");\r\n      input.setAttribute(\"type\", \"number\");\r\n      input.setAttribute(\"class\", \"lines\");\r\n      input.value = points.leftSide[leftPoint].stalls.split(\"/\")[0];\r\n      sp = document.createElement(\"span\");\r\n      sp.textContent = \"/\";\r\n      input2 = document.createElement(\"input\");\r\n      input2.setAttribute(\"type\", \"number\");\r\n      input2.setAttribute(\"class\", \"lines\");\r\n      input2.value = points.leftSide[leftPoint].stalls.split(\"/\")[1];\r\n      td1.appendChild(input);\r\n      td1.appendChild(sp);\r\n      td1.appendChild(input2);\r\n      let input3 = document.createElement(\"input\");\r\n      input3.setAttribute(\"type\", \"number\");\r\n      input3.setAttribute(\"class\", \"meters\");\r\n      input3.value = points.leftSide[leftPoint].meters;\r\n      td2.appendChild(input3);\r\n      let input4 = document.createElement(\"input\");\r\n      input4.setAttribute(\"type\", \"number\");\r\n      input4.setAttribute(\"class\", \"machine\");\r\n      input4.value = points.leftSide[leftPoint].machine;\r\n      td3.appendChild(input4);\r\n      let delSpan = document.createElement(\"span\");\r\n      delSpan.setAttribute(\"class\", \"del-point-rope\");\r\n      delSpan.textContent = \"X\";\r\n      delSpan.onclick = e => {\r\n        if (confirm(\"Удалить эту точку подвеса?\")) {\r\n          e.target.parentElement.parentElement.remove();\r\n          this.totalPointsNum--;\r\n          this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n        }\r\n      };\r\n\r\n      td3.appendChild(delSpan);\r\n      trLeft.appendChild(td1);\r\n      trLeft.appendChild(td2);\r\n      trLeft.appendChild(td3);\r\n      leftTableFirstChild.appendChild(trLeft);\r\n    }\r\n\r\n    for (const rightPoint in points.rightSide) {\r\n      if (this.isEmpty(points.rightSide[rightPoint])) continue;\r\n      // let a, r, c;\r\n      let input, sp, input2;\r\n      trRight = document.createElement(\"tr\");\r\n      trRight.setAttribute(\"class\", \"right-point-rope\");\r\n      trRight.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      input = document.createElement(\"input\");\r\n      input.setAttribute(\"type\", \"number\");\r\n      input.setAttribute(\"class\", \"lines\");\r\n      input.value = points.rightSide[rightPoint].stalls.split(\"/\")[0];\r\n      sp = document.createElement(\"span\");\r\n      sp.thenextContent = \"/\";\r\n      input2 = document.createElement(\"input\");\r\n      input2.setAttribute(\"type\", \"number\");\r\n      input2.setAttribute(\"class\", \"lines\");\r\n      input2.value = points.rightSide[rightPoint].stalls.split(\"/\")[1];\r\n      td1.appendChild(input);\r\n      td1.appendChild(sp);\r\n      td1.appendChild(input2);\r\n\r\n      let input3 = document.createElement(\"input\");\r\n      input3.setAttribute(\"type\", \"number\");\r\n      input3.setAttribute(\"class\", \"meters\");\r\n      input3.value = points.rightSide[t].meters;\r\n      td2.appendChild(input3);\r\n\r\n      let input4 = document.createElement(\"input\");\r\n      input4.setAttribute(\"type\", \"number\");\r\n      input4.setAttribute(\"class\", \"machine\");\r\n      input4.value = points.rightSide[rightPoint].machine;\r\n      td3.appendChild(input4);\r\n\r\n      let delSpan = document.createElement(\"span\");\r\n      delSpan.setAttribute(\"class\", \"del-point-rope\");\r\n      delSpan.textContent = \"X\";\r\n      delSpan.onclick = e => {\r\n        if (confirm(\"Удалить эту точку подвеса?\")) {\r\n          e.target.parentElement.parentElement.remove();\r\n          this.totalPointsNum--;\r\n          this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n        }\r\n\r\n        td3.appendChild(delSpan);\r\n        trLeft.appendChild(td1);\r\n        trLeft.appendChild(td2);\r\n        trLeft.appendChild(td3);\r\n        rightTableFirstChild.appendChild(trRight);\r\n      }\r\n    }\r\n  };\r\n\r\n  countPointsNum = points => {\r\n    let num = 0;\r\n    if (!points) return 0;\r\n    for (let key in points.leftSide) {\r\n      if (!this.isEmpty(points.leftSide[key])) {\r\n        num++;\r\n      }\r\n    }\r\n    for (let key in points.rightSide) {\r\n      if (!this.isEmpty(points.rightSide[key])) {\r\n        num++;\r\n      }\r\n    }\r\n    return num;\r\n  };\r\n\r\n  fillUserPointsTable = points => {\r\n    // e = points\r\n    // let t-tr, o, i-td1, s-td2, l-td3,\r\n    let trLeft, trRight, td1, td2, td3;\r\n    // a = document.getElementById(\"left-usr-table\").firstChild,\r\n    // d = document.getElementById(\"right-usr-table\").firstChild;\r\n\r\n    let leftTableFirstChild = document.getElementById(\"left-usr-table\").firstChild;\r\n    let rightTableFirstChild = document.getElementById(\"right-usr-table\").firstChild;\r\n\r\n    while (leftTableFirstChild.childNodes.length > 1) leftTableFirstChild.childNodes[1].remove();\r\n    while (rightTableFirstChild.childNodes.length > 1) rightTableFirstChild.childNodes[1].remove();\r\n\r\n    document.getElementById(\"total-user-points\").textContent = this.countPointsNum(points) + \" шт.\";\r\n\r\n    // n - point\r\n    for (const leftPoint in points.leftSide) {\r\n      trLeft = document.createElement(\"tr\");\r\n      trLeft.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      td1.textContent = points.leftSide[leftPoint].stalls;\r\n      trLeft.appendChild(td1);\r\n      td2.textContent = points.leftSide[leftPoint].meters;\r\n      trLeft.appendChild(td2);\r\n      td3.textContent = points.leftSide[leftPoint].machine;\r\n      trLeft.appendChild(td3);\r\n      leftTableFirstChild.appendChild(trLeft);\r\n    }\r\n    for (const rightPoint in points.rightSide) {\r\n      trRight = document.createElement(\"tr\");\r\n      trRight.appendChild(document.createElement(\"td\"));\r\n      td1 = document.createElement(\"td\");\r\n      td2 = document.createElement(\"td\");\r\n      td3 = document.createElement(\"td\");\r\n      td1.textContent = points.rightSide[rightPoint].stalls;\r\n      trRight.appendChild(td1);\r\n      td2.textContent = points.rightSide[rightPoint].meters;\r\n      trRight.appendChild(td2);\r\n      td3.textContent = points.rightSide[rightPoint].machine;\r\n      trRight.appendChild(td3);\r\n      rightTableFirstChild.appendChild(trRight);\r\n    }\r\n  };\r\n\r\n  saveEditingPoints = () => {\r\n    const left = document.getElementsByClassName(\"left-point-rope\"); // e\r\n    const right = document.getElementsByClassName(\"right-point-rope\"); // t\r\n\r\n    this.pointsData = { leftSide: {}, rightSide: {} };\r\n\r\n    if (left.length != 0 || right.length != 0) {\r\n      for (let t = 0; t < left.length; t++) {\r\n        this.pointsData.leftSide[\"point\" + (t + 1)] = {};\r\n        for (let o = 1; o < left[t].childNodes.length; o++)\r\n          if (o == 1) {\r\n            let first = left[t].childNodes[o].firstChild, // i\r\n              last = left[t].childNodes[o].lastChild; // s\r\n            if (!first.value) {\r\n              ;\r\n              first.parentElement.style.backgroundColor = \"red\";\r\n              first.onclick = () => {\r\n                first.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            if (!last.value) {\r\n              last.parentElement.style.backgroundColor = \"red\";\r\n              last.onclick = () => {\r\n                last.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.leftSide[\"point\" + (t + 1)].stalls = first.value + \"/\" + last.value;\r\n          } else if (o == 2) {\r\n            if (!left[t].childNodes[o].firstChild.value) {\r\n              left[t].childNodes[o].firstChild.parentElement.style.backgroundColor = \"red\";\r\n              left[t].childNodes[o].firstChild.onclick = () => {\r\n                left[t].childNodes[o].firstChild.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.leftSide[\"point\" + (t + 1)].meters = left[t].childNodes[o].firstChild.value;\r\n          } else if (o == 3) {\r\n            this.pointsData.leftSide[\"point\" + (t + 1)].machine = left[t].childNodes[o].firstChild.value;\r\n          }\r\n      }\r\n\r\n      for (let e = 0; e < right.length; e++) {\r\n        this.pointsData.rightSide[\"point\" + (e + 1)] = {};\r\n\r\n        for (let o = 1; o < right[e].childNodes.length; o++) {\r\n          if (o == 1) {\r\n            let first = right[e].childNodes[o].firstChild, // i\r\n              last = right[e].childNodes[o].lastChild; // s\r\n            if (!first.value) {\r\n              first.parentElement.style.backgroundColor = \"red\";\r\n              first.onclick = () => {\r\n                first.parentElement.style.backgroundColor = \"initial\";\r\n              };\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            if (!last.value) {\r\n              last.parentElement.style.backgroundColor = \"red\";\r\n              last.onclick = () => {\r\n                last.parentElement.style.backgroundColor = \"initial\";\r\n              };\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.rightSide[\"point\" + (e + 1)].stalls = first.value + \"/\" + last.value;\r\n          } else if (o == 2) {\r\n            if (!right[e].childNodes[o].firstChild.value) {\r\n              right[e].childNodes[o].firstChild.parentElement.style.backgroundColor = \"red\";\r\n              right[e].childNodes[o].firstChild.onclick = () => {\r\n                right[e].childNodes[o].firstChild.parentElement.style.backgroundColor = \"initial\";\r\n              }\r\n              alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\r\n              return;\r\n            }\r\n            this.pointsData.rightSide[\"point\" + (e + 1)].meters = right[e].childNodes[o].firstChild.value;\r\n          } else if (o == 3) {\r\n            this.pointsData.rightSide[\"point\" + (e + 1)].machine = t[e].childNodes[o].firstChild.value;\r\n          }\r\n        }\r\n      }\r\n      this.fillEditCardPointsDiv(this.pointsData);\r\n      this.backgroundPoints.style.display = \"none\";\r\n    } else {\r\n      this.backgroundPoints.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  addAct = () => {\r\n    let num = this.perfActs.childNodes.length + 1, // t\r\n      div = document.createElement(\"div\"), // o\r\n      sp = document.createElement(\"span\"), // i\r\n      inpt = document.createElement(\"input\"), // s\r\n      sp2 = document.createElement(\"span\"); // l\r\n\r\n    div.setAttribute(\"class\", \"act-line\");\r\n    sp.setAttribute(\"class\", \"perf-act\");\r\n    sp.setAttribute(\"id\", \"perf-act\" + t);\r\n    sp.textContent = num + \":\";\r\n    inpt.setAttribute(\"type\", \"text\");\r\n    inpt.setAttribute(\"class\", \"act-time\");\r\n    inpt.setAttribute(\"id\", \"act-time\" + num);\r\n    inpt.setAttribute(\"placeholder\", \"1ч 15мин\");\r\n    sp2.setAttribute(\"id\", \"del-act-btn\" + t);\r\n    sp2.setAttribute(\"class\", \"del-act-btn\");\r\n    sp2.textContent = \"X\";\r\n    sp2.onclick = () => {\r\n      sp2.parentElement.remove();\r\n    };\r\n    div.appendChild(sp);\r\n    div.appendChild(inpt);\r\n    div.appendChild(sp2);\r\n    this.perfActs.insertBefore(div, this.perfActs.childNodes[e]);\r\n  };\r\n\r\n  checkActs = () => {\r\n    let childLen = this.perfActs.childNodes.length, //e\r\n      children = this.perfActs.childNodes; //t\r\n    for (let i = 0; i < childLen; i++) { // n\r\n      if (!children[i].childNodes[1].value) {\r\n        children[i].childNodes[1].style.borderColor = \"red\"\r\n        children[i].childNodes[1].onclick = () => {\r\n          return children[i].childNodes[1].style.borderColor = \"initial\";\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  inputsValid = () => {\r\n    if (!this.perfName.value) {\r\n      this.perfName.style.borderColor = \"red\"\r\n      return false;\r\n    } else if (!this.perfType.value) {\r\n      this.perfType.style.borderColor = \"red\"\r\n      return false;\r\n    } else if (!this.checkActs()) {\r\n      this.perfActs.borderColor = \"red\";\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  save = async (perfId, action) => { // e , t\r\n    if (\"update\" === action || \"create\" === action) {\r\n      if (this.inputsValid()) {\r\n        let perfName = this.perfName.value, //o\r\n          perfType = this.perfType.value, // i\r\n          perfUrl = this.perfUrl.value, // s\r\n          acts = [], // l\r\n          perfNotes = this.perfNotes.value; // a\r\n\r\n\r\n        for (let e = 0; e < this.perfActs.childNodes.length; e++) {\r\n          if (this.perfActs.childNodes[e].childNodes[1].value.includes(\",\")) {\r\n            return this.perfActs.childNodes[e].childNodes[1].style.borderColor = \"red\";\r\n          }\r\n          acts.push(this.perfActs.childNodes[e].childNodes[1].value);\r\n        }\r\n        if (perfId && action === \"update\") {\r\n          // let query = `name=${perfName}&type=${perfType}&imgUrl=${perfUrl}&acts=${acts}&points=${JSON.stringify()}&notes=${perfNotes}&perfId=${perfId}&action=${action}`;\r\n          let data = {\r\n            name: perfName,\r\n            type: perfType,\r\n            imgUrl: perfUrl,\r\n            acts: acts,\r\n            points: this.pointsData,\r\n            notes: perfNotes,\r\n            perfId: perfId,\r\n            action: action\r\n          }\r\n\r\n          const resp = await request(\"/performances\", \"POST\", data);\r\n\r\n          if (resp.statusText == \"OK\") {\r\n            alert(\"Спектакль обновлен успешно\");\r\n            this.backgroundModal.style.display = \"none\";\r\n            window.location.reload();\r\n            return;\r\n          } else {\r\n            alert(\"Ошибка во время сохранения\");\r\n            return;\r\n          }\r\n\r\n        } else if (!perfId && action == \"create\") {\r\n          let data = {\r\n            name: perfName,\r\n            type: perfType,\r\n            imgUrl: perfUrl,\r\n            acts: acts,\r\n            points: this.pointsData,\r\n            notes: perfNotes,\r\n            perfId: perfId,\r\n            action: action\r\n          }\r\n\r\n          const resp = await request(\"/performances\", \"POST\", data);\r\n          if (resp.statusText == \"OK\") {\r\n            alert(\"Новый спектакль успешно добавлен\");\r\n            window.location.reload();\r\n          }\r\n          else {\r\n            alert(\"Ошибка во время создания\");\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    } else if (action === \"remove\") {\r\n      let dt = {\r\n        perfId: perfId,\r\n        action: action\r\n      }\r\n      let resp = await request(\"/performances\", \"POST\", dt);\r\n      if (resp.statusText == \"OK\") {\r\n        alert(\"Спектакль успешно удалён\");\r\n        window.location.reload();\r\n        return;\r\n      }\r\n      else {\r\n        alert(\"Ошибка удаления\");\r\n        return;\r\n      };\r\n    }\r\n  };\r\n\r\n  addPoint = point => {\r\n    // e - point\r\n    // t-tr, o-sp\r\n\r\n    const tr = document.createElement(\"tr\");\r\n    const sp = document.createElement(\"span\");\r\n\r\n    sp.textContent = \"/\";\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      let td = document.createElement(\"td\");\r\n\r\n      if (i == 1) {\r\n        for (let b = 0; b < 2; b++) {\r\n          let inpt = document.createElement(\"input\");\r\n          inpt.setAttribute(\"type\", \"number\");\r\n          inpt.setAttribute(\"class\", \"lines\");\r\n          if (b == 1) {\r\n            td.appendChild(sp);\r\n          }\r\n          td.appendChild(inpt);\r\n        }\r\n      }\r\n\r\n      else if (i == 2) {\r\n        let inpt = document.createElement(\"input\");\r\n        inpt.setAttribute(\"type\", \"number\");\r\n        inpt.setAttribute(\"class\", \"meters\");\r\n        td.appendChild(inpt);\r\n      } else if (i == 3) {\r\n        // e-inpt, t -sp\r\n        let inpt = document.createElement(\"input\");\r\n        let sp = document.createElement(\"span\");\r\n        sp.textContent = \"X\";\r\n        sp.setAttribute(\"class\", \"del-point-rope\");\r\n        sp.onclick = e => {\r\n          if (confirm(\"Удалить эту точку подвеса?\")) {\r\n            e.target.parentElement.parentElement.remove();\r\n            this.totalPointsNum--;\r\n            this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n          }\r\n        }\r\n        inpt.setAttribute(\"type\", \"number\");\r\n        inpt.setAttribute(\"class\", \"machine\");\r\n        td.appendChild(inpt);\r\n        td.appendChild(sp);\r\n      }\r\n      tr.appendChild(td);\r\n    }\r\n    tr.setAttribute(\"class\", point + \"-point-rope\");\r\n    document.getElementById(point + \"-table\").appendChild(tr);\r\n    this.totalPointsNum++;\r\n    this.totalPointsSpan.textContent = this.totalPointsNum + \" шт.\";\r\n  };\r\n}\r\n","\r\nasync function request(url, method, data) {\r\n  const response = await fetch(url, {\r\n    method: method,\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body:  JSON.stringify(data) \r\n  });\r\n  return response;\r\n}"]}