{"version":3,"sources":["ajax.js","auth.js","authenticate.js","breadcrumps.js","notes.js","performances.js","skedjs.js"],"names":["request","method","url","query","cb","xhttp","XMLHttpRequest","onreadystatechange","this","readyState","status","onerror","e","currentTarget","open","setRequestHeader","send","Auth","baseUrl","_this","BASE_URL","authBt","document","getElementById","login","pass","onclick","value","alert","res","window","location","href","Rocky","setWorkspaceTo","Authenticate","pass1","pass2","authenBt","style","borderColor","q","updateBreadcrump","mainBreadcrump","currPage","pathname","textContent","/","/materials","/performances","Notes","publishBtn","closeNewNoteModal","newNoteBtn","newNoteModal","userMessage","lastNotesDiv","sortBy","skip","limit","initialize","onchange","upload10Notes","target","then","n","innerHTML","fillNotes","openWriteNewNote","publishNote","statusText","reload","catch","display","notes","i","length","noteDiv","createElement","setAttribute","userInfoDiv","usernameSpan","user","username","appendChild","userMessageDiv","userMessageP","text","actionsDiv","noteDateSpan","handsDiv","handupDiv","handownDiv","imgLike","handupNumDiv","votes","likedBy","imgDislike","handownNumDiv","dislikedBy","addEventListener","likeNote","_id","noteJson","classList","add","remove","note","nextSibling","parentElement","childNodes","console","log","dislikeNote","previousSibling","async","noteId","fetch","headers","Content-Type","body","JSON","stringify","typeOfVote","json","sort","response","uploadLastTenNotes","Performance","admin","pointsData","leftSide","rightSide","totalPointsNum","addPerfBtn","preloader","searchInpt","backgroundModal","closeAddPerf","savePerfBtn","perfName","perfType","perfUrl","perfActs","perfPoints","perfNotes","addActBtn","searchResults","closeCardPerf","backgroundCard","addPointsBtn","addRightPointBtn","addLeftPointBtn","backgroundPoints","closeEditPointsBtn","userPointsBack","closeUserPoints","cardPerfName","cardPerfImg","cardPerfType","cardPerfActs","cardPerfPoints","cardPerfNotes","totalPointsSpan","getActsEnding","actsNum","ending","showPerformanceCard","scrollTo","showUsualPointsTable","fillCardPerformanceActs","type","acts","clearDomElement","actLine","span1","span2","fillCardPerformancePoints","points","totalPoints","countPointsNum","fillUserPointsTable","btn","userPerfCardBack","height","offsetHeight","fillPerformanceCard","performance","name","imgUrl","src","editBt","openEdit","rmBt","confirm","save","elem","firstChild","fillSearchResults","results","srchResults","el","b","oninput","srchQuery","test","queryStr","parse","responseText","perfs","setTimeout","sp","ip","rm","addAct","em","fillEditCardPointsDiv","fillPointsEditModal","nSp","openEditTable","isEmpty","obj","prop","hasOwnProperty","trLeft","trRight","td2","td3","td4","leftTable","rightTable","key1","inpt1","brSp","inpt2","stalls","split","inptMeters","meters","inptMach","machine","delsp","key2","totalNum","leftUsrTable","rightUsrTable","saveEditingPoints","leftPoints","getElementsByClassName","rightPoints","line1","line2","lastChild","backgroundColor","addPoint","childNum","nextChildNum","spanAct","timeInpt","delBtn","insertBefore","checkActs","children","inputsValid","perfId","action","includes","push","perfData","side","tr","brSpan","td","inpt","delSp","SkedApp","state","needToSave","todayISODate","Date","now","wdays","dayFrom","monthFrom","yearFrom","dayTo","monthTo","yearTo","skedMainTb","nextSkedBtn","saveSkedBtn","prevSkedBtn","newSkedBtn","fillWithWorkers","workers","currWorkers","sel","opt1","opt2","opt3","dayNum","key","shifts","saveState","skedState","tableRows","worker","fromDate","fromISODate","getMonth","getDate","getFullYear","toDate","toISODate","error","fillUpperDates","from","to","dtFrom","dtTo","getSked","postQuery","responseData","prev","next","sked","skedData","data","fillTableHeader","dates","init","nextSked","today","rows","dt","newFrom","dateFrom","dateeFrom","weekday","getDay","weekdates","date","iso"],"mappings":"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","file":"../main.min.js","sourcesContent":["function request(method, url, query, cb) {\n  const xhttp = new XMLHttpRequest();\n  xhttp.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n      cb(\"success\", this);\n    } else if (this.readyState == 4 && this.status == 500) {\n      cb(\"error\", this);\n    }\n  };\n \n  xhttp.onerror = function(e) {\n    if(e.currentTarget.status == 0) {\n      // console.log(\"error of net\");\n      cb(\"econn\");\n    }\n  };\n  xhttp.open(method, url, true);\n\n  if(query !== false) {\n    xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n    xhttp.send(query);\n  } else {\n    xhttp.send();\n  }\n}","function Auth(baseUrl = \"\") {\n  const _this = this;\n  this.BASE_URL = baseUrl;\n\n  this.authBt = document.getElementById(\"auth-bt\");\n  this.login = document.getElementById(\"login\");\n  this.pass = document.getElementById(\"pass\");\n\n  this.authBt.onclick = function() {\n    let login = _this.login.value;\n    let pass = _this.pass.value;\n\n    if(!login || !pass) {\n      return alert(\"Отсутствует логин или пароль\");\n    }\n    request(\"POST\", _this.BASE_URL + \"/auth\", `login=${login}&pass=${pass}`, function(status, res) {\n      if(status == \"success\") {\n        alert(\"Авторизация успешна и будет действительна в течение 30 дней\");\n        if (_this.BASE_URL === \"\") {\n          return window.location.href = \"/\";\n        } else {\n          return Rocky.setWorkspaceTo(\"performances\");\n        }\n      } else if(status == \"error\") {\n        alert(\"Ошибка авторизации, проверьте введённые Вами данные\");\n        return;\n      }\n    });\n  }\n}","function Authenticate(baseUrl = \"\") {\n  const _this = this;\n  this.BASE_URL = baseUrl;\n\n  this.login = document.getElementById(\"login\");\n  this.pass1 = document.getElementById(\"pass1\");\n  this.pass2 = document.getElementById(\"pass2\");\n  this.authenBt = document.getElementById(\"authenticate-bt\");\n\n  this.login.onclick = function() {\n    _this.login.style.borderColor = \"transparent\";\n  };\n  this.pass1.onclick = function() {\n    _this.pass1.style.borderColor = \"transparent\";\n  };\n  this.pass2.onclick = function() {\n    _this.pass2.style.borderColor = \"transparent\";\n  };\n  \n  this.authenBt.onclick = function() {\n    // check inputs \n    if(!_this.login.value) {\n      alert('Поле \"Логин\" пусто. Придумайте себе логин, чтобы продолжить.');\n      return _this.login.style.borderColor = \"#f26a6a\";\n    } else if(!_this.pass1.value) {\n      alert('Поле \"Пароль\" пусто. Придумайте себе пароль, чтобы продолжить.');\n      return _this.pass1.style.borderColor = \"#f26a6a\";\n    } else if(!_this.pass2.value) {\n      alert('Поле \"Пароль повторно\" пусто. Введите пароль повторно, чтобы продолжить.');\n      return _this.pass2.style.borderColor = \"#f26a6a\";\n    }\n\n    let login = _this.login.value;\n    let pass1 = _this.pass1.value;\n    let pass2 = _this.pass2.value;\n    let q = `login=${login}&pass1=${pass1}&pass2=${pass2}`;\n\n    // check passes match\n    if(pass1 !== pass2) {\n      return alert(\"Введённые Вами пароли не совпадают\");\n    }\n\n    request(\"POST\", _this.BASE_URL + \"/authenticate\", q, function(status, res) {\n      if(status == \"success\") {\n        alert(\"Аутентификация успешна, сейчас вы будете перенаправлены на страницу логина\");\n        if (_this.BASE_URL === \"\") {\n          return window.location.href = \"/auth\";\n        } else {\n          return Rocky.setWorkspaceTo(\"login\");\n        }\n      } else if(status == \"error\") {\n        alert(\"Ошибка аутентификации, проверьте поля для ввода.\");\n        return;\n      }\n    });\n  };\n } ","function updateBreadcrump() {\n  const mainBreadcrump = document.getElementById(\"bread-crump\");\n  const currPage = window.location.pathname;\n  const pagesMap = {\n    \"/\": \"Главная\",\n    \"/materials\": \"Материалы\",\n    \"/performances\": \"Спектакли\",\n  };\n  mainBreadcrump.textContent = pagesMap[currPage];\n}","function Notes(baseUrl = \"\") {\n  const _this = this;\n  this.BASE_URL = baseUrl;\n\n  const publishBtn = document.getElementById(\"publish-btn\");\n  const closeNewNoteModal = document.getElementById(\"close-new-note\");\n  const newNoteBtn = document.getElementById(\"new-note-btn\");\n  const newNoteModal = document.getElementById(\"new-note-background\");\n  const userMessage = document.getElementById(\"user-message\");\n  const lastNotesDiv = document.getElementById(\"last-notes\");\n  const sortBy = document.getElementById(\"sort-by\");\n\n  this.skip = 0;\n  this.limit = 10;\n\n  this.initialize = () => {\n\n    sortBy.onchange = (e) => {\n      _this.upload10Notes(e.target.value).then(n => {\n        lastNotesDiv.innerHTML = \"\";\n        _this.fillNotes(n);\n      }); \n    };\n\n    newNoteBtn.onclick = () => {\n      _this.openWriteNewNote();\n    };\n\n    publishBtn.onclick = () => {\n      this.publishNote()\n        .then(res => {\n          if (res.statusText == \"Published\") {\n            alert(\"Сообщение опубликовано\");\n            return window.location.reload();\n          }\n        }).catch(e => {alert(\"Ошибка отправки запроса\") });\n    };\n\n    closeNewNoteModal.onclick = () => {\n      newNoteModal.style.display = \"none\";\n    };\n\n    this.fillNotes = (notes) => {\n      notes = notes.notes;\n\n      for (let i = 0; i < notes.length; i++) {\n         // create html for them\n        let noteDiv = document.createElement(\"div\");\n        noteDiv.setAttribute(\"class\", \"note\");\n        let userInfoDiv = document.createElement(\"div\");\n        userInfoDiv.setAttribute(\"class\", \"user-info\");\n        let usernameSpan = document.createElement(\"span\");\n        usernameSpan.setAttribute(\"class\", \"username\");\n        usernameSpan.textContent = notes[i].user.username;\n        userInfoDiv.appendChild(usernameSpan);\n        noteDiv.appendChild(userInfoDiv);\n\n        let userMessageDiv = document.createElement(\"div\");\n        userMessageDiv.setAttribute(\"class\", \"user-message\");\n        let userMessageP = document.createElement(\"p\");\n        userMessageP.textContent = notes[i].text;\n        userMessageDiv.appendChild(userMessageP);\n        noteDiv.appendChild(userMessageDiv);\n\n        let actionsDiv = document.createElement(\"div\");\n        actionsDiv.setAttribute(\"class\", \"actions\");\n        let noteDateSpan = document.createElement(\"span\");\n        noteDateSpan.setAttribute(\"class\", \"note-date\");\n        actionsDiv.appendChild(noteDateSpan);\n        let handsDiv = document.createElement(\"div\");\n        handsDiv.setAttribute(\"class\", \"hands\");\n        let handupDiv = document.createElement(\"div\");\n        handupDiv.setAttribute(\"class\", \"handup\");\n        let handownDiv = document.createElement(\"div\");\n        handownDiv.setAttribute(\"class\", \"handown\");\n        let imgLike = document.createElement(\"img\");\n        imgLike.setAttribute(\"class\", \"hand-up\");\n        imgLike.setAttribute(\"src\", \"static/imgs/handup.svg\");\n        let handupNumDiv = document.createElement(\"div\");\n        handupNumDiv.setAttribute(\"class\", \"handup-num\");\n        handupNumDiv.textContent = notes[i].votes.likedBy.length;\n        handupDiv.appendChild(imgLike);\n        handupDiv.appendChild(handupNumDiv);\n        let imgDislike = document.createElement(\"img\");\n        imgDislike.setAttribute(\"class\", \"hand-down\");\n        imgDislike.setAttribute(\"src\", \"static/imgs/handown.svg\");\n        let handownNumDiv = document.createElement(\"div\");\n        handownNumDiv.setAttribute(\"class\", \"handown-num\");\n        handownNumDiv.textContent = notes[i].votes.dislikedBy.length;\n        handownDiv.appendChild(imgDislike);\n        handownDiv.appendChild(handownNumDiv);\n        handsDiv.appendChild(handupDiv);\n        handsDiv.appendChild(handownDiv);\n        actionsDiv.appendChild(handsDiv);\n        noteDiv.appendChild(actionsDiv);\n\n        lastNotesDiv.appendChild(noteDiv);\n\n        imgLike.addEventListener(\"click\", (e) => {\n          this.likeNote(notes[i]._id)\n            .then(noteJson => {\n              e.target.classList.add(\"anim-grow\");\n              e.target.addEventListener(\"transitionend\", () => {e.target.classList.remove(\"anim-grow\")});\n              const note = noteJson.note;\n              e.target.nextSibling.textContent = note.votes.likedBy.length;\n              e.target.parentElement.nextSibling.childNodes[1].textContent = note.votes.dislikedBy.length; \n            }).catch(e => console.log(e));\n        });\n\n        imgDislike.addEventListener(\"click\", (e) => {\n          this.dislikeNote(notes[i]._id)\n            .then(noteJson => {\n              e.target.classList.add(\"anim-grow\");\n              e.target.addEventListener(\"transitionend\", () => {e.target.classList.remove(\"anim-grow\")});\n              const note = noteJson.note;\n              e.target.nextSibling.textContent = note.votes.dislikedBy.length;\n              e.target.parentElement.previousSibling.childNodes[1].textContent = note.votes.likedBy.length; \n            })\n        }); \n      }\n    }; \n\n    this.upload10Notes().then(notes => {\n      _this.fillNotes(notes);\n    });\n  };\n\n\n  this.likeNote = async (noteId) => {\n    const response = await fetch(this.BASE_URL + \"/notes/vote\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ typeOfVote: \"like\", noteId: noteId})\n    });\n    return response.json();\n  };\n\n  this.dislikeNote = async (noteId) => {\n    const response = await fetch(this.BASE_URL + \"/notes/vote\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ typeOfVote: \"dislike\", noteId: noteId})\n    });\n    return response.json();\n  };\n\n  this.upload10Notes = async (sort=\"-1\") => {\n    const response = await fetch(this.BASE_URL + \"/notes/upload-ten?sort=\"+sort);\n    return await response.json();\n  };\n\n  this.openWriteNewNote = () => {\n    newNoteModal.style.display = \"block\";\n  };\n\n  this.publishNote = async () => {\n    if (!userMessage.value) {\n      return alert(\"Вы не ввели текст заметки\");\n    }\n\n    const response = await fetch(this.BASE_URL + \"/notes/publish-note\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ text: userMessage.value })\n    });\n    return response;\n  };\n\n  this.uploadLastTenNotes = () => {\n    request(\"POST\", _this.BASE_URL + \"/notes\", `get=last10notes`, (status, res) => {\n      if (status == \"success\") {\n\n      } else if (status == \"error\") {\n        alert(\"Ошибка запроса последних заметок, проверьте соединение или попробуйте позже\");\n        return;\n      }\n    });\n  };\n\n  this.initialize();\n}","function Performance(baseUrl = \"\", admin = \"false\") {\n\n  const _this = this;\n  this.BASE_URL = baseUrl;\n\n  this.pointsData = {\n    leftSide: {},\n    rightSide: {}\n  };\n  // \n  this.totalPointsNum = 0;\n  this.addPerfBtn = document.getElementById(\"add-performance-btn\");\n\n  this.preloader = document.getElementById(\"preloader\");\n  this.searchInpt = document.getElementById(\"search-perfs\");\n  this.backgroundModal = document.getElementById(\"background-modal\");\n  this.closeAddPerf = document.getElementById(\"close-adding-perf\");\n  this.savePerfBtn = document.getElementById(\"save-perf-btn\");\n  this.perfName = document.getElementById(\"perf-name\");\n  this.perfType = document.getElementById(\"perf-type\");\n  this.perfUrl = document.getElementById(\"perf-pic-url\");\n  this.perfActs = document.getElementById(\"perf-acts\");\n  this.perfPoints = document.getElementById(\"perf-points\");\n  this.perfNotes = document.getElementById(\"perf-notes\");\n  this.addActBtn = document.getElementById(\"add-act\");\n  this.searchResults = document.getElementById(\"search-results\");\n  this.closeCardPerf = document.getElementById(\"close-card-perf\");\n  this.backgroundCard = document.getElementById(\"card-back\");\n  this.addPointsBtn = document.getElementById(\"add-points\");\n  this.addRightPointBtn = document.getElementById(\"add-right-pt-btn\");\n  this.addLeftPointBtn = document.getElementById(\"add-left-pt-btn\");\n  this.backgroundPoints = document.getElementById(\"points-back\");\n  this.closeEditPointsBtn = document.getElementById(\"close-points-perf\");\n  this.userPointsBack = document.getElementById(\"user-points-back\");\n  this.closeUserPoints = document.getElementById(\"close-user-points\");\n\n  this.cardPerfName = document.getElementById(\"card-perf-name\");\n  this.cardPerfImg = document.getElementById(\"card-perf-img\");\n  this.cardPerfType = document.getElementById(\"card-perf-type\");\n  this.cardPerfActs = document.getElementById(\"card-perf-acts\");\n  this.cardPerfPoints = document.getElementById(\"card-perf-points\");\n  this.cardPerfNotes = document.getElementById(\"card-perf-notes\");\n\n  this.totalPointsSpan = document.getElementById(\"total-points-num\");\n\n  this.getActsEnding = function (actsNum) {\n    let ending;\n    if (actsNum == 1) {\n      ending = actsNum + \" акт\";\n    } else if (actsNum > 1 && actsNum < 5) {\n      ending = actsNum + \" акта\";\n    } else {\n      ending = actsNum + \"актов\";\n    }\n    return ending;\n  };\n\n  this.showPerformanceCard = function () {\n    // show usual performance card and scroll top\n    _this.backgroundCard.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.showUsualPointsTable = function () {\n    // show usual performance table and scroll top\n    _this.userPointsBack.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.fillCardPerformanceActs = function (type, acts) {\n    const cardPerfType = _this.cardPerfType;\n    const cardPerfActs = _this.cardPerfActs;\n\n    // fill usual performance card with acts\n    if (type === \"ballet\") {\n      cardPerfType.textContent = `Балет, ${_this.getActsEnding(acts.length)}`;\n    }\n    else if (type === \"opera\") {\n      cardPerfType.textContent = `Опера, ${_this.getActsEnding(acts.length)}`;\n    }\n\n    // clear act's element before filling it\n    _this.clearDomElement(cardPerfActs, function () {\n      // create and fill element for each act\n      for (let e = 0; e < acts.length; e++) {\n        let actLine = document.createElement(\"div\");\n        let span1 = document.createElement(\"span\");\n        let span2 = document.createElement(\"span\");\n\n        actLine.setAttribute(\"class\", \"act-line\");\n        span1.textContent = `${e + 1} Акт:`;\n        span2.textContent = `${acts[e]}`;\n\n        actLine.appendChild(span1);\n        actLine.appendChild(span2);\n        cardPerfActs.appendChild(actLine);\n      }\n    });\n  };\n\n  this.fillCardPerformancePoints = function (points) {\n    const cardPerfPoints = _this.cardPerfPoints;\n\n    // if there is no points \n    if (!points) {\n      // show that points is absent\n      if (cardPerfPoints.childNodes.length == 3) {\n        // clear old elements before filling\n        cardPerfPoints.childNodes[1].remove();\n        cardPerfPoints.childNodes[1].remove();\n        // add 'absent' message \n        const i = document.createElement(\"i\");\n        i.textContent = \"– Отсутствуют\";\n        cardPerfPoints.appendChild(i);\n      }\n    }\n    else {\n      // if there IS points\n      if (cardPerfPoints.childNodes.length == 2) {\n        // clear user card points div before filling\n        cardPerfPoints.childNodes[1].remove();\n      } else if (cardPerfPoints.childNodes.length == 3) {\n        // clear old elements before filling\n        cardPerfPoints.childNodes[1].remove();\n        cardPerfPoints.childNodes[1].remove();\n      }\n\n      // fill performance card with number of points total\n      const totalPoints = document.createElement(\"p\");\n      totalPoints.setAttribute(\"class\", \"total-points-usr\");\n      totalPoints.textContent = `Всего: ${_this.countPointsNum(points)} шт.`;\n      cardPerfPoints.appendChild(totalPoints);\n\n      // fill usual table itself with points\n      _this.fillUserPointsTable(points);\n\n      // add show usual points button\n      const btn = document.createElement(\"button\");\n      btn.setAttribute(\"class\", \"showPoints-btn\");\n      btn.textContent = \"Просмотр\";\n      btn.onclick = function () {\n        let userPointsBack = _this.userPointsBack;\n        let userPerfCardBack = _this.backgroundCard;\n\n        // set point table's background height as much as performance card background\n        userPointsBack.style.height = userPerfCardBack.offsetHeight + \"px\";\n\n        // show usual table on click\n        _this.showUsualPointsTable();\n      };\n      // append above button to usual card if it is absent\n      cardPerfPoints.appendChild(btn);\n    }\n  };\n\n  this.fillPerformanceCard = function (performance) {\n    // filling usual performance card\n    const cardPerfName = _this.cardPerfName;\n    const cardPerfImg = _this.cardPerfImg;\n    const cardPerfNotes = _this.cardPerfNotes;\n\n    // fill permormance name\n    cardPerfName.textContent = performance.name;\n\n    // show performance img if exists\n    if (performance.imgUrl) {\n      cardPerfImg.src = _this.BASE_URL + \"/static/imgs/performance-imgs/\" + performance.imgUrl;\n      cardPerfImg.style.display = \"inline-block\";\n    } \n    else {\n      cardPerfImg.src =  _this.BASE_URL + \"/static/imgs/performance-imgs/no-photo.png\";\n      cardPerfImg.style.display = \"inline-block\";\n    }\n\n    // fill performance acts\n    _this.fillCardPerformanceActs(performance.type, performance.acts);\n\n    // fill performance card itself with existing points\n    _this.fillCardPerformancePoints(performance.points);\n\n    // fill notes\n    if (performance.notes != \"\") {\n      cardPerfNotes.innerHTML = performance.notes;\n    } else {\n      cardPerfNotes.textContent = \"– Отсутствуют\";\n    }\n\n    // if user is admin, add editing buttons\n    if (admin === \"true\") {\n      // add edit performance button\n      let editBt = document.createElement(\"button\");\n      editBt.setAttribute(\"class\", \"edit-btn\");\n      editBt.textContent = \"Редактировать\";\n      editBt.onclick = function () {\n        _this.openEdit(performance);\n      };\n      // add remove performance button\n      let rmBt = document.createElement(\"button\");\n      rmBt.setAttribute(\"class\", \"rm-perf-btn\");\n      rmBt.textContent = \"Удалить\";\n      rmBt.onclick = function () {\n        if (confirm(`Вы действительно хотите удалить спектакль \"${performance.name}\" из базы?`)) {\n          _this.save(performance._id, \"remove\");\n        }\n      };\n\n      // add edit and remove buttons if no ones\n      const cardElemCount = cardPerfName.parentElement.childNodes.length;\n      if (cardElemCount == 5) {\n        cardPerfName.parentElement.appendChild(editBt);\n        cardPerfName.parentElement.appendChild(rmBt);\n      }\n      else {\n        // if there is ones, replace them with new ones\n        cardPerfName.parentElement.childNodes[5].remove();\n        cardPerfName.parentElement.childNodes[5].remove();\n        cardPerfName.parentElement.appendChild(editBt);\n        cardPerfName.parentElement.appendChild(rmBt);\n      }\n    }\n    // update function of save performance button of usual card\n    _this.savePerfBtn.onclick = function () {\n      _this.save(performance._id, \"update\");\n    };\n  };\n\n  this.clearDomElement = function (elem, cb) {\n    // safe and fast way to clear dom element\n    while (elem.firstChild) {\n      elem.firstChild.remove();\n    }\n    return cb();\n  };\n\n  // filling search results div with found performanes\n  this.fillSearchResults = function (results) {\n\n    const srchResults = _this.searchResults;\n\n    // if nothing found\n    if (results.length == 0) {\n      const el = document.createElement(\"div\");\n      el.setAttribute(\"class\", \"perf-name-found nothing-found\");\n      el.textContent = \"Ничего не найдено\";\n      if (!srchResults.childNodes[0]) {\n        srchResults.appendChild(el);\n      }\n    }\n    else {\n      // fill search div with elements with performance's names\n      for (let i = 0; i < results.length; i++) {\n        let el = document.createElement(\"div\");\n        el.setAttribute(\"class\", \"perf-name-found\");\n        el.textContent = results[i].name;\n\n        // on click -> fill and show perfrormance card modal\n        el.onclick = function () {\n          _this.fillPerformanceCard(results[i]);\n          _this.showPerformanceCard();\n        };\n        for (let b = 0; b < srchResults.childNodes.length; b++) {\n          if (srchResults.childNodes[b].textContent == el.textContent) {\n            return;\n          }\n        }\n        srchResults.appendChild(el);\n      }\n    }\n  };\n\n  this.searchInpt.oninput = function () {\n    if (_this.searchInpt.value && _this.searchInpt.value != \"\") {\n      // clear search results div \n      _this.clearDomElement(_this.searchResults, function () {\n        const srchQuery = _this.searchInpt.value;\n        const rgx = /^\\s*$/;\n        // const rgx2 = /^\\.+/;\n\n        // regex test if query does not start with empty value .\n        // && !rgx2.test(srchQuery)\n        if (!rgx.test(srchQuery)) {\n          const queryStr = `query=${srchQuery}`;\n          _this.preloader.style.display = \"block\";\n          // send the above query to the server\n          request(\"POST\", _this.BASE_URL + \"/perf-search\", queryStr, function (status, res) {\n            if (status === \"success\") {\n              const results = JSON.parse(res.responseText).perfs;\n\n              // fill search div with results found \n              _this.fillSearchResults(results);\n              _this.preloader.style.display = \"none\";\n            }\n            else if (status == \"error\") {\n              _this.preloader.style.display = \"none\";\n              return;\n            } else if (status == \"econn\") {\n              _this.preloader.style.display = \"none\";\n              const el = document.createElement(\"div\");\n              el.setAttribute(\"class\", \"perf-name-found nothing-found\");\n              el.textContent = \"Проверьте интернет соединение\";\n              if (!_this.searchResults.childNodes[0]) {\n                _this.searchResults.appendChild(el);\n              }\n            }\n          });\n        } else {\n          _this.fillSearchResults([]);\n        }\n      });\n    } else {\n      setTimeout(function () {\n        // clear search results div \n        _this.clearDomElement(_this.searchResults, function () { });\n      }, 100);\n    }\n  };\n\n  this.openEdit = function (performance) {\n    _this.pointsData = performance.points;\n\n    _this.backgroundCard.style.display = \"none\";\n    _this.backgroundModal.style.display = \"block\";\n\n    this.perfName.value = performance.name;\n    this.perfType.value = performance.type;\n    this.perfUrl.value = performance.imgUrl;\n\n    // fill editing window with acts\n\n    if (performance.acts.length > 0) {\n      this.perfActs.innerHTML = \"\";\n\n      let actLine, sp, ip, rm, add;\n      for (let i = 0; i < performance.acts.length; i++) {\n        actLine = document.createElement(\"actLine\");\n        actLine.setAttribute(\"class\", \"act-line\");\n\n        sp = document.createElement(\"span\");\n        sp.setAttribute(\"class\", \"perf-act\");\n        sp.textContent = (i + 1) + \":\";\n        actLine.appendChild(sp);\n        ip = document.createElement(\"input\");\n        ip.setAttribute(\"class\", \"act-time\");\n        ip.setAttribute(\"type\", \"text\");\n        ip.setAttribute(\"placeholder\", \"1ч 15мин\");\n        ip.value = performance.acts[i];\n        actLine.appendChild(ip);\n        if (i == 0) {\n          add = document.createElement(\"button\");\n          add.setAttribute(\"class\", \"add-mini-btn\");\n          add.textContent = \"+\";\n          add.onclick = function () {\n            _this.addAct();\n          };\n          actLine.appendChild(add);\n        } else {\n          rm = document.createElement(\"span\");\n          rm.setAttribute(\"class\", \"del-act-btn\");\n          rm.textContent = \"X\";\n          rm.onclick = function (e) {\n            e.target.parentElement.remove();\n          };\n          actLine.appendChild(rm);\n        }\n        em = document.createElement(\"button\");\n        sp.setAttribute(\"class\", \"perf-act\");\n        this.perfActs.appendChild(actLine);\n      }\n\n    }\n    _this.fillEditCardPointsDiv(performance.points);\n    _this.fillPointsEditModal(performance.points);\n    this.perfNotes.value = performance.notes;\n\n    // change text of save button\n    this.savePerfBtn.textContent = \"Сохранить изменения\";\n    this.savePerfBtn.onclick = function () {\n      _this.save(performance._id, \"update\");\n    };\n  };\n\n  this.fillEditCardPointsDiv = function (points) {\n    // fill editing table with points\n    if (points) {\n      // fill preview modal\n      _this.perfPoints.childNodes[0].remove();\n      _this.perfPoints.childNodes[0].remove();\n      let nSp = document.createElement(\"span\");\n      nSp.setAttribute(\"class\", \"points-number\");\n      nSp.textContent = _this.countPointsNum(points) + \" шт.\";\n      let openEditTable = document.createElement(\"span\");\n      openEditTable.setAttribute(\"class\", \"showPoints-btn\");\n      openEditTable.textContent = \"Редактор\";\n      openEditTable.onclick = function () {\n        _this.fillPointsEditModal(points);\n        // set edit points' background height as much as edit card background\n        _this.backgroundPoints.style.height = _this.backgroundModal.offsetHeight + \"px\";\n        _this.backgroundPoints.style.display = \"block\";\n        window.scrollTo(0, 0);\n      }\n      _this.perfPoints.appendChild(nSp);\n      _this.perfPoints.appendChild(openEditTable);\n    }\n  };\n\n  this.isEmpty = function (obj) {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        return false;\n      }\n    }\n    return JSON.stringify(obj) === JSON.stringify({});\n  };\n\n  this.fillPointsEditModal = function (points) {\n    if (!points) {\n      points = {};\n    }\n\n    let leftTable = document.getElementById(\"left-table\").firstChild;\n    let rightTable = document.getElementById(\"right-table\").firstChild;\n\n    // clear before filling\n    while (leftTable.childNodes.length > 1) {\n      leftTable.childNodes[1].remove();\n    }\n    while (rightTable.childNodes.length > 1) {\n      rightTable.childNodes[1].remove();\n    }\n\n    _this.totalPointsNum = _this.countPointsNum(points);\n\n    let numTotal = document.getElementById(\"total-points-num\");\n    numTotal.textContent = _this.countPointsNum(points) + \" шт.\";\n\n    let trLeft, trRight, td2, td3, td4;\n    for (const key1 in points.leftSide) {\n      if (_this.isEmpty(points.leftSide[key1])) {\n        continue;\n      }\n\n      trLeft = document.createElement(\"tr\");\n      trLeft.setAttribute(\"class\", \"left-point-rope\");\n      trLeft.appendChild(document.createElement(\"td\"));\n\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      // fill them with inputs\n      let inpt1, brSp, inpt2;\n      inpt1 = document.createElement(\"input\");\n      inpt1.setAttribute(\"type\", \"number\");\n      inpt1.setAttribute(\"class\", \"lines\");\n      inpt1.value = points.leftSide[key1].stalls.split('/')[0];\n      brSp = document.createElement(\"span\");\n      brSp.textContent = \"/\";\n      inpt2 = document.createElement(\"input\");\n      inpt2.setAttribute(\"type\", \"number\");\n      inpt2.setAttribute(\"class\", \"lines\");\n      inpt2.value = points.leftSide[key1].stalls.split('/')[1];\n      td2.appendChild(inpt1);\n      td2.appendChild(brSp);\n      td2.appendChild(inpt2);\n\n      let inptMeters = document.createElement(\"input\");\n      inptMeters.setAttribute(\"type\", \"number\");\n      inptMeters.setAttribute(\"class\", \"meters\");\n      inptMeters.value = points.leftSide[key1].meters;\n      td3.appendChild(inptMeters);\n\n      let inptMach = document.createElement(\"input\");\n      inptMach.setAttribute(\"type\", \"number\");\n      inptMach.setAttribute(\"class\", \"machine\");\n      inptMach.value = points.leftSide[key1].machine;\n      td4.appendChild(inptMach);\n      let delsp = document.createElement(\"span\");\n      delsp.setAttribute(\"class\", \"del-point-rope\");\n      delsp.textContent = \"X\";\n      delsp.onclick = function (e) {\n        if (confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          _this.totalPointsNum--;\n          _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n        }\n      };\n      td4.appendChild(delsp);\n\n      trLeft.appendChild(td2);\n      trLeft.appendChild(td3);\n      trLeft.appendChild(td4);\n      leftTable.appendChild(trLeft);\n    }\n\n    for (const key2 in points.rightSide) {\n      if (_this.isEmpty(points.rightSide[key2])) {\n        continue;\n      }\n      trRight = document.createElement(\"tr\");\n      trRight.setAttribute(\"class\", \"right-point-rope\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      // fill them with inputs\n      let inpt1, brSp, inpt2;\n      inpt1 = document.createElement(\"input\");\n      inpt1.setAttribute(\"type\", \"number\");\n      inpt1.setAttribute(\"class\", \"lines\");\n      inpt1.value = points.rightSide[key2].stalls.split('/')[0];\n      brSp = document.createElement(\"span\");\n      brSp.textContent = \"/\";\n      inpt2 = document.createElement(\"input\");\n      inpt2.setAttribute(\"type\", \"number\");\n      inpt2.setAttribute(\"class\", \"lines\");\n      inpt2.value = points.rightSide[key2].stalls.split('/')[1];\n      td2.appendChild(inpt1);\n      td2.appendChild(brSp);\n      td2.appendChild(inpt2);\n\n      let inptMeters = document.createElement(\"input\");\n      inptMeters.setAttribute(\"type\", \"number\");\n      inptMeters.setAttribute(\"class\", \"meters\");\n      inptMeters.value = points.rightSide[key2].meters;\n      td3.appendChild(inptMeters);\n\n      let inptMach = document.createElement(\"input\");\n      inptMach.setAttribute(\"type\", \"number\");\n      inptMach.setAttribute(\"class\", \"machine\");\n      inptMach.value = points.rightSide[key2].machine;\n      td4.appendChild(inptMach);\n      let delsp = document.createElement(\"span\");\n      delsp.setAttribute(\"class\", \"del-point-rope\");\n      delsp.textContent = \"X\";\n      delsp.onclick = function (e) {\n        if (confirm(\"Удалить эту точку подвеса?\")) {\n          e.target.parentElement.parentElement.remove();\n          _this.totalPointsNum--;\n          _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n        }\n      };\n      td4.appendChild(delsp);\n      trRight.appendChild(td2);\n      trRight.appendChild(td3);\n      trRight.appendChild(td4);\n      rightTable.appendChild(trRight);\n    }\n  };\n\n  this.countPointsNum = function (points) {\n    let totalNum = 0;\n    if (!points) {\n      return 0;\n    }\n    for (key1 in points.leftSide) {\n      if (!_this.isEmpty(points.leftSide[key1])) {\n        totalNum++;\n      }\n    }\n    for (key1 in points.rightSide) {\n      if (!_this.isEmpty(points.rightSide[key1])) {\n        totalNum++;\n      }\n    }\n    return totalNum;\n  };\n\n  this.closeUserPoints.onclick = function () {\n    // close user table points\n    _this.userPointsBack.style.display = \"none\";\n  };\n\n  this.fillUserPointsTable = function (points) {\n    let leftUsrTable = document.getElementById(\"left-usr-table\").firstChild;\n    let rightUsrTable = document.getElementById(\"right-usr-table\").firstChild;\n\n    // clear before filling\n    while (leftUsrTable.childNodes.length > 1) {\n      leftUsrTable.childNodes[1].remove();\n    }\n    while (rightUsrTable.childNodes.length > 1) {\n      rightUsrTable.childNodes[1].remove();\n    }\n\n    let numTotal = document.getElementById(\"total-user-points\");\n    numTotal.textContent = _this.countPointsNum(points) + \" шт.\";\n\n    let trLeft, trRight, td2, td3, td4;\n    for (const key1 in points.leftSide) {\n      trLeft = document.createElement(\"tr\");\n      trLeft.appendChild(document.createElement(\"td\"));\n\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      td2.textContent = points.leftSide[key1].stalls;\n      trLeft.appendChild(td2);\n      td3.textContent = points.leftSide[key1].meters;\n      trLeft.appendChild(td3);\n      td4.textContent = points.leftSide[key1].machine;\n      trLeft.appendChild(td4);\n      leftUsrTable.appendChild(trLeft);\n    }\n\n    for (const key2 in points.rightSide) {\n      trRight = document.createElement(\"tr\");\n      trRight.appendChild(document.createElement(\"td\"));\n      td2 = document.createElement(\"td\");\n      td3 = document.createElement(\"td\");\n      td4 = document.createElement(\"td\");\n\n      td2.textContent = points.rightSide[key2].stalls;\n      trRight.appendChild(td2);\n      td3.textContent = points.rightSide[key2].meters;\n      trRight.appendChild(td3);\n      td4.textContent = points.rightSide[key2].machine;\n      trRight.appendChild(td4);\n      rightUsrTable.appendChild(trRight);\n    }\n  };\n\n  this.saveEditingPoints = function () {\n    // save points\n    let leftPoints = document.getElementsByClassName(\"left-point-rope\");\n    let rightPoints = document.getElementsByClassName(\"right-point-rope\");\n\n    // clear points data before filling it.\n    _this.pointsData = {\n      leftSide: {},\n      rightSide: {}\n    };\n\n    if (leftPoints.length == 0 && rightPoints.length == 0) {\n      _this.backgroundPoints.style.display = \"none\";\n      return;\n    }\n\n    for (let i = 0; i < leftPoints.length; i++) {\n      _this.pointsData.leftSide[\"point\" + (i + 1)] = {};\n      for (let b = 1; b < leftPoints[i].childNodes.length; b++) {\n        if (b == 1) {\n          let line1 = leftPoints[i].childNodes[b].firstChild;\n          let line2 = leftPoints[i].childNodes[b].lastChild;\n          // check if empty\n          if (!line1.value) {\n            line1.parentElement.style.backgroundColor = \"red\";\n            line1.onclick = function () {\n              line1.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          } else if (!line2.value) {\n            line2.parentElement.style.backgroundColor = \"red\";\n            line2.onclick = function () {\n              line2.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.leftSide[\"point\" + (i + 1)].stalls = line1.value + \"/\" + line2.value;\n        } else if (b == 2) {\n          // check if empty\n          if (!leftPoints[i].childNodes[b].firstChild.value) {\n            leftPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"red\";\n            leftPoints[i].childNodes[b].firstChild.onclick = function () {\n              leftPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"initial\";\n            }\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.leftSide[\"point\" + (i + 1)].meters = leftPoints[i].childNodes[b].firstChild.value;\n        } else if (b == 3) {\n          _this.pointsData.leftSide[\"point\" + (i + 1)].machine = leftPoints[i].childNodes[b].firstChild.value;\n        }\n      }\n    }\n    for (let i = 0; i < rightPoints.length; i++) {\n      _this.pointsData.rightSide[\"point\" + (i + 1)] = {};\n      for (let b = 1; b < rightPoints[i].childNodes.length; b++) {\n        if (b == 1) {\n          let line1 = rightPoints[i].childNodes[b].firstChild;\n          let line2 = rightPoints[i].childNodes[b].lastChild;\n\n          // check if empty\n          if (!line1.value) {\n            line1.parentElement.style.backgroundColor = \"red\";\n            line1.onclick = function () {\n              line1.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          } else if (!line2.value) {\n            line2.parentElement.style.backgroundColor = \"red\";\n            line2.onclick = function () {\n              line2.parentElement.style.backgroundColor = \"initial\";\n            };\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n\n          _this.pointsData.rightSide[\"point\" + (i + 1)].stalls = line1.value + \"/\" + line2.value;\n        } else if (b == 2) {\n          // check if empty\n          if (!rightPoints[i].childNodes[b].firstChild.value) {\n            rightPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"red\";\n            rightPoints[i].childNodes[b].firstChild.onclick = function () {\n              rightPoints[i].childNodes[b].firstChild.parentElement.style.backgroundColor = \"initial\";\n            }\n            alert(\"Пустые поля недопустимы, заполните либо удалите пустые точки подвеса\");\n            return;\n          }\n          _this.pointsData.rightSide[\"point\" + (i + 1)].meters = rightPoints[i].childNodes[b].firstChild.value;\n        } else if (b == 3) {\n          _this.pointsData.rightSide[\"point\" + (i + 1)].machine = rightPoints[i].childNodes[b].firstChild.value;\n        }\n      }\n    }\n\n    // fill editing card points div\n    _this.fillEditCardPointsDiv(_this.pointsData);\n    _this.backgroundPoints.style.display = \"none\";\n  };\n\n  this.closeEditPointsBtn.onclick = function () {\n    _this.saveEditingPoints();\n  };\n\n  this.addPointsBtn.onclick = function () {\n    _this.backgroundPoints.style.display = \"block\";\n    window.scrollTo(0, 0);\n  };\n\n  this.closeCardPerf.onclick = function () {\n    _this.savePerfBtn.onclick = function () {\n      _this.save(false, \"create\");\n    };\n\n    _this.backgroundCard.style.display = \"none\";\n  };\n\n  if (admin === \"true\") {\n    this.addPerfBtn.onclick = function () {\n      _this.backgroundModal.style.display = \"block\";\n    };\n  }\n\n  this.closeAddPerf.onclick = function () {\n    _this.backgroundModal.style.display = \"none\";\n  };\n\n  this.savePerfBtn.onclick = function () {\n    _this.save(false, \"create\");\n  };\n\n  this.perfName.onclick = function () {\n    _this.perfName.style.borderColor = \"initial\";\n  };\n\n  this.perfType.onclick = function () {\n    _this.perfType.style.borderColor = \"initial\";\n  }\n\n  this.addActBtn.onclick = function () {\n    _this.addAct();\n  };\n\n  this.addRightPointBtn.onclick = function () {\n    _this.addPoint(\"right\");\n  }\n\n  this.addLeftPointBtn.onclick = function () {\n    _this.addPoint(\"left\");\n  }\n\n  this.addAct = function () {\n    // num of childnodes without button\n    let childNum = _this.perfActs.childNodes.length;\n    let nextChildNum = childNum + 1;\n\n    // create elements\n    let actLine = document.createElement(\"div\");\n    let spanAct = document.createElement(\"span\");\n    let timeInpt = document.createElement(\"input\");\n    let delBtn = document.createElement(\"span\");\n\n\n    // set attributes on them\n    actLine.setAttribute(\"class\", \"act-line\")\n    spanAct.setAttribute(\"class\", \"perf-act\");\n    spanAct.setAttribute(\"id\", \"perf-act\" + nextChildNum);\n    spanAct.textContent = nextChildNum + \":\";\n    timeInpt.setAttribute(\"type\", \"text\");\n    timeInpt.setAttribute(\"class\", \"act-time\");\n    timeInpt.setAttribute(\"id\", \"act-time\" + nextChildNum);\n    timeInpt.setAttribute(\"placeholder\", \"1ч 15мин\");\n    delBtn.setAttribute(\"id\", \"del-act-btn\" + nextChildNum);\n    delBtn.setAttribute(\"class\", \"del-act-btn\");\n    delBtn.textContent = \"X\";\n    delBtn.onclick = function () {\n      delBtn.parentElement.remove();\n    };\n\n    // add\n    actLine.appendChild(spanAct);\n    actLine.appendChild(timeInpt);\n    actLine.appendChild(delBtn);\n    _this.perfActs.insertBefore(actLine, _this.perfActs.childNodes[childNum]);\n  };\n\n  this.checkActs = function () {\n    // num of childnodes\n    let childNum = _this.perfActs.childNodes.length;\n    let children = _this.perfActs.childNodes;\n    for (let i = 0; i < childNum; i++) {\n\n      // check if act time exists for all children\n      if (!children[i].childNodes[1].value) {\n        children[i].childNodes[1].style.borderColor = \"red\";\n        children[i].childNodes[1].onclick = function () { return children[i].childNodes[1].style.borderColor = \"initial\"; };\n        return false;\n        break;\n      }\n    }\n    return true;\n  };\n\n  this.inputsValid = function () {\n    // check all inputs\n    if (!_this.perfName.value) {\n      _this.perfName.style.borderColor = \"red\";\n      return false;\n    }\n    else if (!_this.perfType.value) {\n      _this.perfType.style.borderColor = \"red\";\n      return false;\n    }\n    else if (!_this.checkActs()) {\n      _this.perfActs.borderColor = \"red\";\n      return false;\n    }\n    return true;\n  };\n\n  this.save = function (perfId, action) {\n    if (action === \"update\" || action === \"create\") {\n      // check for empty inputs\n      if (_this.inputsValid()) {\n        let name = _this.perfName.value;\n        let type = _this.perfType.value;\n        let imgUrl = _this.perfUrl.value;\n        let perfActs = [];\n        let perfNotes = _this.perfNotes.value;\n\n        // check if acts do not include commas\n        for (let i = 0; i < _this.perfActs.childNodes.length; i++) {\n          if (_this.perfActs.childNodes[i].childNodes[1].value.includes(\",\")) {\n            _this.perfActs.childNodes[i].childNodes[1].style.borderColor = \"red\";\n            return;\n          }\n          // add act to perfActs to save if validation passed\n          perfActs.push(_this.perfActs.childNodes[i].childNodes[1].value);\n        }\n\n        if (perfId && action === \"update\") {\n          let perfData = `name=${name}&type=${type}&imgUrl=${imgUrl}&acts=${perfActs}&points=${JSON.stringify(_this.pointsData)}&notes=${perfNotes}&perfId=${perfId}&action=${action}`;\n\n          // send data to Server\n          request(\"post\", _this.BASE_URL + \"/performances\", perfData, function (status, res) {\n            if (status == \"success\") {\n              alert(\"Спектакль обновлен успешно\");\n              _this.backgroundModal.style.display = \"none\";\n              window.location.reload();\n            }\n            else if (status == \"err\") {\n              return;\n            }\n          });\n        } else if (!perfId && action == \"create\") {\n          let perfData = `name=${name}&type=${type}&imgUrl=${imgUrl}&acts=${perfActs}&points=${JSON.stringify(_this.pointsData)}&notes=${perfNotes}&action=${action}`;\n          // send data to Server\n          request(\"post\", _this.BASE_URL + \"/performances\", perfData, function (status, res) {\n            if (status == \"success\") {\n              alert(\"Новый спектакль успешно добавлен\");\n              _this.backgroundModal.style.display = \"none\";\n              window.location.reload();\n            }\n            else if (status == \"err\") {\n              return;\n            }\n          });\n        }\n      }\n    }\n    else if (action === \"remove\") {\n      perfData = `perfId=${perfId}&action=${action}`;\n      // send data to Server\n      request(\"post\", _this.BASE_URL + \"/performances\", perfData, function (status, res) {\n        if (status == \"success\") {\n          alert(\"Спектакль успешно удалён\");\n          _this.backgroundModal.style.display = \"none\";\n          window.location.reload();\n        }\n        else if (status == \"err\") {\n          return;\n        }\n      });\n    }\n  };\n\n  this.addPoint = function (side) {\n    let tr = document.createElement(\"tr\");\n    let brSpan = document.createElement(\"span\");\n    brSpan.textContent = \"/\";\n\n    for (let i = 0; i < 4; i++) {\n      let td = document.createElement(\"td\");\n      if (i == 1) {\n        for (let b = 0; b < 2; b++) {\n          let inpt = document.createElement(\"input\");\n          inpt.setAttribute(\"type\", \"number\");\n          inpt.setAttribute(\"class\", \"lines\");\n          (b == 1 ? td.appendChild(brSpan) : null);\n          td.appendChild(inpt);\n        }\n      } else if (i == 2) {\n        let inpt = document.createElement(\"input\");\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"meters\");\n        td.appendChild(inpt);\n      } else if (i == 3) {\n        let inpt = document.createElement(\"input\");\n        let delSp = document.createElement(\"span\");\n        delSp.textContent = \"X\";\n        delSp.setAttribute(\"class\", \"del-point-rope\");\n        delSp.onclick = function (e) {\n          if (confirm(\"Удалить эту точку подвеса?\")) {\n            e.target.parentElement.parentElement.remove();\n            _this.totalPointsNum--;\n            _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n          }\n        };\n        inpt.setAttribute(\"type\", \"number\");\n        inpt.setAttribute(\"class\", \"machine\");\n        td.appendChild(inpt);\n        td.appendChild(delSp);\n      }\n      tr.appendChild(td);\n    }\n    // add\n    tr.setAttribute(\"class\", side + \"-point-rope\");\n    document.getElementById(side + \"-table\").appendChild(tr);\n\n    // increment total points\n    _this.totalPointsNum++;\n    _this.totalPointsSpan.textContent = _this.totalPointsNum + \" шт.\";\n  };\n}","function SkedApp(baseUrl = \"\") {\n  const _this = this;\n  this.BASE_URL = baseUrl;\n\n  this.state = [];\n  this.needToSave = false;\n  this.todayISODate = new Date(Date.now());\n  const wdays = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"];\n  this.dayFrom = document.getElementById(\"day-from\");\n  this.monthFrom = document.getElementById(\"month-from\");\n  this.yearFrom = document.getElementById(\"year-from\");\n  this.dayTo = document.getElementById(\"day-to\");\n  this.monthTo = document.getElementById(\"month-to\");\n  this.yearTo = document.getElementById(\"year-to\");\n  const skedMainTb = document.getElementById(\"sked-main-tb\");\n  const nextSkedBtn = document.getElementById(\"next-sked-bt\");\n  const saveSkedBtn = document.getElementById(\"save-sked-bt\");\n  const prevSkedBtn = document.getElementById(\"prev-sked-bt\");\n  const newSkedBtn = document.getElementById(\"new-sked-bt\");\n  \n  this.fillWithWorkers = function(workers) {\n\n    const currWorkers = workers ? workers : _this.workers;\n    let tr, td, sel, opt1, opt2, opt3, dayNum = 0;\n\n    for(let i=0; i<currWorkers.length; i++) {\n      tr = document.createElement(\"tr\");\n      tr.setAttribute(\"class\", \"table-row-worker\");\n      td = document.createElement(\"td\");\n      td.textContent = currWorkers[i].username;\n      tr.appendChild(td);\n      \n      while(dayNum < 14) {\n        td = document.createElement(\"td\");\n        sel = document.createElement(\"select\");\n        sel.setAttribute(\"class\", \"shift-choose\");\n\n        opt1 = document.createElement(\"option\");\n        opt2 = document.createElement(\"option\");\n        opt3 = document.createElement(\"option\");\n        \n        opt1.textContent = \"–\";\n        opt2.textContent = \"8.30\";\n        opt3.textContent = \"16\";\n        sel.appendChild(opt1);\n        sel.appendChild(opt2);\n        sel.appendChild(opt3);\n\n        if(!workers) {\n          opt1.setAttribute(\"selected\", \"true\");\n        } else {\n          for(key in workers[i].shifts) {\n            if(opt1.textContent == workers[i].shifts[key]) {\n              opt1.setAttribute(\"selected\", \"true\");\n            }\n            else if(opt2.textContent == workers[i].shifts[key]) {\n              opt2.setAttribute(\"selected\", \"true\");\n            } \n            else if(opt3.textContent == workers[i].shifts[key]) {\n              opt3.setAttribute(\"selected\", \"true\");\n            }\n          }\n        }\n\n        td.appendChild(sel);\n        tr.appendChild(td);\n        dayNum++;\n      }\n      skedMainTb.appendChild(tr);\n      dayNum = 0;\n    }\n  };\n\n  this.saveState = function() {\n    const skedState = [];\n    const tableRows = document.getElementsByClassName(\"table-row-worker\");\n\n    for(let i=0; i<tableRows.length; i++) {\n      let shifts = {};\n\n      for(let b=1; b<tableRows[i].childNodes.length; b++) {\n        shifts[b] = tableRows[i].childNodes[b].firstChild.value;\n      }\n\n      let worker = {};\n      worker.username = tableRows[i].firstChild.textContent;\n      worker.shifts = shifts;\n\n      skedState.push(worker);\n    }\n\n    // to form saving post query\n    const fromDate = `${_this.fromISODate.getMonth()+1}/${_this.fromISODate.getDate()}/${_this.fromISODate.getFullYear()}`;\n    const toDate = `${_this.toISODate.getMonth()+1}/${_this.toISODate.getDate()}/${_this.toISODate.getFullYear()}`;\n    \n    // send data to the server to save\n    request(\"POST\", _this.BASE_URL + \"/save-sked\", `state=${JSON.stringify(skedState)}&from=${fromDate}&to=${toDate}`, function(status, res) {\n      if (status == \"success\") {\n        console.log(\"Sked draft was saved\");\n      } else if (status == \"error\") {\n        console.error(\"Error during saving current sked draft state\");\n      }\n    });\n  };\n\n  this.fillUpperDates = function(from, to) {\n    let dtFrom = new Date(from);\n    let dtTo = new Date(to);\n\n    _this.dayFrom.textContent = dtFrom.getDate();\n    _this.monthFrom.textContent = dtFrom.getMonth()+1;\n    _this.yearFrom.textContent = dtFrom.getFullYear();\n    _this.dayTo.textContent = dtTo.getDate();\n    _this.monthTo.textContent = dtTo.getMonth()+1;\n    _this.yearTo.textContent = dtTo.getFullYear();\n  };\n\n  this.getSked = function(from, to) {\n    const postQuery = from ? `from=${from}` : `to=${to}`;\n  \n    request(\"POST\", _this.BASE_URL + \"/sked\", postQuery, function (status, res) {\n      if (status == \"success\") {\n        const responseData = JSON.parse(res.responseText);\n\n        // if no previous sked or it is empty dates, hide previous button\n        if(responseData.prev == false || !responseData.prev) {\n          prevSkedBtn.style.display = \"none\";\n        } else {\n          prevSkedBtn.style.display = \"block\";\n        }\n        // if no next sked, or it is empty dates, hide next button\n        if(responseData.next == false| !responseData.next) {\n          nextSkedBtn.style.display = \"none\";\n          newSkedBtn.style.display = \"block\";\n        } else {\n          nextSkedBtn.style.display = \"block\";\n          newSkedBtn.style.display = \"none\";\n        }\n\n        // if it is sked data, fill with it\n        if(responseData.sked) {\n          const skedData = responseData.sked.data;\n\n          _this.fillUpperDates(responseData.sked.from, responseData.sked.to);\n          _this.fillTableHeader(responseData.sked.from, responseData.dates);\n          _this.fillWithWorkers(skedData);\n          // set current date from\n          _this.fromISODate = new Date(responseData.sked.from);\n          _this.toISODate = new Date(responseData.sked.to);\n        } \n        // otherwise, just fill new sked with current dates\n        else {\n          // hide new btn\n          newSkedBtn.style.display = \"none\";\n          prevSkedBtn.style.display = \"block\";\n\n          _this.fillTableHeader(responseData.from, responseData.dates);\n          _this.fillUpperDates(responseData.from, _this.toISODate);\n          _this.fillWithWorkers();\n          // set current date from\n          _this.fromISODate = new Date(responseData.from);\n        }\n      }\n      else if (status == \"error\") {\n        return;\n      }\n    });\n  };\n\n  this.init = function() {\n    if(nextSkedBtn) {\n      nextSkedBtn.addEventListener(\"click\", function() {\n        _this.saveState();\n        _this.needToSave = false;\n        _this.nextSked();\n      });      \n    } \n    if(saveSkedBtn) {\n      saveSkedBtn.onclick = function() {\n        _this.saveState();\n      };\n    }\n    if(newSkedBtn) {\n      newSkedBtn.onclick = function() {\n        _this.needToSave = true;\n        let fromPrev = confirm(\"Создать график с последнего числа предыдущего графика? При отмене график создастся с сегодняшнего дня.\");\n        let query;\n        if(fromPrev) {\n          query = `${_this.toISODate.getMonth()+1}/${_this.toISODate.getDate()}/${_this.toISODate.getFullYear()}`;\n        } else {\n          const today = new Date(Date.now());\n          query = `${today.getMonth()+1}/${today.getDate()}/${today.getFullYear()}`;\n        }\n\n        const rows = document.getElementsByClassName(\"table-row-worker\");\n        // clear table before;\n        while(rows[0]) {\n          rows[0].remove();\n        }\n\n        _this.getSked(query);\n      };\n    }\n    if(prevSkedBtn) {\n      prevSkedBtn.onclick = function() {\n        _this.saveState();\n        _this.needToSave = false;\n        let dt = `${_this.fromISODate.getMonth()+1}/${_this.fromISODate.getDate()}/${_this.fromISODate.getFullYear()}`;\n        const rows = document.getElementsByClassName(\"table-row-worker\");\n\n        // clear table before;\n        while(rows[0]) {\n          rows[0].remove();\n        }\n        _this.getSked(null, dt);\n      };\n    }\n    // get last sked created\n    _this.getSked(\"LAST\");\n  };\n\n  this.nextSked = function() {\n    const rows = document.getElementsByClassName(\"table-row-worker\");\n    while(rows[0]) {\n      rows[0].remove();\n    }\n    const newFrom = `${_this.toISODate.getMonth()+1}/${_this.toISODate.getDate()}/${_this.toISODate.getFullYear()}`;\n    _this.getSked(newFrom);\n  };\n\n  this.fillTableHeader = function(dateFrom, dates) {\n    let dateeFrom = new Date(dateFrom).getDate();\n \n    let weekday = new Date(dateFrom).getDay();\n    const weekdates = document.getElementsByClassName(\"weekdate\");\n    let next = false;\n \n    for(let i=0; i<weekdates.length; i++) {\n      for(let b=0; b<dates.length; b++) {\n        if(dates[b].date == dateeFrom) {\n          // if dates type is next month\n          if(next) {\n            if(dates[b].type != \"next\") {\n              continue;\n            } else {\n              weekdates[i].textContent = dates[b].date + \" \"+ wdays[weekday];\n            }\n          } else {\n            weekdates[i].textContent = dates[b].date + \" \"+ wdays[weekday];\n          }\n          \n          // set date To by last date\n          if(i+1 == weekdates.length && _this.needToSave == true) {\n            _this.toISODate = new Date(dates[b].iso);\n          }\n       \n          if(dates[b+1].type == \"next\"&& !next) {\n            next=true;\n            dateeFrom = 1;\n          } else {\n            dateeFrom++;\n          }\n          // update weekday\n          if(weekday <6) {\n            weekday++\n          } else {\n            weekday = 0;\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  // setInterval(function() {\n  //   if(_this.needToSave == true) {\n  //     _this.saveState();\n  //   }\n  // }, 1000*60);\n};"]}